

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu Oct 28 17:24:50 2021

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	idataBANK1,global,class=CODE,delta=1
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	text55,global,reloc=2,class=CODE,delta=1
    73                           	psect	text56,global,reloc=2,class=CODE,delta=1
    74                           	psect	text57,global,reloc=2,class=CODE,delta=1
    75                           	psect	text58,global,reloc=2,class=CODE,delta=1
    76                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    77                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    78                           	psect	text60,global,reloc=2,class=CODE,delta=1
    79                           	psect	text61,global,reloc=2,class=CODE,delta=1
    80                           	psect	text62,global,reloc=2,class=CODE,delta=1
    81                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    82                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    83  0000                     
    84                           	psect	idataCOMRAM
    85  001D40                     __pidataCOMRAM:
    86                           	opt stack 0
    87                           
    88                           ;initializer for _tempSecond
    89  001D40  FF                 	db	255
    90                           
    91                           ;initializer for _wrap
    92  001D41  01                 	db	1
    93                           
    94                           	psect	idataBANK0
    95  00190C                     __pidataBANK0:
    96                           	opt stack 0
    97                           
    98                           ;initializer for _color
    99  00190C  F800               	dw	63488
   100  00190E  F800               	dw	63488
   101  001910  F800               	dw	63488
   102  001912  001F               	dw	31
   103  001914  001F               	dw	31
   104  001916  07E0               	dw	2016
   105  001918  F81F               	dw	63519
   106  00191A  F81F               	dw	63519
   107  00191C  F81F               	dw	63519
   108  00191E  0000               	dw	0
   109  001920  0000               	dw	0
   110  001922  0000               	dw	0
   111  001924  0000               	dw	0
   112  001926  0000               	dw	0
   113  001928  0000               	dw	0
   114  00192A  0000               	dw	0
   115  00192C  0000               	dw	0
   116  00192E  0000               	dw	0
   117  001930  0000               	dw	0
   118  001932  0000               	dw	0
   119  001934  0000               	dw	0
   120                           
   121                           ;initializer for _array1
   122  001936  A2                 	db	162
   123  001937  62                 	db	98
   124  001938  E2                 	db	226
   125  001939  22                 	db	34
   126  00193A  02                 	db	2
   127  00193B  C2                 	db	194
   128  00193C  E0                 	db	224
   129  00193D  A8                 	db	168
   130  00193E  90                 	db	144
   131  00193F  68                 	db	104
   132  001940  98                 	db	152
   133  001941  B0                 	db	176
   134  001942  30                 	db	48
   135  001943  18                 	db	24
   136  001944  7A                 	db	122
   137  001945  10                 	db	16
   138  001946  38                 	db	56
   139  001947  5A                 	db	90
   140  001948  42                 	db	66
   141  001949  4A                 	db	74
   142  00194A  52                 	db	82
   143                           
   144                           	psect	idataBANK1
   145  001734                     __pidataBANK1:
   146                           	opt stack 0
   147                           
   148                           ;initializer for _txt1
   149  001734  43                 	db	67
   150  001735  48                 	db	72
   151  001736  2D                 	db	45
   152  001737  00                 	db	0
   153  001738  43                 	db	67
   154  001739  48                 	db	72
   155  00173A  30                 	db	48
   156  00173B  00                 	db	0
   157  00173C  43                 	db	67
   158  00173D  48                 	db	72
   159  00173E  2B                 	db	43
   160  00173F  00                 	db	0
   161  001740  50                 	db	80
   162  001741  52                 	db	82
   163  001742  56                 	db	86
   164  001743  00                 	db	0
   165  001744  4E                 	db	78
   166  001745  58                 	db	88
   167  001746  54                 	db	84
   168  001747  00                 	db	0
   169  001748  50                 	db	80
   170  001749  2F                 	db	47
   171  00174A  50                 	db	80
   172  00174B  00                 	db	0
   173  00174C  56                 	db	86
   174  00174D  4C                 	db	76
   175  00174E  2D                 	db	45
   176  00174F  00                 	db	0
   177  001750  56                 	db	86
   178  001751  4C                 	db	76
   179  001752  2B                 	db	43
   180  001753  00                 	db	0
   181  001754  45                 	db	69
   182  001755  51                 	db	81
   183  001756  30                 	db	48
   184  001757  00                 	db	0
   185  001758  23                 	db	35
   186  001759  30                 	db	48
   187  00175A  30                 	db	48
   188  00175B  00                 	db	0
   189  00175C  31                 	db	49
   190  00175D  30                 	db	48
   191  00175E  30                 	db	48
   192  00175F  00                 	db	0
   193  001760  32                 	db	50
   194  001761  30                 	db	48
   195  001762  30                 	db	48
   196  001763  00                 	db	0
   197  001764  23                 	db	35
   198  001765  30                 	db	48
   199  001766  31                 	db	49
   200  001767  00                 	db	0
   201  001768  23                 	db	35
   202  001769  30                 	db	48
   203  00176A  32                 	db	50
   204  00176B  00                 	db	0
   205  00176C  23                 	db	35
   206  00176D  30                 	db	48
   207  00176E  33                 	db	51
   208  00176F  00                 	db	0
   209  001770  23                 	db	35
   210  001771  30                 	db	48
   211  001772  34                 	db	52
   212  001773  00                 	db	0
   213  001774  23                 	db	35
   214  001775  30                 	db	48
   215  001776  35                 	db	53
   216  001777  00                 	db	0
   217  001778  23                 	db	35
   218  001779  30                 	db	48
   219  00177A  36                 	db	54
   220  00177B  00                 	db	0
   221  00177C  23                 	db	35
   222  00177D  30                 	db	48
   223  00177E  37                 	db	55
   224  00177F  00                 	db	0
   225  001780  23                 	db	35
   226  001781  30                 	db	48
   227  001782  38                 	db	56
   228  001783  00                 	db	0
   229  001784  23                 	db	35
   230  001785  30                 	db	48
   231  001786  39                 	db	57
   232  001787  00                 	db	0
   233                           
   234                           	psect	mediumconst
   235  00FD3A                     __pmediumconst:
   236                           	opt stack 0
   237  00FD3A  00                 	db	0
   238  00FD3B                     _font:
   239                           	opt stack 0
   240  00FD3B  00                 	db	0
   241  00FD3C  00                 	db	0
   242  00FD3D  00                 	db	0
   243  00FD3E  00                 	db	0
   244  00FD3F  00                 	db	0
   245  00FD40  00                 	db	0
   246  00FD41  00                 	db	0
   247  00FD42  5F                 	db	95
   248  00FD43  00                 	db	0
   249  00FD44  00                 	db	0
   250  00FD45  00                 	db	0
   251  00FD46  07                 	db	7
   252  00FD47  00                 	db	0
   253  00FD48  07                 	db	7
   254  00FD49  00                 	db	0
   255  00FD4A  14                 	db	20
   256  00FD4B  7F                 	db	127
   257  00FD4C  14                 	db	20
   258  00FD4D  7F                 	db	127
   259  00FD4E  14                 	db	20
   260  00FD4F  24                 	db	36
   261  00FD50  2A                 	db	42
   262  00FD51  7F                 	db	127
   263  00FD52  2A                 	db	42
   264  00FD53  12                 	db	18
   265  00FD54  23                 	db	35
   266  00FD55  13                 	db	19
   267  00FD56  08                 	db	8
   268  00FD57  64                 	db	100
   269  00FD58  62                 	db	98
   270  00FD59  36                 	db	54
   271  00FD5A  49                 	db	73
   272  00FD5B  56                 	db	86
   273  00FD5C  20                 	db	32
   274  00FD5D  50                 	db	80
   275  00FD5E  00                 	db	0
   276  00FD5F  08                 	db	8
   277  00FD60  07                 	db	7
   278  00FD61  03                 	db	3
   279  00FD62  00                 	db	0
   280  00FD63  00                 	db	0
   281  00FD64  1C                 	db	28
   282  00FD65  22                 	db	34
   283  00FD66  41                 	db	65
   284  00FD67  00                 	db	0
   285  00FD68  00                 	db	0
   286  00FD69  41                 	db	65
   287  00FD6A  22                 	db	34
   288  00FD6B  1C                 	db	28
   289  00FD6C  00                 	db	0
   290  00FD6D  2A                 	db	42
   291  00FD6E  1C                 	db	28
   292  00FD6F  7F                 	db	127
   293  00FD70  1C                 	db	28
   294  00FD71  2A                 	db	42
   295  00FD72  08                 	db	8
   296  00FD73  08                 	db	8
   297  00FD74  3E                 	db	62
   298  00FD75  08                 	db	8
   299  00FD76  08                 	db	8
   300  00FD77  00                 	db	0
   301  00FD78  80                 	db	128
   302  00FD79  70                 	db	112
   303  00FD7A  30                 	db	48
   304  00FD7B  00                 	db	0
   305  00FD7C  08                 	db	8
   306  00FD7D  08                 	db	8
   307  00FD7E  08                 	db	8
   308  00FD7F  08                 	db	8
   309  00FD80  08                 	db	8
   310  00FD81  00                 	db	0
   311  00FD82  00                 	db	0
   312  00FD83  60                 	db	96
   313  00FD84  60                 	db	96
   314  00FD85  00                 	db	0
   315  00FD86  20                 	db	32
   316  00FD87  10                 	db	16
   317  00FD88  08                 	db	8
   318  00FD89  04                 	db	4
   319  00FD8A  02                 	db	2
   320  00FD8B  3E                 	db	62
   321  00FD8C  51                 	db	81
   322  00FD8D  49                 	db	73
   323  00FD8E  45                 	db	69
   324  00FD8F  3E                 	db	62
   325  00FD90  00                 	db	0
   326  00FD91  42                 	db	66
   327  00FD92  7F                 	db	127
   328  00FD93  40                 	db	64
   329  00FD94  00                 	db	0
   330  00FD95  72                 	db	114
   331  00FD96  49                 	db	73
   332  00FD97  49                 	db	73
   333  00FD98  49                 	db	73
   334  00FD99  46                 	db	70
   335  00FD9A  21                 	db	33
   336  00FD9B  41                 	db	65
   337  00FD9C  49                 	db	73
   338  00FD9D  4D                 	db	77
   339  00FD9E  33                 	db	51
   340  00FD9F  18                 	db	24
   341  00FDA0  14                 	db	20
   342  00FDA1  12                 	db	18
   343  00FDA2  7F                 	db	127
   344  00FDA3  10                 	db	16
   345  00FDA4  27                 	db	39
   346  00FDA5  45                 	db	69
   347  00FDA6  45                 	db	69
   348  00FDA7  45                 	db	69
   349  00FDA8  39                 	db	57
   350  00FDA9  3C                 	db	60
   351  00FDAA  4A                 	db	74
   352  00FDAB  49                 	db	73
   353  00FDAC  49                 	db	73
   354  00FDAD  31                 	db	49
   355  00FDAE  41                 	db	65
   356  00FDAF  21                 	db	33
   357  00FDB0  11                 	db	17
   358  00FDB1  09                 	db	9
   359  00FDB2  07                 	db	7
   360  00FDB3  36                 	db	54
   361  00FDB4  49                 	db	73
   362  00FDB5  49                 	db	73
   363  00FDB6  49                 	db	73
   364  00FDB7  36                 	db	54
   365  00FDB8  46                 	db	70
   366  00FDB9  49                 	db	73
   367  00FDBA  49                 	db	73
   368  00FDBB  29                 	db	41
   369  00FDBC  1E                 	db	30
   370  00FDBD  00                 	db	0
   371  00FDBE  00                 	db	0
   372  00FDBF  14                 	db	20
   373  00FDC0  00                 	db	0
   374  00FDC1  00                 	db	0
   375  00FDC2  00                 	db	0
   376  00FDC3  40                 	db	64
   377  00FDC4  34                 	db	52
   378  00FDC5  00                 	db	0
   379  00FDC6  00                 	db	0
   380  00FDC7  00                 	db	0
   381  00FDC8  08                 	db	8
   382  00FDC9  14                 	db	20
   383  00FDCA  22                 	db	34
   384  00FDCB  41                 	db	65
   385  00FDCC  14                 	db	20
   386  00FDCD  14                 	db	20
   387  00FDCE  14                 	db	20
   388  00FDCF  14                 	db	20
   389  00FDD0  14                 	db	20
   390  00FDD1  00                 	db	0
   391  00FDD2  41                 	db	65
   392  00FDD3  22                 	db	34
   393  00FDD4  14                 	db	20
   394  00FDD5  08                 	db	8
   395  00FDD6  02                 	db	2
   396  00FDD7  01                 	db	1
   397  00FDD8  59                 	db	89
   398  00FDD9  09                 	db	9
   399  00FDDA  06                 	db	6
   400  00FDDB  3E                 	db	62
   401  00FDDC  41                 	db	65
   402  00FDDD  5D                 	db	93
   403  00FDDE  59                 	db	89
   404  00FDDF  4E                 	db	78
   405  00FDE0  7C                 	db	124
   406  00FDE1  12                 	db	18
   407  00FDE2  11                 	db	17
   408  00FDE3  12                 	db	18
   409  00FDE4  7C                 	db	124
   410  00FDE5  7F                 	db	127
   411  00FDE6  49                 	db	73
   412  00FDE7  49                 	db	73
   413  00FDE8  49                 	db	73
   414  00FDE9  36                 	db	54
   415  00FDEA  3E                 	db	62
   416  00FDEB  41                 	db	65
   417  00FDEC  41                 	db	65
   418  00FDED  41                 	db	65
   419  00FDEE  22                 	db	34
   420  00FDEF  7F                 	db	127
   421  00FDF0  41                 	db	65
   422  00FDF1  41                 	db	65
   423  00FDF2  41                 	db	65
   424  00FDF3  3E                 	db	62
   425  00FDF4  7F                 	db	127
   426  00FDF5  49                 	db	73
   427  00FDF6  49                 	db	73
   428  00FDF7  49                 	db	73
   429  00FDF8  41                 	db	65
   430  00FDF9  7F                 	db	127
   431  00FDFA  09                 	db	9
   432  00FDFB  09                 	db	9
   433  00FDFC  09                 	db	9
   434  00FDFD  01                 	db	1
   435  00FDFE  3E                 	db	62
   436  00FDFF  41                 	db	65
   437  00FE00  41                 	db	65
   438  00FE01  51                 	db	81
   439  00FE02  73                 	db	115
   440  00FE03  7F                 	db	127
   441  00FE04  08                 	db	8
   442  00FE05  08                 	db	8
   443  00FE06  08                 	db	8
   444  00FE07  7F                 	db	127
   445  00FE08  00                 	db	0
   446  00FE09  41                 	db	65
   447  00FE0A  7F                 	db	127
   448  00FE0B  41                 	db	65
   449  00FE0C  00                 	db	0
   450  00FE0D  20                 	db	32
   451  00FE0E  40                 	db	64
   452  00FE0F  41                 	db	65
   453  00FE10  3F                 	db	63
   454  00FE11  01                 	db	1
   455  00FE12  7F                 	db	127
   456  00FE13  08                 	db	8
   457  00FE14  14                 	db	20
   458  00FE15  22                 	db	34
   459  00FE16  41                 	db	65
   460  00FE17  7F                 	db	127
   461  00FE18  40                 	db	64
   462  00FE19  40                 	db	64
   463  00FE1A  40                 	db	64
   464  00FE1B  40                 	db	64
   465  00FE1C  7F                 	db	127
   466  00FE1D  02                 	db	2
   467  00FE1E  1C                 	db	28
   468  00FE1F  02                 	db	2
   469  00FE20  7F                 	db	127
   470  00FE21  7F                 	db	127
   471  00FE22  04                 	db	4
   472  00FE23  08                 	db	8
   473  00FE24  10                 	db	16
   474  00FE25  7F                 	db	127
   475  00FE26  3E                 	db	62
   476  00FE27  41                 	db	65
   477  00FE28  41                 	db	65
   478  00FE29  41                 	db	65
   479  00FE2A  3E                 	db	62
   480  00FE2B  7F                 	db	127
   481  00FE2C  09                 	db	9
   482  00FE2D  09                 	db	9
   483  00FE2E  09                 	db	9
   484  00FE2F  06                 	db	6
   485  00FE30  3E                 	db	62
   486  00FE31  41                 	db	65
   487  00FE32  51                 	db	81
   488  00FE33  21                 	db	33
   489  00FE34  5E                 	db	94
   490  00FE35  7F                 	db	127
   491  00FE36  09                 	db	9
   492  00FE37  19                 	db	25
   493  00FE38  29                 	db	41
   494  00FE39  46                 	db	70
   495  00FE3A                     __end_of_font:
   496                           	opt stack 0
   497  00FE3A                     _font2:
   498                           	opt stack 0
   499  00FE3A  26                 	db	38
   500  00FE3B  49                 	db	73
   501  00FE3C  49                 	db	73
   502  00FE3D  49                 	db	73
   503  00FE3E  32                 	db	50
   504  00FE3F  03                 	db	3
   505  00FE40  01                 	db	1
   506  00FE41  7F                 	db	127
   507  00FE42  01                 	db	1
   508  00FE43  03                 	db	3
   509  00FE44  3F                 	db	63
   510  00FE45  40                 	db	64
   511  00FE46  40                 	db	64
   512  00FE47  40                 	db	64
   513  00FE48  3F                 	db	63
   514  00FE49  1F                 	db	31
   515  00FE4A  20                 	db	32
   516  00FE4B  40                 	db	64
   517  00FE4C  20                 	db	32
   518  00FE4D  1F                 	db	31
   519  00FE4E  3F                 	db	63
   520  00FE4F  40                 	db	64
   521  00FE50  38                 	db	56
   522  00FE51  40                 	db	64
   523  00FE52  3F                 	db	63
   524  00FE53  63                 	db	99
   525  00FE54  14                 	db	20
   526  00FE55  08                 	db	8
   527  00FE56  14                 	db	20
   528  00FE57  63                 	db	99
   529  00FE58  03                 	db	3
   530  00FE59  04                 	db	4
   531  00FE5A  78                 	db	120
   532  00FE5B  04                 	db	4
   533  00FE5C  03                 	db	3
   534  00FE5D  61                 	db	97
   535  00FE5E  59                 	db	89
   536  00FE5F  49                 	db	73
   537  00FE60  4D                 	db	77
   538  00FE61  43                 	db	67
   539  00FE62  00                 	db	0
   540  00FE63  7F                 	db	127
   541  00FE64  41                 	db	65
   542  00FE65  41                 	db	65
   543  00FE66  41                 	db	65
   544  00FE67  02                 	db	2
   545  00FE68  04                 	db	4
   546  00FE69  08                 	db	8
   547  00FE6A  10                 	db	16
   548  00FE6B  20                 	db	32
   549  00FE6C  00                 	db	0
   550  00FE6D  41                 	db	65
   551  00FE6E  41                 	db	65
   552  00FE6F  41                 	db	65
   553  00FE70  7F                 	db	127
   554  00FE71  04                 	db	4
   555  00FE72  02                 	db	2
   556  00FE73  01                 	db	1
   557  00FE74  02                 	db	2
   558  00FE75  04                 	db	4
   559  00FE76  40                 	db	64
   560  00FE77  40                 	db	64
   561  00FE78  40                 	db	64
   562  00FE79  40                 	db	64
   563  00FE7A  40                 	db	64
   564  00FE7B  00                 	db	0
   565  00FE7C  03                 	db	3
   566  00FE7D  07                 	db	7
   567  00FE7E  08                 	db	8
   568  00FE7F  00                 	db	0
   569  00FE80  20                 	db	32
   570  00FE81  54                 	db	84
   571  00FE82  54                 	db	84
   572  00FE83  78                 	db	120
   573  00FE84  40                 	db	64
   574  00FE85  7F                 	db	127
   575  00FE86  28                 	db	40
   576  00FE87  44                 	db	68
   577  00FE88  44                 	db	68
   578  00FE89  38                 	db	56
   579  00FE8A  38                 	db	56
   580  00FE8B  44                 	db	68
   581  00FE8C  44                 	db	68
   582  00FE8D  44                 	db	68
   583  00FE8E  28                 	db	40
   584  00FE8F  38                 	db	56
   585  00FE90  44                 	db	68
   586  00FE91  44                 	db	68
   587  00FE92  28                 	db	40
   588  00FE93  7F                 	db	127
   589  00FE94  38                 	db	56
   590  00FE95  54                 	db	84
   591  00FE96  54                 	db	84
   592  00FE97  54                 	db	84
   593  00FE98  18                 	db	24
   594  00FE99  00                 	db	0
   595  00FE9A  08                 	db	8
   596  00FE9B  7E                 	db	126
   597  00FE9C  09                 	db	9
   598  00FE9D  02                 	db	2
   599  00FE9E  18                 	db	24
   600  00FE9F  A4                 	db	164
   601  00FEA0  A4                 	db	164
   602  00FEA1  9C                 	db	156
   603  00FEA2  78                 	db	120
   604  00FEA3  7F                 	db	127
   605  00FEA4  08                 	db	8
   606  00FEA5  04                 	db	4
   607  00FEA6  04                 	db	4
   608  00FEA7  78                 	db	120
   609  00FEA8  00                 	db	0
   610  00FEA9  44                 	db	68
   611  00FEAA  7D                 	db	125
   612  00FEAB  40                 	db	64
   613  00FEAC  00                 	db	0
   614  00FEAD  20                 	db	32
   615  00FEAE  40                 	db	64
   616  00FEAF  40                 	db	64
   617  00FEB0  3D                 	db	61
   618  00FEB1  00                 	db	0
   619  00FEB2  7F                 	db	127
   620  00FEB3  10                 	db	16
   621  00FEB4  28                 	db	40
   622  00FEB5  44                 	db	68
   623  00FEB6  00                 	db	0
   624  00FEB7  00                 	db	0
   625  00FEB8  41                 	db	65
   626  00FEB9  7F                 	db	127
   627  00FEBA  40                 	db	64
   628  00FEBB  00                 	db	0
   629  00FEBC  7C                 	db	124
   630  00FEBD  04                 	db	4
   631  00FEBE  78                 	db	120
   632  00FEBF  04                 	db	4
   633  00FEC0  78                 	db	120
   634  00FEC1  7C                 	db	124
   635  00FEC2  08                 	db	8
   636  00FEC3  04                 	db	4
   637  00FEC4  04                 	db	4
   638  00FEC5  78                 	db	120
   639  00FEC6  38                 	db	56
   640  00FEC7  44                 	db	68
   641  00FEC8  44                 	db	68
   642  00FEC9  44                 	db	68
   643  00FECA  38                 	db	56
   644  00FECB  FC                 	db	252
   645  00FECC  18                 	db	24
   646  00FECD  24                 	db	36
   647  00FECE  24                 	db	36
   648  00FECF  18                 	db	24
   649  00FED0  18                 	db	24
   650  00FED1  24                 	db	36
   651  00FED2  24                 	db	36
   652  00FED3  18                 	db	24
   653  00FED4  FC                 	db	252
   654  00FED5  7C                 	db	124
   655  00FED6  08                 	db	8
   656  00FED7  04                 	db	4
   657  00FED8  04                 	db	4
   658  00FED9  08                 	db	8
   659  00FEDA  48                 	db	72
   660  00FEDB  54                 	db	84
   661  00FEDC  54                 	db	84
   662  00FEDD  54                 	db	84
   663  00FEDE  24                 	db	36
   664  00FEDF  04                 	db	4
   665  00FEE0  04                 	db	4
   666  00FEE1  3F                 	db	63
   667  00FEE2  44                 	db	68
   668  00FEE3  24                 	db	36
   669  00FEE4  3C                 	db	60
   670  00FEE5  40                 	db	64
   671  00FEE6  40                 	db	64
   672  00FEE7  20                 	db	32
   673  00FEE8  7C                 	db	124
   674  00FEE9  1C                 	db	28
   675  00FEEA  20                 	db	32
   676  00FEEB  40                 	db	64
   677  00FEEC  20                 	db	32
   678  00FEED  1C                 	db	28
   679  00FEEE  3C                 	db	60
   680  00FEEF  40                 	db	64
   681  00FEF0  30                 	db	48
   682  00FEF1  40                 	db	64
   683  00FEF2  3C                 	db	60
   684  00FEF3  44                 	db	68
   685  00FEF4  28                 	db	40
   686  00FEF5  10                 	db	16
   687  00FEF6  28                 	db	40
   688  00FEF7  44                 	db	68
   689  00FEF8  4C                 	db	76
   690  00FEF9  90                 	db	144
   691  00FEFA  90                 	db	144
   692  00FEFB  90                 	db	144
   693  00FEFC  7C                 	db	124
   694  00FEFD  44                 	db	68
   695  00FEFE  64                 	db	100
   696  00FEFF  54                 	db	84
   697  00FF00  4C                 	db	76
   698  00FF01  44                 	db	68
   699  00FF02  00                 	db	0
   700  00FF03  08                 	db	8
   701  00FF04  36                 	db	54
   702  00FF05  41                 	db	65
   703  00FF06  00                 	db	0
   704  00FF07  00                 	db	0
   705  00FF08  00                 	db	0
   706  00FF09  77                 	db	119
   707  00FF0A  00                 	db	0
   708  00FF0B  00                 	db	0
   709  00FF0C  00                 	db	0
   710  00FF0D  41                 	db	65
   711  00FF0E  36                 	db	54
   712  00FF0F  08                 	db	8
   713  00FF10  00                 	db	0
   714  00FF11  02                 	db	2
   715  00FF12  01                 	db	1
   716  00FF13  02                 	db	2
   717  00FF14  04                 	db	4
   718  00FF15  02                 	db	2
   719  00FF16                     __end_of_font2:
   720                           	opt stack 0
   721  00FF16                     _dpowers:
   722                           	opt stack 0
   723  00FF16  0001               	dw	1
   724  00FF18  0000               	dw	0
   725  00FF1A  000A               	dw	10
   726  00FF1C  0000               	dw	0
   727  00FF1E  0064               	dw	100
   728  00FF20  0000               	dw	0
   729  00FF22  03E8               	dw	1000
   730  00FF24  0000               	dw	0
   731  00FF26  2710               	dw	10000
   732  00FF28  0000               	dw	0
   733  00FF2A  86A0               	dw	34464
   734  00FF2C  0001               	dw	1
   735  00FF2E  4240               	dw	16960
   736  00FF30  000F               	dw	15
   737  00FF32  9680               	dw	38528
   738  00FF34  0098               	dw	152
   739  00FF36  E100               	dw	57600
   740  00FF38  05F5               	dw	1525
   741  00FF3A  CA00               	dw	51712
   742  00FF3C  3B9A               	dw	15258
   743  00FF3E                     __end_of_dpowers:
   744                           	opt stack 0
   745  00FF3E                     _hexpowers:
   746                           	opt stack 0
   747  00FF3E  0001               	dw	1
   748  00FF40  0000               	dw	0
   749  00FF42  0010               	dw	16
   750  00FF44  0000               	dw	0
   751  00FF46  0100               	dw	256
   752  00FF48  0000               	dw	0
   753  00FF4A  1000               	dw	4096
   754  00FF4C  0000               	dw	0
   755  00FF4E  0000               	dw	0
   756  00FF50  0001               	dw	1
   757  00FF52  0000               	dw	0
   758  00FF54  0010               	dw	16
   759  00FF56  0000               	dw	0
   760  00FF58  0100               	dw	256
   761  00FF5A  0000               	dw	0
   762  00FF5C  1000               	dw	4096
   763  00FF5E                     __end_of_hexpowers:
   764                           	opt stack 0
   765  0000                     _ADCON1	set	4033
   766  0000                     _CCP2CON	set	4026
   767  0000                     _CCPR2L	set	4027
   768  0000                     _INTCON2bits	set	4081
   769  0000                     _INTCONbits	set	4082
   770  0000                     _OSCCON	set	4051
   771  0000                     _PIE1bits	set	3997
   772  0000                     _PIR1bits	set	3998
   773  0000                     _PIR2bits	set	4001
   774  0000                     _PORTBbits	set	3969
   775  0000                     _PORTCbits	set	3970
   776  0000                     _PORTD	set	3971
   777  0000                     _PORTDbits	set	3971
   778  0000                     _PORTEbits	set	3972
   779  0000                     _PR2	set	4043
   780  0000                     _RCSTA	set	4011
   781  0000                     _RCSTAbits	set	4011
   782  0000                     _SPBRG	set	4015
   783  0000                     _SPBRGH	set	4016
   784  0000                     _SSPBUF	set	4041
   785  0000                     _SSPCON1	set	4038
   786  0000                     _SSPSTAT	set	4039
   787  0000                     _SSPSTATbits	set	4039
   788  0000                     _T1CON	set	4045
   789  0000                     _T1CONbits	set	4045
   790  0000                     _T2CON	set	4042
   791  0000                     _T3CON	set	4017
   792  0000                     _T3CONbits	set	4017
   793  0000                     _TMR1H	set	4047
   794  0000                     _TMR1L	set	4046
   795  0000                     _TMR3H	set	4019
   796  0000                     _TMR3L	set	4018
   797  0000                     _TRISB	set	3987
   798  0000                     _TRISC	set	3988
   799  0000                     _TRISCbits	set	3988
   800  0000                     _TRISD	set	3989
   801  0000                     _TRISDbits	set	3989
   802  0000                     _TRISE	set	3990
   803  0000                     _TXREG	set	4013
   804  0000                     _TXSTA	set	4012
   805  0000                     _TXSTAbits	set	4012
   806  0000                     _RBPU	set	32655
   807  0000                     _TRMT	set	32097
   808  00FF5E                     STR_2:
   809  00FF5E  20                 	db	32
   810  00FF5F  54                 	db	84	;'T'
   811  00FF60  65                 	db	101	;'e'
   812  00FF61  6D                 	db	109	;'m'
   813  00FF62  70                 	db	112	;'p'
   814  00FF63  65                 	db	101	;'e'
   815  00FF64  72                 	db	114	;'r'
   816  00FF65  61                 	db	97	;'a'
   817  00FF66  74                 	db	116	;'t'
   818  00FF67  75                 	db	117	;'u'
   819  00FF68  72                 	db	114	;'r'
   820  00FF69  65                 	db	101	;'e'
   821  00FF6A  20                 	db	32
   822  00FF6B  3D                 	db	61	;'='
   823  00FF6C  20                 	db	32
   824  00FF6D  25                 	db	37
   825  00FF6E  64                 	db	100	;'d'
   826  00FF6F  20                 	db	32
   827  00FF70  64                 	db	100	;'d'
   828  00FF71  65                 	db	101	;'e'
   829  00FF72  67                 	db	103	;'g'
   830  00FF73  72                 	db	114	;'r'
   831  00FF74  65                 	db	101	;'e'
   832  00FF75  65                 	db	101	;'e'
   833  00FF76  73                 	db	115	;'s'
   834  00FF77  43                 	db	67	;'C'
   835  00FF78  20                 	db	32
   836  00FF79  3D                 	db	61	;'='
   837  00FF7A  20                 	db	32
   838  00FF7B  25                 	db	37
   839  00FF7C  64                 	db	100	;'d'
   840  00FF7D  20                 	db	32
   841  00FF7E  64                 	db	100	;'d'
   842  00FF7F  65                 	db	101	;'e'
   843  00FF80  67                 	db	103	;'g'
   844  00FF81  72                 	db	114	;'r'
   845  00FF82  65                 	db	101	;'e'
   846  00FF83  65                 	db	101	;'e'
   847  00FF84  73                 	db	115	;'s'
   848  00FF85  46                 	db	70	;'F'
   849  00FF86  0D                 	db	13
   850  00FF87  0A                 	db	10
   851  00FF88  00                 	db	0
   852  00FF89                     STR_1:
   853  00FF89  25                 	db	37
   854  00FF8A  30                 	db	48	;'0'
   855  00FF8B  32                 	db	50	;'2'
   856  00FF8C  78                 	db	120	;'x'
   857  00FF8D  3A                 	db	58	;':'
   858  00FF8E  25                 	db	37
   859  00FF8F  30                 	db	48	;'0'
   860  00FF90  32                 	db	50	;'2'
   861  00FF91  78                 	db	120	;'x'
   862  00FF92  3A                 	db	58	;':'
   863  00FF93  25                 	db	37
   864  00FF94  30                 	db	48	;'0'
   865  00FF95  32                 	db	50	;'2'
   866  00FF96  78                 	db	120	;'x'
   867  00FF97  20                 	db	32
   868  00FF98  25                 	db	37
   869  00FF99  30                 	db	48	;'0'
   870  00FF9A  32                 	db	50	;'2'
   871  00FF9B  78                 	db	120	;'x'
   872  00FF9C  2F                 	db	47
   873  00FF9D  25                 	db	37
   874  00FF9E  30                 	db	48	;'0'
   875  00FF9F  32                 	db	50	;'2'
   876  00FFA0  78                 	db	120	;'x'
   877  00FFA1  2F                 	db	47
   878  00FFA2  25                 	db	37
   879  00FFA3  30                 	db	48	;'0'
   880  00FFA4  32                 	db	50	;'2'
   881  00FFA5  78                 	db	120	;'x'
   882  00FFA6  00                 	db	0
   883  00FFA7                     STR_3:
   884  00FFA7  4E                 	db	78	;'N'
   885  00FFA8  45                 	db	69	;'E'
   886  00FFA9  43                 	db	67	;'C'
   887  00FFAA  5F                 	db	95	;'_'
   888  00FFAB  43                 	db	67	;'C'
   889  00FFAC  6F                 	db	111	;'o'
   890  00FFAD  64                 	db	100	;'d'
   891  00FFAE  65                 	db	101	;'e'
   892  00FFAF  20                 	db	32
   893  00FFB0  3D                 	db	61	;'='
   894  00FFB1  20                 	db	32
   895  00FFB2  25                 	db	37
   896  00FFB3  30                 	db	48	;'0'
   897  00FFB4  38                 	db	56	;'8'
   898  00FFB5  6C                 	db	108	;'l'
   899  00FFB6  78                 	db	120	;'x'
   900  00FFB7  20                 	db	32
   901  00FFB8  25                 	db	37
   902  00FFB9  78                 	db	120	;'x'
   903  00FFBA  2C                 	db	44
   904  00FFBB  20                 	db	32
   905  00FFBC  25                 	db	37
   906  00FFBD  64                 	db	100	;'d'
   907  00FFBE  20                 	db	32
   908  00FFBF  0D                 	db	13
   909  00FFC0  0A                 	db	10
   910  00FFC1  00                 	db	0
   911  00FFC2                     STR_5:
   912  00FFC2  45                 	db	69	;'E'
   913  00FFC3  43                 	db	67	;'C'
   914  00FFC4  45                 	db	69	;'E'
   915  00FFC5  33                 	db	51	;'3'
   916  00FFC6  33                 	db	51	;'3'
   917  00FFC7  30                 	db	48	;'0'
   918  00FFC8  31                 	db	49	;'1'
   919  00FFC9  4C                 	db	76	;'L'
   920  00FFCA  20                 	db	32
   921  00FFCB  46                 	db	70	;'F'
   922  00FFCC  61                 	db	97	;'a'
   923  00FFCD  6C                 	db	108	;'l'
   924  00FFCE  6C                 	db	108	;'l'
   925  00FFCF  20                 	db	32
   926  00FFD0  32                 	db	50	;'2'
   927  00FFD1  31                 	db	49	;'1'
   928  00FFD2  2D                 	db	45
   929  00FFD3  53                 	db	83	;'S'
   930  00FFD4  32                 	db	50	;'2'
   931  00FFD5  00                 	db	0
   932  00FFD6                     STR_7:
   933  00FFD6  30                 	db	48	;'0'
   934  00FFD7  31                 	db	49	;'1'
   935  00FFD8  32                 	db	50	;'2'
   936  00FFD9  33                 	db	51	;'3'
   937  00FFDA  34                 	db	52	;'4'
   938  00FFDB  35                 	db	53	;'5'
   939  00FFDC  36                 	db	54	;'6'
   940  00FFDD  37                 	db	55	;'7'
   941  00FFDE  38                 	db	56	;'8'
   942  00FFDF  39                 	db	57	;'9'
   943  00FFE0  61                 	db	97	;'a'
   944  00FFE1  62                 	db	98	;'b'
   945  00FFE2  63                 	db	99	;'c'
   946  00FFE3  64                 	db	100	;'d'
   947  00FFE4  65                 	db	101	;'e'
   948  00FFE5  66                 	db	102	;'f'
   949  00FFE6  00                 	db	0
   950  00FFE7                     STR_4:
   951  00FFE7  54                 	db	84	;'T'
   952  00FFE8  69                 	db	105	;'i'
   953  00FFE9  6D                 	db	109	;'m'
   954  00FFEA  65                 	db	101	;'e'
   955  00FFEB  20                 	db	32
   956  00FFEC  43                 	db	67	;'C'
   957  00FFED  68                 	db	104	;'h'
   958  00FFEE  61                 	db	97	;'a'
   959  00FFEF  6E                 	db	110	;'n'
   960  00FFF0  67                 	db	103	;'g'
   961  00FFF1  65                 	db	101	;'e'
   962  00FFF2  20                 	db	32
   963  00FFF3  0D                 	db	13
   964  00FFF4  0A                 	db	10
   965  00FFF5  00                 	db	0
   966  00FFF6                     STR_6:
   967  00FFF6  4C                 	db	76	;'L'
   968  00FFF7  41                 	db	65	;'A'
   969  00FFF8  42                 	db	66	;'B'
   970  00FFF9  20                 	db	32
   971  00FFFA  31                 	db	49	;'1'
   972  00FFFB  30                 	db	48	;'0'
   973  00FFFC  20                 	db	32
   974  00FFFD  00                 	db	0
   975                           
   976                           ; #config settings
   977  00FFFE  00                 	db	0	; dummy byte at the end
   978  0000                     
   979                           	psect	cinit
   980  001510                     __pcinit:
   981                           	opt stack 0
   982  001510                     start_initialization:
   983                           	opt stack 0
   984  001510                     __initialization:
   985                           	opt stack 0
   986                           
   987                           ; Clear objects allocated to BANK0 (31 bytes)
   988  001510  EE00  F0BF         	lfsr	0,__pbssBANK0
   989  001514  0E1F               	movlw	31
   990  001516                     clear_0:
   991  001516  6AEE               	clrf	postinc0,c
   992  001518  06E8               	decf	wreg,f,c
   993  00151A  E1FD               	bnz	clear_0
   994                           
   995                           ; Clear objects allocated to COMRAM (40 bytes)
   996  00151C  EE00  F046         	lfsr	0,__pbssCOMRAM
   997  001520  0E28               	movlw	40
   998  001522                     clear_1:
   999  001522  6AEE               	clrf	postinc0,c
  1000  001524  06E8               	decf	wreg,f,c
  1001  001526  E1FD               	bnz	clear_1
  1002                           
  1003                           ; Initialize objects allocated to BANK1 (84 bytes)
  1004                           ; load TBLPTR registers with __pidataBANK1
  1005  001528  0E34               	movlw	low __pidataBANK1
  1006  00152A  6EF6               	movwf	tblptrl,c
  1007  00152C  0E17               	movlw	high __pidataBANK1
  1008  00152E  6EF7               	movwf	tblptrh,c
  1009  001530  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1010  001532  6EF8               	movwf	tblptru,c
  1011  001534  EE01  F000         	lfsr	0,__pdataBANK1
  1012  001538  EE10 F054          	lfsr	1,84
  1013  00153C                     copy_data0:
  1014  00153C  0009               	tblrd		*+
  1015  00153E  CFF5 FFEE          	movff	tablat,postinc0
  1016  001542  50E5               	movf	postdec1,w,c
  1017  001544  50E1               	movf	fsr1l,w,c
  1018  001546  E1FA               	bnz	copy_data0
  1019                           
  1020                           ; Initialize objects allocated to BANK0 (63 bytes)
  1021                           ; load TBLPTR registers with __pidataBANK0
  1022  001548  0E0C               	movlw	low __pidataBANK0
  1023  00154A  6EF6               	movwf	tblptrl,c
  1024  00154C  0E19               	movlw	high __pidataBANK0
  1025  00154E  6EF7               	movwf	tblptrh,c
  1026  001550  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1027  001552  6EF8               	movwf	tblptru,c
  1028  001554  EE00  F080         	lfsr	0,__pdataBANK0
  1029  001558  EE10 F03F          	lfsr	1,63
  1030  00155C                     copy_data1:
  1031  00155C  0009               	tblrd		*+
  1032  00155E  CFF5 FFEE          	movff	tablat,postinc0
  1033  001562  50E5               	movf	postdec1,w,c
  1034  001564  50E1               	movf	fsr1l,w,c
  1035  001566  E1FA               	bnz	copy_data1
  1036                           
  1037                           ; Initialize objects allocated to COMRAM (2 bytes)
  1038                           ; load TBLPTR registers with __pidataCOMRAM
  1039  001568  0E40               	movlw	low __pidataCOMRAM
  1040  00156A  6EF6               	movwf	tblptrl,c
  1041  00156C  0E1D               	movlw	high __pidataCOMRAM
  1042  00156E  6EF7               	movwf	tblptrh,c
  1043  001570  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1044  001572  6EF8               	movwf	tblptru,c
  1045  001574  0009               	tblrd		*+	;fetch initializer
  1046  001576  CFF5 F06E          	movff	tablat,__pdataCOMRAM
  1047  00157A  0009               	tblrd		*+	;fetch initializer
  1048  00157C  CFF5 F06F          	movff	tablat,__pdataCOMRAM+1
  1049  001580                     end_of_initialization:
  1050                           	opt stack 0
  1051  001580                     __end_of__initialization:
  1052                           	opt stack 0
  1053  001580  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1054  001582  6EF8               	movwf	tblptru,c
  1055  001584  0100               	movlb	0
  1056  001586  EF2F  F002         	goto	_main	;jump to C main() function
  1057                           tblptru	equ	0xFF8
  1058                           tblptrh	equ	0xFF7
  1059                           tblptrl	equ	0xFF6
  1060                           tablat	equ	0xFF5
  1061                           postinc0	equ	0xFEE
  1062                           wreg	equ	0xFE8
  1063                           postdec1	equ	0xFE5
  1064                           fsr1l	equ	0xFE1
  1065                           
  1066                           	psect	bssCOMRAM
  1067  000046                     __pbssCOMRAM:
  1068                           	opt stack 0
  1069  000046                     _Nec_code:
  1070                           	opt stack 0
  1071  000046                     	ds	4
  1072  00004A                     _Time_Elapsed:
  1073                           	opt stack 0
  1074  00004A                     	ds	2
  1075  00004C                     _nbr:
  1076                           	opt stack 0
  1077  00004C                     	ds	2
  1078  00004E                     _nec_ok:
  1079                           	opt stack 0
  1080  00004E                     	ds	2
  1081  000050                     _txt:
  1082                           	opt stack 0
  1083  000050                     	ds	2
  1084  000052                     _Nec_code1:
  1085                           	opt stack 0
  1086  000052                     	ds	1
  1087  000053                     _Nec_state:
  1088                           	opt stack 0
  1089  000053                     	ds	1
  1090  000054                     _TempSecond:
  1091                           	opt stack 0
  1092  000054                     	ds	1
  1093  000055                     __tft_type:
  1094                           	opt stack 0
  1095  000055                     	ds	1
  1096  000056                     _alarm_date:
  1097                           	opt stack 0
  1098  000056                     	ds	1
  1099  000057                     _alarm_hour:
  1100                           	opt stack 0
  1101  000057                     	ds	1
  1102  000058                     _alarm_minute:
  1103                           	opt stack 0
  1104  000058                     	ds	1
  1105  000059                     _alarm_second:
  1106                           	opt stack 0
  1107  000059                     	ds	1
  1108  00005A                     _bit_count:
  1109                           	opt stack 0
  1110  00005A                     	ds	1
  1111  00005B                     _colstart:
  1112                           	opt stack 0
  1113  00005B                     	ds	1
  1114  00005C                     _day:
  1115                           	opt stack 0
  1116  00005C                     	ds	1
  1117  00005D                     _dow:
  1118                           	opt stack 0
  1119  00005D                     	ds	1
  1120  00005E                     _found:
  1121                           	opt stack 0
  1122  00005E                     	ds	1
  1123  00005F                     _hour:
  1124                           	opt stack 0
  1125  00005F                     	ds	1
  1126  000060                     _minute:
  1127                           	opt stack 0
  1128  000060                     	ds	1
  1129  000061                     _month:
  1130                           	opt stack 0
  1131  000061                     	ds	1
  1132  000062                     _rowstart:
  1133                           	opt stack 0
  1134  000062                     	ds	1
  1135  000063                     _second:
  1136                           	opt stack 0
  1137  000063                     	ds	1
  1138  000064                     _setup_alarm_hour:
  1139                           	opt stack 0
  1140  000064                     	ds	1
  1141  000065                     _setup_alarm_minute:
  1142                           	opt stack 0
  1143  000065                     	ds	1
  1144  000066                     _setup_alarm_second:
  1145                           	opt stack 0
  1146  000066                     	ds	1
  1147  000067                     _setup_day:
  1148                           	opt stack 0
  1149  000067                     	ds	1
  1150  000068                     _setup_hour:
  1151                           	opt stack 0
  1152  000068                     	ds	1
  1153  000069                     _setup_minute:
  1154                           	opt stack 0
  1155  000069                     	ds	1
  1156  00006A                     _setup_month:
  1157                           	opt stack 0
  1158  00006A                     	ds	1
  1159  00006B                     _setup_second:
  1160                           	opt stack 0
  1161  00006B                     	ds	1
  1162  00006C                     _setup_year:
  1163                           	opt stack 0
  1164  00006C                     	ds	1
  1165  00006D                     _year:
  1166                           	opt stack 0
  1167  00006D                     	ds	1
  1168                           tblptru	equ	0xFF8
  1169                           tblptrh	equ	0xFF7
  1170                           tblptrl	equ	0xFF6
  1171                           tablat	equ	0xFF5
  1172                           postinc0	equ	0xFEE
  1173                           wreg	equ	0xFE8
  1174                           postdec1	equ	0xFE5
  1175                           fsr1l	equ	0xFE1
  1176                           
  1177                           	psect	dataCOMRAM
  1178  00006E                     __pdataCOMRAM:
  1179                           	opt stack 0
  1180  00006E                     _tempSecond:
  1181                           	opt stack 0
  1182  00006E                     	ds	1
  1183  00006F                     _wrap:
  1184                           	opt stack 0
  1185  00006F                     	ds	1
  1186                           tblptru	equ	0xFF8
  1187                           tblptrh	equ	0xFF7
  1188                           tblptrl	equ	0xFF6
  1189                           tablat	equ	0xFF5
  1190                           postinc0	equ	0xFEE
  1191                           wreg	equ	0xFE8
  1192                           postdec1	equ	0xFE5
  1193                           fsr1l	equ	0xFE1
  1194                           
  1195                           	psect	bssBANK0
  1196  0000BF                     __pbssBANK0:
  1197                           	opt stack 0
  1198  0000BF                     _buffer:
  1199                           	opt stack 0
  1200  0000BF                     	ds	31
  1201                           tblptru	equ	0xFF8
  1202                           tblptrh	equ	0xFF7
  1203                           tblptrl	equ	0xFF6
  1204                           tablat	equ	0xFF5
  1205                           postinc0	equ	0xFEE
  1206                           wreg	equ	0xFE8
  1207                           postdec1	equ	0xFE5
  1208                           fsr1l	equ	0xFE1
  1209                           
  1210                           	psect	dataBANK0
  1211  000080                     __pdataBANK0:
  1212                           	opt stack 0
  1213  000080                     _color:
  1214                           	opt stack 0
  1215  000080                     	ds	42
  1216  0000AA                     _array1:
  1217                           	opt stack 0
  1218  0000AA                     	ds	21
  1219                           tblptru	equ	0xFF8
  1220                           tblptrh	equ	0xFF7
  1221                           tblptrl	equ	0xFF6
  1222                           tablat	equ	0xFF5
  1223                           postinc0	equ	0xFEE
  1224                           wreg	equ	0xFE8
  1225                           postdec1	equ	0xFE5
  1226                           fsr1l	equ	0xFE1
  1227                           
  1228                           	psect	dataBANK1
  1229  000100                     __pdataBANK1:
  1230                           	opt stack 0
  1231  000100                     _txt1:
  1232                           	opt stack 0
  1233  000100                     	ds	84
  1234                           tblptru	equ	0xFF8
  1235                           tblptrh	equ	0xFF7
  1236                           tblptrl	equ	0xFF6
  1237                           tablat	equ	0xFF5
  1238                           postinc0	equ	0xFEE
  1239                           wreg	equ	0xFE8
  1240                           postdec1	equ	0xFE5
  1241                           fsr1l	equ	0xFE1
  1242                           
  1243                           	psect	cstackBANK0
  1244  0000DE                     __pcstackBANK0:
  1245                           	opt stack 0
  1246  0000DE                     drawtext@x:
  1247                           	opt stack 0
  1248                           
  1249                           ; 1 bytes @ 0x0
  1250  0000DE                     	ds	1
  1251  0000DF                     drawtext@textsize:
  1252                           	opt stack 0
  1253                           
  1254                           ; 2 bytes @ 0x1
  1255  0000DF                     	ds	2
  1256  0000E1                     drawtext@i:
  1257                           	opt stack 0
  1258                           
  1259                           ; 2 bytes @ 0x3
  1260  0000E1                     	ds	2
  1261  0000E3                     drawtext@cursor_y:
  1262                           	opt stack 0
  1263                           
  1264                           ; 1 bytes @ 0x5
  1265  0000E3                     	ds	1
  1266  0000E4                     drawtext@cursor_x:
  1267                           	opt stack 0
  1268                           
  1269                           ; 1 bytes @ 0x6
  1270  0000E4                     	ds	1
  1271  0000E5                     
  1272                           ; 0 bytes @ 0x7
  1273  0000E5                     	ds	1
  1274  0000E6                     main@tempC:
  1275                           	opt stack 0
  1276                           
  1277                           ; 1 bytes @ 0x8
  1278  0000E6                     	ds	1
  1279  0000E7                     main@tempF:
  1280                           	opt stack 0
  1281                           
  1282                           ; 1 bytes @ 0x9
  1283  0000E7                     	ds	1
  1284  0000E8                     main@i:
  1285                           	opt stack 0
  1286                           
  1287                           ; 2 bytes @ 0xA
  1288  0000E8                     	ds	2
  1289  0000EA                     main@found:
  1290                           	opt stack 0
  1291                           
  1292                           ; 1 bytes @ 0xC
  1293  0000EA                     	ds	1
  1294                           tblptru	equ	0xFF8
  1295                           tblptrh	equ	0xFF7
  1296                           tblptrl	equ	0xFF6
  1297                           tablat	equ	0xFF5
  1298                           postinc0	equ	0xFEE
  1299                           wreg	equ	0xFE8
  1300                           postdec1	equ	0xFE5
  1301                           fsr1l	equ	0xFE1
  1302                           
  1303                           	psect	cstackCOMRAM
  1304  000001                     __pcstackCOMRAM:
  1305                           	opt stack 0
  1306  000001                     ??i2_INT0_isr:
  1307  000001                     
  1308                           ; 1 bytes @ 0x0
  1309  000001                     	ds	2
  1310  000003                     ??_chkisr:
  1311                           
  1312                           ; 0 bytes @ 0x2
  1313  000003                     	ds	14
  1314  000011                     ??_INT0_isr:
  1315  000011                     ??_isdigit:
  1316  000011                     ?_strlen:
  1317                           	opt stack 0
  1318  000011                     ?___wmul:
  1319                           	opt stack 0
  1320  000011                     ?___lldiv:
  1321                           	opt stack 0
  1322  000011                     putch@c:
  1323                           	opt stack 0
  1324  000011                     I2C_Read@ack:
  1325                           	opt stack 0
  1326  000011                     I2C_Write@outByte:
  1327                           	opt stack 0
  1328  000011                     spiwrite@x:
  1329                           	opt stack 0
  1330  000011                     Wait_One_Sec@I:
  1331                           	opt stack 0
  1332  000011                     DO_DISPLAY_D1@T:
  1333                           	opt stack 0
  1334  000011                     OpenUSART@spbrg:
  1335                           	opt stack 0
  1336  000011                     ___wmul@multiplier:
  1337                           	opt stack 0
  1338  000011                     strcpy@to:
  1339                           	opt stack 0
  1340  000011                     strlen@s:
  1341                           	opt stack 0
  1342  000011                     I2C_Init@c:
  1343                           	opt stack 0
  1344  000011                     ___lldiv@dividend:
  1345                           	opt stack 0
  1346                           
  1347                           ; 4 bytes @ 0x10
  1348  000011                     	ds	1
  1349  000012                     I2C_Read@n:
  1350                           	opt stack 0
  1351  000012                     I2C_Write@n:
  1352                           	opt stack 0
  1353  000012                     spiwrite@spidata:
  1354                           	opt stack 0
  1355  000012                     _isdigit$2177:
  1356                           	opt stack 0
  1357                           
  1358                           ; 1 bytes @ 0x11
  1359  000012                     	ds	1
  1360  000013                     ??_strlen:
  1361  000013                     I2C_Read@inByte:
  1362                           	opt stack 0
  1363  000013                     I2C_Write_Cmd_Only@Cmd:
  1364                           	opt stack 0
  1365  000013                     I2C_Write_Cmd_Write_Data@Cmd:
  1366                           	opt stack 0
  1367  000013                     DS3231_Setup_Time@Device:
  1368                           	opt stack 0
  1369  000013                     write_command@cmd_:
  1370                           	opt stack 0
  1371  000013                     write_data@data_:
  1372                           	opt stack 0
  1373  000013                     OpenUSART@config:
  1374                           	opt stack 0
  1375  000013                     isdigit@c:
  1376                           	opt stack 0
  1377  000013                     ___wmul@multiplicand:
  1378                           	opt stack 0
  1379  000013                     strcpy@from:
  1380                           	opt stack 0
  1381                           
  1382                           ; 2 bytes @ 0x12
  1383  000013                     	ds	1
  1384  000014                     ?_DS1621_Read_Temp:
  1385                           	opt stack 0
  1386  000014                     I2C_Write_Cmd_Only@Device:
  1387                           	opt stack 0
  1388  000014                     I2C_Write_Cmd_Write_Data@Data_Out:
  1389                           	opt stack 0
  1390  000014                     DS3231_Read_Time@Address:
  1391                           	opt stack 0
  1392  000014                     DS3231_Setup_Time@Address:
  1393                           	opt stack 0
  1394  000014                     setAddrWindow@y0:
  1395                           	opt stack 0
  1396                           
  1397                           ; 1 bytes @ 0x13
  1398  000014                     	ds	1
  1399  000015                     I2C_Write_Cmd_Write_Data@Device:
  1400                           	opt stack 0
  1401  000015                     DS3231_Read_Time@Device:
  1402                           	opt stack 0
  1403  000015                     setAddrWindow@x1:
  1404                           	opt stack 0
  1405  000015                     ___wmul@product:
  1406                           	opt stack 0
  1407  000015                     strcpy@cp:
  1408                           	opt stack 0
  1409  000015                     strlen@cp:
  1410                           	opt stack 0
  1411  000015                     ___lldiv@divisor:
  1412                           	opt stack 0
  1413                           
  1414                           ; 4 bytes @ 0x14
  1415  000015                     	ds	1
  1416  000016                     DS1621_Init@Device:
  1417                           	opt stack 0
  1418  000016                     DS1621_Read_Temp@Cmd:
  1419                           	opt stack 0
  1420  000016                     setAddrWindow@y1:
  1421                           	opt stack 0
  1422                           
  1423                           ; 1 bytes @ 0x15
  1424  000016                     	ds	1
  1425  000017                     ?___awdiv:
  1426                           	opt stack 0
  1427  000017                     DS1621_Read_Temp@Data_Ret:
  1428                           	opt stack 0
  1429  000017                     setAddrWindow@x0:
  1430                           	opt stack 0
  1431  000017                     delay_ms@ms:
  1432                           	opt stack 0
  1433  000017                     ___awdiv@dividend:
  1434                           	opt stack 0
  1435                           
  1436                           ; 2 bytes @ 0x16
  1437  000017                     	ds	1
  1438  000018                     DS1621_Read_Temp@Device:
  1439                           	opt stack 0
  1440  000018                     drawPixel@y:
  1441                           	opt stack 0
  1442  000018                     drawFastVLine@y:
  1443                           	opt stack 0
  1444  000018                     fillRectangle@y:
  1445                           	opt stack 0
  1446                           
  1447                           ; 1 bytes @ 0x17
  1448  000018                     	ds	1
  1449  000019                     ??_delay_ms:
  1450  000019                     drawFastVLine@h:
  1451                           	opt stack 0
  1452  000019                     fillRectangle@w:
  1453                           	opt stack 0
  1454  000019                     drawPixel@color:
  1455                           	opt stack 0
  1456  000019                     ___awdiv@divisor:
  1457                           	opt stack 0
  1458  000019                     ___lldiv@quotient:
  1459                           	opt stack 0
  1460                           
  1461                           ; 4 bytes @ 0x18
  1462  000019                     	ds	1
  1463  00001A                     fillRectangle@h:
  1464                           	opt stack 0
  1465  00001A                     drawFastVLine@color:
  1466                           	opt stack 0
  1467                           
  1468                           ; 2 bytes @ 0x19
  1469  00001A                     	ds	1
  1470  00001B                     drawPixel@x:
  1471                           	opt stack 0
  1472  00001B                     ___awdiv@counter:
  1473                           	opt stack 0
  1474  00001B                     delay_ms@count:
  1475                           	opt stack 0
  1476  00001B                     fillRectangle@color:
  1477                           	opt stack 0
  1478                           
  1479                           ; 2 bytes @ 0x1A
  1480  00001B                     	ds	1
  1481  00001C                     ??_drawFastVLine:
  1482  00001C                     ___awdiv@sign:
  1483                           	opt stack 0
  1484  00001C                     drawCircle@x0:
  1485                           	opt stack 0
  1486                           
  1487                           ; 2 bytes @ 0x1B
  1488  00001C                     	ds	1
  1489  00001D                     ??_fillRectangle:
  1490  00001D                     ___lldiv@counter:
  1491                           	opt stack 0
  1492  00001D                     ___awdiv@quotient:
  1493                           	opt stack 0
  1494                           
  1495                           ; 2 bytes @ 0x1C
  1496  00001D                     	ds	1
  1497  00001E                     ?___llmod:
  1498                           	opt stack 0
  1499  00001E                     drawCircle@y0:
  1500                           	opt stack 0
  1501  00001E                     ___llmod@dividend:
  1502                           	opt stack 0
  1503                           
  1504                           ; 4 bytes @ 0x1D
  1505  00001E                     	ds	2
  1506  000020                     drawFastVLine@hi:
  1507                           	opt stack 0
  1508  000020                     drawCircle@r:
  1509                           	opt stack 0
  1510                           
  1511                           ; 2 bytes @ 0x1F
  1512  000020                     	ds	1
  1513  000021                     drawFastVLine@lo:
  1514                           	opt stack 0
  1515  000021                     fillRectangle@hi:
  1516                           	opt stack 0
  1517                           
  1518                           ; 1 bytes @ 0x20
  1519  000021                     	ds	1
  1520  000022                     drawFastVLine@x:
  1521                           	opt stack 0
  1522  000022                     fillRectangle@lo:
  1523                           	opt stack 0
  1524  000022                     drawCircle@color:
  1525                           	opt stack 0
  1526  000022                     ___llmod@divisor:
  1527                           	opt stack 0
  1528                           
  1529                           ; 4 bytes @ 0x21
  1530  000022                     	ds	1
  1531  000023                     fillRect@y:
  1532                           	opt stack 0
  1533  000023                     fillRectangle@x:
  1534                           	opt stack 0
  1535  000023                     fillCircleHelper@x0:
  1536                           	opt stack 0
  1537                           
  1538                           ; 2 bytes @ 0x22
  1539  000023                     	ds	1
  1540  000024                     ??_drawCircle:
  1541  000024                     fillRect@w:
  1542                           	opt stack 0
  1543  000024                     fillScreen@color:
  1544                           	opt stack 0
  1545                           
  1546                           ; 2 bytes @ 0x23
  1547  000024                     	ds	1
  1548  000025                     fillRect@h:
  1549                           	opt stack 0
  1550  000025                     fillCircleHelper@y0:
  1551                           	opt stack 0
  1552                           
  1553                           ; 2 bytes @ 0x24
  1554  000025                     	ds	1
  1555  000026                     ___llmod@counter:
  1556                           	opt stack 0
  1557  000026                     fillRect@color:
  1558                           	opt stack 0
  1559  000026                     drawCircle@ddF_x:
  1560                           	opt stack 0
  1561                           
  1562                           ; 2 bytes @ 0x25
  1563  000026                     	ds	1
  1564  000027                     ?_printf:
  1565                           	opt stack 0
  1566  000027                     fillCircleHelper@r:
  1567                           	opt stack 0
  1568  000027                     printf@f:
  1569                           	opt stack 0
  1570                           
  1571                           ; 2 bytes @ 0x26
  1572  000027                     	ds	1
  1573  000028                     ??_fillRect:
  1574  000028                     drawCircle@ddF_y:
  1575                           	opt stack 0
  1576                           
  1577                           ; 2 bytes @ 0x27
  1578  000028                     	ds	1
  1579  000029                     fillCircleHelper@cornername:
  1580                           	opt stack 0
  1581                           
  1582                           ; 2 bytes @ 0x28
  1583  000029                     	ds	1
  1584  00002A                     drawCircle@f:
  1585                           	opt stack 0
  1586                           
  1587                           ; 2 bytes @ 0x29
  1588  00002A                     	ds	1
  1589  00002B                     fillRect@x:
  1590                           	opt stack 0
  1591  00002B                     fillCircleHelper@delta:
  1592                           	opt stack 0
  1593                           
  1594                           ; 2 bytes @ 0x2A
  1595  00002B                     	ds	1
  1596  00002C                     fillRect@i:
  1597                           	opt stack 0
  1598  00002C                     drawCircle@x:
  1599                           	opt stack 0
  1600                           
  1601                           ; 2 bytes @ 0x2B
  1602  00002C                     	ds	1
  1603  00002D                     fillCircleHelper@color:
  1604                           	opt stack 0
  1605                           
  1606                           ; 2 bytes @ 0x2C
  1607  00002D                     	ds	1
  1608  00002E                     drawChar@y:
  1609                           	opt stack 0
  1610  00002E                     drawCircle@y:
  1611                           	opt stack 0
  1612                           
  1613                           ; 2 bytes @ 0x2D
  1614  00002E                     	ds	1
  1615  00002F                     ??_fillCircleHelper:
  1616  00002F                     drawChar@c:
  1617                           	opt stack 0
  1618                           
  1619                           ; 1 bytes @ 0x2E
  1620  00002F                     	ds	1
  1621  000030                     drawChar@color:
  1622                           	opt stack 0
  1623                           
  1624                           ; 2 bytes @ 0x2F
  1625  000030                     	ds	1
  1626  000031                     fillCircleHelper@ddF_x:
  1627                           	opt stack 0
  1628                           
  1629                           ; 2 bytes @ 0x30
  1630  000031                     	ds	1
  1631  000032                     drawChar@bg:
  1632                           	opt stack 0
  1633                           
  1634                           ; 2 bytes @ 0x31
  1635  000032                     	ds	1
  1636  000033                     fillCircleHelper@ddF_y:
  1637                           	opt stack 0
  1638                           
  1639                           ; 2 bytes @ 0x32
  1640  000033                     	ds	1
  1641  000034                     drawChar@size:
  1642                           	opt stack 0
  1643                           
  1644                           ; 1 bytes @ 0x33
  1645  000034                     	ds	1
  1646  000035                     ??_printf:
  1647  000035                     drawChar@line:
  1648                           	opt stack 0
  1649  000035                     fillCircleHelper@f:
  1650                           	opt stack 0
  1651                           
  1652                           ; 2 bytes @ 0x34
  1653  000035                     	ds	1
  1654  000036                     drawChar@x:
  1655                           	opt stack 0
  1656                           
  1657                           ; 1 bytes @ 0x35
  1658  000036                     	ds	1
  1659  000037                     drawChar@j:
  1660                           	opt stack 0
  1661  000037                     fillCircleHelper@x:
  1662                           	opt stack 0
  1663                           
  1664                           ; 2 bytes @ 0x36
  1665  000037                     	ds	1
  1666  000038                     drawChar@i:
  1667                           	opt stack 0
  1668                           
  1669                           ; 1 bytes @ 0x37
  1670  000038                     	ds	1
  1671  000039                     drawtext@y:
  1672                           	opt stack 0
  1673  000039                     printf@idx:
  1674                           	opt stack 0
  1675  000039                     fillCircleHelper@y:
  1676                           	opt stack 0
  1677                           
  1678                           ; 2 bytes @ 0x38
  1679  000039                     	ds	1
  1680  00003A                     drawtext@_text:
  1681                           	opt stack 0
  1682  00003A                     printf@prec:
  1683                           	opt stack 0
  1684                           
  1685                           ; 2 bytes @ 0x39
  1686  00003A                     	ds	1
  1687  00003B                     fillCircle@x0:
  1688                           	opt stack 0
  1689                           
  1690                           ; 2 bytes @ 0x3A
  1691  00003B                     	ds	1
  1692  00003C                     drawtext@color:
  1693                           	opt stack 0
  1694  00003C                     printf@ap:
  1695                           	opt stack 0
  1696                           
  1697                           ; 2 bytes @ 0x3B
  1698  00003C                     	ds	1
  1699  00003D                     fillCircle@y0:
  1700                           	opt stack 0
  1701                           
  1702                           ; 2 bytes @ 0x3C
  1703  00003D                     	ds	1
  1704  00003E                     drawtext@bg:
  1705                           	opt stack 0
  1706  00003E                     printf@val:
  1707                           	opt stack 0
  1708                           
  1709                           ; 4 bytes @ 0x3D
  1710  00003E                     	ds	1
  1711  00003F                     fillCircle@r:
  1712                           	opt stack 0
  1713                           
  1714                           ; 2 bytes @ 0x3E
  1715  00003F                     	ds	1
  1716  000040                     drawtext@size:
  1717                           	opt stack 0
  1718                           
  1719                           ; 1 bytes @ 0x3F
  1720  000040                     	ds	1
  1721  000041                     ??_drawtext:
  1722  000041                     fillCircle@color:
  1723                           	opt stack 0
  1724                           
  1725                           ; 2 bytes @ 0x40
  1726  000041                     	ds	1
  1727  000042                     printf@width:
  1728                           	opt stack 0
  1729                           
  1730                           ; 2 bytes @ 0x41
  1731  000042                     	ds	1
  1732  000043                     
  1733                           ; 0 bytes @ 0x42
  1734  000043                     	ds	1
  1735  000044                     printf@flag:
  1736                           	opt stack 0
  1737                           
  1738                           ; 1 bytes @ 0x43
  1739  000044                     	ds	1
  1740  000045                     printf@c:
  1741                           	opt stack 0
  1742                           
  1743                           ; 1 bytes @ 0x44
  1744  000045                     	ds	1
  1745                           tblptru	equ	0xFF8
  1746                           tblptrh	equ	0xFF7
  1747                           tblptrl	equ	0xFF6
  1748                           tablat	equ	0xFF5
  1749                           postinc0	equ	0xFEE
  1750                           wreg	equ	0xFE8
  1751                           postdec1	equ	0xFE5
  1752                           fsr1l	equ	0xFE1
  1753                           
  1754 ;;
  1755 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1756 ;;
  1757 ;; *************** function _main *****************
  1758 ;; Defined at:
  1759 ;;		line 124 in file "Lab10p1.c"
  1760 ;; Parameters:    Size  Location     Type
  1761 ;;		None
  1762 ;; Auto vars:     Size  Location     Type
  1763 ;;  i               2   10[BANK0 ] int 
  1764 ;;  found           1   12[BANK0 ] unsigned char 
  1765 ;;  tempF           1    9[BANK0 ] char 
  1766 ;;  tempC           1    8[BANK0 ] char 
  1767 ;; Return value:  Size  Location     Type
  1768 ;;		None               void
  1769 ;; Registers used:
  1770 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1771 ;; Tracked objects:
  1772 ;;		On entry : 0/0
  1773 ;;		On exit  : 0/0
  1774 ;;		Unchanged: 0/0
  1775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1776 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1777 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1778 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1779 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1780 ;;Total ram usage:        6 bytes
  1781 ;; Hardware stack levels required when called:   11
  1782 ;; This function calls:
  1783 ;;		_Activate_Buzzer
  1784 ;;		_DO_DISPLAY_D1
  1785 ;;		_DS1621_Read_Temp
  1786 ;;		_DS3231_Read_Time
  1787 ;;		_DS3231_Setup_Time
  1788 ;;		_Deactivate_Buzzer
  1789 ;;		_Do_Init
  1790 ;;		_INT0_isr
  1791 ;;		_Initialize_Screen
  1792 ;;		_Wait_One_Sec
  1793 ;;		___awdiv
  1794 ;;		___wmul
  1795 ;;		_drawCircle
  1796 ;;		_drawtext
  1797 ;;		_fillCircle
  1798 ;;		_printf
  1799 ;; This function is called by:
  1800 ;;		Startup code after reset
  1801 ;; This function uses a non-reentrant model
  1802 ;;
  1803                           
  1804                           	psect	text0
  1805  00045E                     __ptext0:
  1806                           	opt stack 0
  1807  00045E                     _main:
  1808                           	opt stack 20
  1809                           
  1810                           ;Lab10p1.c: 127: Do_Init();
  1811                           
  1812                           ;incstack = 0
  1813  00045E  EC03  F00D         	call	_Do_Init	;wreg free
  1814                           
  1815                           ;Lab10p1.c: 128: Initialize_Screen();
  1816  000462  EC79  F009         	call	_Initialize_Screen	;wreg free
  1817                           
  1818                           ;Lab10p1.c: 138: DS3231_Setup_Time();
  1819  000466  EC35  F00B         	call	_DS3231_Setup_Time	;wreg free
  1820  00046A  D000               	goto	l5521
  1821  00046C                     l5521:
  1822                           
  1823                           ;Lab10p1.c: 140: {
  1824                           ;Lab10p1.c: 142: DS3231_Read_Time();
  1825  00046C  EC68  F00B         	call	_DS3231_Read_Time	;wreg free
  1826                           
  1827                           ;Lab10p1.c: 143: if(tempSecond != second)
  1828  000470  5063               	movf	_second,w,c
  1829  000472  186E               	xorwf	_tempSecond,w,c
  1830  000474  B4D8               	btfsc	status,2,c
  1831  000476  D054               	goto	l5537
  1832                           
  1833                           ;Lab10p1.c: 144: {
  1834                           ;Lab10p1.c: 145: tempSecond = second;
  1835  000478  C063  F06E         	movff	_second,_tempSecond
  1836                           
  1837                           ;Lab10p1.c: 146: signed char tempC = DS1621_Read_Temp();
  1838  00047C  EC21  F00D         	call	_DS1621_Read_Temp	;wreg free
  1839  000480  5014               	movf	?_DS1621_Read_Temp,w,c
  1840  000482  0100               	movlb	0	; () banked
  1841  000484  6FE6               	movwf	main@tempC& (0+255),b
  1842                           
  1843                           ; BSR set to: 0
  1844                           ;Lab10p1.c: 147: signed char tempF = (tempC * 9 / 5) + 32;
  1845  000486  0100               	movlb	0	; () banked
  1846  000488  51E6               	movf	main@tempC& (0+255),w,b
  1847  00048A  6E11               	movwf	___wmul@multiplier,c
  1848  00048C  6A12               	clrf	___wmul@multiplier+1,c
  1849  00048E  BE11               	btfsc	___wmul@multiplier,7,c
  1850  000490  0612               	decf	___wmul@multiplier+1,f,c
  1851  000492  0E00               	movlw	0
  1852  000494  6E14               	movwf	___wmul@multiplicand+1,c
  1853  000496  0E09               	movlw	9
  1854  000498  6E13               	movwf	___wmul@multiplicand,c
  1855  00049A  EC9D  F00D         	call	___wmul	;wreg free
  1856  00049E  C011  F017         	movff	?___wmul,___awdiv@dividend
  1857  0004A2  C012  F018         	movff	?___wmul+1,___awdiv@dividend+1
  1858  0004A6  0E00               	movlw	0
  1859  0004A8  6E1A               	movwf	___awdiv@divisor+1,c
  1860  0004AA  0E05               	movlw	5
  1861  0004AC  6E19               	movwf	___awdiv@divisor,c
  1862  0004AE  EC2E  F009         	call	___awdiv	;wreg free
  1863  0004B2  5017               	movf	?___awdiv,w,c
  1864  0004B4  0F20               	addlw	32
  1865  0004B6  0100               	movlb	0	; () banked
  1866  0004B8  6FE7               	movwf	main@tempF& (0+255),b
  1867                           
  1868                           ; BSR set to: 0
  1869                           ;Lab10p1.c: 148: printf ("%02x:%02x:%02x %02x/%02x/%02x",hour,minute,second,month,day,ye
      +                          ar);
  1870  0004BA  0E89               	movlw	low STR_1
  1871  0004BC  6E27               	movwf	printf@f,c
  1872  0004BE  0EFF               	movlw	high STR_1
  1873  0004C0  6E28               	movwf	printf@f+1,c
  1874  0004C2  C05F  F029         	movff	_hour,?_printf+2
  1875  0004C6  6A2A               	clrf	?_printf+3,c
  1876  0004C8  C060  F02B         	movff	_minute,?_printf+4
  1877  0004CC  6A2C               	clrf	?_printf+5,c
  1878  0004CE  C063  F02D         	movff	_second,?_printf+6
  1879  0004D2  6A2E               	clrf	?_printf+7,c
  1880  0004D4  C061  F02F         	movff	_month,?_printf+8
  1881  0004D8  6A30               	clrf	?_printf+9,c
  1882  0004DA  C05C  F031         	movff	_day,?_printf+10
  1883  0004DE  6A32               	clrf	?_printf+11,c
  1884  0004E0  C06D  F033         	movff	_year,?_printf+12
  1885  0004E4  6A34               	clrf	?_printf+13,c
  1886  0004E6  EC0E  F000         	call	_printf	;wreg free
  1887                           
  1888                           ;Lab10p1.c: 149: printf (" Temperature = %d degreesC = %d degreesF\r\n", tempC, tempF);
  1889  0004EA  0E5E               	movlw	low STR_2
  1890  0004EC  6E27               	movwf	printf@f,c
  1891  0004EE  0EFF               	movlw	high STR_2
  1892  0004F0  6E28               	movwf	printf@f+1,c
  1893  0004F2  0100               	movlb	0	; () banked
  1894  0004F4  51E6               	movf	main@tempC& (0+255),w,b
  1895  0004F6  6E29               	movwf	?_printf+2,c
  1896  0004F8  6A2A               	clrf	?_printf+3,c
  1897  0004FA  BE29               	btfsc	?_printf+2,7,c
  1898  0004FC  062A               	decf	?_printf+3,f,c
  1899  0004FE  0100               	movlb	0	; () banked
  1900  000500  51E7               	movf	main@tempF& (0+255),w,b
  1901  000502  6E2B               	movwf	?_printf+4,c
  1902  000504  6A2C               	clrf	?_printf+5,c
  1903  000506  BE2B               	btfsc	?_printf+4,7,c
  1904  000508  062C               	decf	?_printf+5,f,c
  1905  00050A  EC0E  F000         	call	_printf	;wreg free
  1906                           
  1907                           ;Lab10p1.c: 150: DO_DISPLAY_D1(tempF);
  1908  00050E  0100               	movlb	0	; () banked
  1909  000510  51E7               	movf	main@tempF& (0+255),w,b
  1910  000512  6E11               	movwf	DO_DISPLAY_D1@T,c
  1911  000514  6A12               	clrf	DO_DISPLAY_D1@T+1,c
  1912  000516  BE11               	btfsc	DO_DISPLAY_D1@T,7,c
  1913  000518  0612               	decf	DO_DISPLAY_D1@T+1,f,c
  1914  00051A  ECC5  F007         	call	_DO_DISPLAY_D1	;wreg free
  1915  00051E  D000               	goto	l5537
  1916  000520                     l5537:
  1917                           
  1918                           ;Lab10p1.c: 151: }
  1919                           ;Lab10p1.c: 152: if (nec_ok == 1)
  1920  000520  044E               	decf	_nec_ok,w,c
  1921  000522  104F               	iorwf	_nec_ok+1,w,c
  1922  000524  A4D8               	btfss	status,2,c
  1923  000526  D7A2               	goto	l5521
  1924                           
  1925                           ;Lab10p1.c: 153: {
  1926                           ;Lab10p1.c: 154: nec_ok = 0;
  1927  000528  0E00               	movlw	0
  1928  00052A  6E4F               	movwf	_nec_ok+1,c
  1929  00052C  0E00               	movlw	0
  1930  00052E  6E4E               	movwf	_nec_ok,c
  1931                           
  1932                           ;Lab10p1.c: 155: INT0_isr();
  1933  000530  EC11  F004         	call	_INT0_isr	;wreg free
  1934                           
  1935                           ;Lab10p1.c: 156: Nec_code1 = (char)((Nec_code >> 8));
  1936  000534  C047  F052         	movff	_Nec_code+1,_Nec_code1
  1937                           
  1938                           ;Lab10p1.c: 158: INTCONbits.INT0IE = 1;
  1939  000538  88F2               	bsf	intcon,4,c	;volatile
  1940                           
  1941                           ;Lab10p1.c: 159: INTCON2bits.INTEDG0 = 0;
  1942  00053A  9CF1               	bcf	intcon2,6,c	;volatile
  1943                           
  1944                           ;Lab10p1.c: 160: char found = 0xff;
  1945  00053C  0100               	movlb	0	; () banked
  1946  00053E  69EA               	setf	main@found& (0+255),b
  1947                           
  1948                           ; BSR set to: 0
  1949                           ;Lab10p1.c: 162: for (int i = 0; i < 21; i++)
  1950  000540  0E00               	movlw	0
  1951  000542  0100               	movlb	0	; () banked
  1952  000544  6FE9               	movwf	(main@i+1)& (0+255),b
  1953  000546  0E00               	movlw	0
  1954  000548  6FE8               	movwf	main@i& (0+255),b
  1955  00054A                     l5553:
  1956                           
  1957                           ; BSR set to: 0
  1958  00054A  0100               	movlb	0	; () banked
  1959  00054C  BFE9               	btfsc	(main@i+1)& (0+255),7,b
  1960  00054E  D00A               	goto	l5557
  1961  000550  0100               	movlb	0	; () banked
  1962  000552  51E9               	movf	(main@i+1)& (0+255),w,b
  1963  000554  E12F               	bnz	l5567
  1964  000556  0E15               	movlw	21
  1965  000558  0100               	movlb	0	; () banked
  1966  00055A  5DE8               	subwf	main@i& (0+255),w,b
  1967  00055C  B0D8               	btfsc	status,0,c
  1968  00055E  D02A               	goto	l5567
  1969  000560  D001               	goto	l5557
  1970                           
  1971                           ; BSR set to: 0
  1972  000562  D028               	goto	l5567
  1973  000564                     l5557:
  1974                           
  1975                           ; BSR set to: 0
  1976                           ;Lab10p1.c: 163: {
  1977                           ;Lab10p1.c: 164: if (array1[i] == Nec_code1)
  1978  000564  0EAA               	movlw	low _array1
  1979  000566  0100               	movlb	0	; () banked
  1980  000568  25E8               	addwf	main@i& (0+255),w,b
  1981  00056A  6ED9               	movwf	fsr2l,c
  1982  00056C  0E00               	movlw	high _array1
  1983  00056E  0100               	movlb	0	; () banked
  1984  000570  21E9               	addwfc	(main@i+1)& (0+255),w,b
  1985  000572  6EDA               	movwf	fsr2h,c
  1986  000574  5052               	movf	_Nec_code1,w,c
  1987  000576  18DE               	xorwf	postinc2,w,c
  1988  000578  A4D8               	btfss	status,2,c
  1989  00057A  D017               	goto	l5563
  1990                           
  1991                           ; BSR set to: 0
  1992                           ;Lab10p1.c: 165: {
  1993                           ;Lab10p1.c: 166: found = i;
  1994  00057C  C0E8  F0EA         	movff	main@i,main@found
  1995                           
  1996                           ; BSR set to: 0
  1997                           ;Lab10p1.c: 167: printf("NEC_Code = %08lx %x, %d \r\n", Nec_code, Nec_code1, found);
  1998  000580  0EA7               	movlw	low STR_3
  1999  000582  6E27               	movwf	printf@f,c
  2000  000584  0EFF               	movlw	high STR_3
  2001  000586  6E28               	movwf	printf@f+1,c
  2002  000588  C046  F029         	movff	_Nec_code,?_printf+2
  2003  00058C  C047  F02A         	movff	_Nec_code+1,?_printf+3
  2004  000590  C048  F02B         	movff	_Nec_code+2,?_printf+4
  2005  000594  C049  F02C         	movff	_Nec_code+3,?_printf+5
  2006  000598  C052  F02D         	movff	_Nec_code1,?_printf+6
  2007  00059C  6A2E               	clrf	?_printf+7,c
  2008  00059E  C0EA  F02F         	movff	main@found,?_printf+8
  2009  0005A2  6A30               	clrf	?_printf+9,c
  2010  0005A4  EC0E  F000         	call	_printf	;wreg free
  2011                           
  2012                           ;Lab10p1.c: 168: break;
  2013  0005A8  D005               	goto	l5567
  2014  0005AA                     l5563:
  2015  0005AA  0100               	movlb	0	; () banked
  2016  0005AC  4BE8               	infsnz	main@i& (0+255),f,b
  2017  0005AE  2BE9               	incf	(main@i+1)& (0+255),f,b
  2018  0005B0  D7CC               	goto	l5553
  2019                           
  2020                           ; BSR set to: 0
  2021  0005B2  D000               	goto	l5567
  2022  0005B4                     l5567:
  2023                           
  2024                           ;Lab10p1.c: 169: }
  2025                           ;Lab10p1.c: 170: }
  2026                           ;Lab10p1.c: 172: if (found == 8)
  2027  0005B4  0E08               	movlw	8
  2028  0005B6  0100               	movlb	0	; () banked
  2029  0005B8  19EA               	xorwf	main@found& (0+255),w,b
  2030  0005BA  A4D8               	btfss	status,2,c
  2031  0005BC  D009               	goto	l5573
  2032                           
  2033                           ; BSR set to: 0
  2034                           ;Lab10p1.c: 173: {
  2035                           ;Lab10p1.c: 174: DS3231_Setup_Time();
  2036  0005BE  EC35  F00B         	call	_DS3231_Setup_Time	;wreg free
  2037                           
  2038                           ;Lab10p1.c: 175: printf ("Time Change \r\n");
  2039  0005C2  0EE7               	movlw	low STR_4
  2040  0005C4  6E27               	movwf	printf@f,c
  2041  0005C6  0EFF               	movlw	high STR_4
  2042  0005C8  6E28               	movwf	printf@f+1,c
  2043  0005CA  EC0E  F000         	call	_printf	;wreg free
  2044  0005CE  D000               	goto	l5573
  2045  0005D0                     l5573:
  2046                           
  2047                           ;Lab10p1.c: 176: }
  2048                           ;Lab10p1.c: 178: if (found != 0xff)
  2049  0005D0  0100               	movlb	0	; () banked
  2050  0005D2  29EA               	incf	main@found& (0+255),w,b
  2051  0005D4  B4D8               	btfsc	status,2,c
  2052  0005D6  D74A               	goto	l5521
  2053                           
  2054                           ; BSR set to: 0
  2055                           ;Lab10p1.c: 179: {
  2056                           ;Lab10p1.c: 180: PORTEbits.RE1 = 1;
  2057  0005D8  8284               	bsf	3972,1,c	;volatile
  2058                           
  2059                           ; BSR set to: 0
  2060                           ;Lab10p1.c: 181: fillCircle(60, 80, 20, color[found]);
  2061  0005DA  0E00               	movlw	0
  2062  0005DC  6E3C               	movwf	fillCircle@x0+1,c
  2063  0005DE  0E3C               	movlw	60
  2064  0005E0  6E3B               	movwf	fillCircle@x0,c
  2065  0005E2  0E00               	movlw	0
  2066  0005E4  6E3E               	movwf	fillCircle@y0+1,c
  2067  0005E6  0E50               	movlw	80
  2068  0005E8  6E3D               	movwf	fillCircle@y0,c
  2069  0005EA  0E00               	movlw	0
  2070  0005EC  6E40               	movwf	fillCircle@r+1,c
  2071  0005EE  0E14               	movlw	20
  2072  0005F0  6E3F               	movwf	fillCircle@r,c
  2073  0005F2  0100               	movlb	0	; () banked
  2074  0005F4  51EA               	movf	main@found& (0+255),w,b
  2075  0005F6  0D02               	mullw	2
  2076  0005F8  0E80               	movlw	low _color
  2077  0005FA  24F3               	addwf	prodl,w,c
  2078  0005FC  6ED9               	movwf	fsr2l,c
  2079  0005FE  0E00               	movlw	high _color
  2080  000600  20F4               	addwfc	prodh,w,c
  2081  000602  6EDA               	movwf	fsr2h,c
  2082  000604  CFDE F041          	movff	postinc2,fillCircle@color
  2083  000608  CFDD F042          	movff	postdec2,fillCircle@color+1
  2084  00060C  ECC4  F00B         	call	_fillCircle	;wreg free
  2085                           
  2086                           ;Lab10p1.c: 182: drawCircle(60, 80, 20, 0xFFFF);
  2087  000610  0E00               	movlw	0
  2088  000612  6E1D               	movwf	drawCircle@x0+1,c
  2089  000614  0E3C               	movlw	60
  2090  000616  6E1C               	movwf	drawCircle@x0,c
  2091  000618  0E00               	movlw	0
  2092  00061A  6E1F               	movwf	drawCircle@y0+1,c
  2093  00061C  0E50               	movlw	80
  2094  00061E  6E1E               	movwf	drawCircle@y0,c
  2095  000620  0E00               	movlw	0
  2096  000622  6E21               	movwf	drawCircle@r+1,c
  2097  000624  0E14               	movlw	20
  2098  000626  6E20               	movwf	drawCircle@r,c
  2099  000628  0EFF               	movlw	255
  2100  00062A  6E23               	movwf	drawCircle@color+1,c
  2101  00062C  6822               	setf	drawCircle@color,c
  2102  00062E  EC3A  F003         	call	_drawCircle	;wreg free
  2103                           
  2104                           ;Lab10p1.c: 183: drawtext(52, 77, txt1[found], 0xFFFF, 0x0000, 1);
  2105  000632  0E4D               	movlw	77
  2106  000634  6E39               	movwf	drawtext@y,c
  2107  000636  0100               	movlb	0	; () banked
  2108  000638  51EA               	movf	main@found& (0+255),w,b
  2109  00063A  0D04               	mullw	4
  2110  00063C  0E00               	movlw	low _txt1
  2111  00063E  24F3               	addwf	prodl,w,c
  2112  000640  6E3A               	movwf	drawtext@_text,c
  2113  000642  0E01               	movlw	high _txt1
  2114  000644  20F4               	addwfc	prodh,w,c
  2115  000646  6E3B               	movwf	drawtext@_text+1,c
  2116  000648  0EFF               	movlw	255
  2117  00064A  6E3D               	movwf	drawtext@color+1,c
  2118  00064C  683C               	setf	drawtext@color,c
  2119  00064E  0E00               	movlw	0
  2120  000650  6E3F               	movwf	drawtext@bg+1,c
  2121  000652  0E00               	movlw	0
  2122  000654  6E3E               	movwf	drawtext@bg,c
  2123  000656  0E01               	movlw	1
  2124  000658  6E40               	movwf	drawtext@size,c
  2125  00065A  0E34               	movlw	52
  2126  00065C  EC40  F007         	call	_drawtext
  2127                           
  2128                           ;Lab10p1.c: 184: Activate_Buzzer();
  2129  000660  EC51  F00E         	call	_Activate_Buzzer	;wreg free
  2130                           
  2131                           ;Lab10p1.c: 185: Wait_One_Sec();
  2132  000664  ECB1  F00D         	call	_Wait_One_Sec	;wreg free
  2133                           
  2134                           ;Lab10p1.c: 186: Deactivate_Buzzer();
  2135  000668  EC90  F00E         	call	_Deactivate_Buzzer	;wreg free
  2136                           
  2137                           ;Lab10p1.c: 187: PORTEbits.RE1 = 0;
  2138  00066C  9284               	bcf	3972,1,c	;volatile
  2139  00066E  D6FE               	goto	l5521
  2140  000670  EF0C  F000         	goto	start
  2141  000674                     __end_of_main:
  2142                           	opt stack 0
  2143                           tblptru	equ	0xFF8
  2144                           tblptrh	equ	0xFF7
  2145                           tblptrl	equ	0xFF6
  2146                           tablat	equ	0xFF5
  2147                           prodh	equ	0xFF4
  2148                           prodl	equ	0xFF3
  2149                           intcon	equ	0xFF2
  2150                           intcon2	equ	0xFF1
  2151                           postinc0	equ	0xFEE
  2152                           wreg	equ	0xFE8
  2153                           postdec1	equ	0xFE5
  2154                           fsr1l	equ	0xFE1
  2155                           postinc2	equ	0xFDE
  2156                           postdec2	equ	0xFDD
  2157                           fsr2h	equ	0xFDA
  2158                           fsr2l	equ	0xFD9
  2159                           status	equ	0xFD8
  2160                           
  2161 ;; *************** function _printf *****************
  2162 ;; Defined at:
  2163 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  2164 ;; Parameters:    Size  Location     Type
  2165 ;;  f               2   38[COMRAM] PTR const unsigned char 
  2166 ;;		 -> STR_4(15), STR_3(27), STR_2(43), STR_1(30), 
  2167 ;; Auto vars:     Size  Location     Type
  2168 ;;  idx             1   56[COMRAM] unsigned char 
  2169 ;;  val             4   61[COMRAM] unsigned long 
  2170 ;;  tmpval          4    0        struct .
  2171 ;;  cp              3    0        PTR const unsigned char 
  2172 ;;  width           2   65[COMRAM] int 
  2173 ;;  ap              2   59[COMRAM] PTR void [1]
  2174 ;;		 -> ?_printf(2), 
  2175 ;;  prec            2   57[COMRAM] int 
  2176 ;;  len             2    0        unsigned int 
  2177 ;;  c               1   68[COMRAM] char 
  2178 ;;  flag            1   67[COMRAM] unsigned char 
  2179 ;; Return value:  Size  Location     Type
  2180 ;;                  2   38[COMRAM] int 
  2181 ;; Registers used:
  2182 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2183 ;; Tracked objects:
  2184 ;;		On entry : 0/0
  2185 ;;		On exit  : 0/0
  2186 ;;		Unchanged: 0/0
  2187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2188 ;;      Params:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2189 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2190 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2191 ;;      Totals:        31       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2192 ;;Total ram usage:       31 bytes
  2193 ;; Hardware stack levels used:    1
  2194 ;; Hardware stack levels required when called:    4
  2195 ;; This function calls:
  2196 ;;		___lldiv
  2197 ;;		___llmod
  2198 ;;		___wmul
  2199 ;;		_isdigit
  2200 ;;		_putch
  2201 ;; This function is called by:
  2202 ;;		_main
  2203 ;; This function uses a non-reentrant model
  2204 ;;
  2205                           
  2206                           	psect	text1
  2207  00001C                     __ptext1:
  2208                           	opt stack 0
  2209  00001C                     _printf:
  2210                           	opt stack 26
  2211                           
  2212                           ;doprnt.c: 466: va_list ap;
  2213                           ;doprnt.c: 499: signed char c;
  2214                           ;doprnt.c: 501: int width;
  2215                           ;doprnt.c: 504: int prec;
  2216                           ;doprnt.c: 508: unsigned char flag;
  2217                           ;doprnt.c: 523: union {
  2218                           ;doprnt.c: 524: unsigned long vd;
  2219                           ;doprnt.c: 525: double integ;
  2220                           ;doprnt.c: 526: } tmpval;
  2221                           ;doprnt.c: 528: unsigned long val;
  2222                           ;doprnt.c: 529: unsigned len;
  2223                           ;doprnt.c: 530: const char * cp;
  2224                           ;doprnt.c: 533: *ap = __va_start();
  2225                           
  2226                           ;incstack = 0
  2227  00001C  0E29               	movlw	low (?_printf+2)
  2228  00001E  6E3C               	movwf	printf@ap,c
  2229  000020  0E00               	movlw	high (?_printf+2)
  2230  000022  6E3D               	movwf	printf@ap+1,c
  2231                           
  2232                           ;doprnt.c: 536: while(c = *f++) {
  2233  000024  D20D               	goto	l5267
  2234  000026                     l5129:
  2235                           
  2236                           ;doprnt.c: 538: if(c != '%')
  2237  000026  0E25               	movlw	37
  2238  000028  1845               	xorwf	printf@c,w,c
  2239  00002A  B4D8               	btfsc	status,2,c
  2240  00002C  D004               	goto	l5133
  2241                           
  2242                           ;doprnt.c: 540: {
  2243                           ;doprnt.c: 541: (putch(c) );
  2244  00002E  5045               	movf	printf@c,w,c
  2245  000030  EC6A  F00E         	call	_putch
  2246                           
  2247                           ;doprnt.c: 542: continue;
  2248  000034  D205               	goto	l5267
  2249  000036                     l5133:
  2250                           
  2251                           ;doprnt.c: 543: }
  2252                           ;doprnt.c: 546: width = 0;
  2253  000036  0E00               	movlw	0
  2254  000038  6E43               	movwf	printf@width+1,c
  2255  00003A  0E00               	movlw	0
  2256  00003C  6E42               	movwf	printf@width,c
  2257                           
  2258                           ;doprnt.c: 548: flag = 0;
  2259  00003E  0E00               	movlw	0
  2260  000040  6E44               	movwf	printf@flag,c
  2261                           
  2262                           ;doprnt.c: 551: switch(*f) {
  2263                           
  2264                           ;doprnt.c: 550: for(;;) {
  2265  000042  D005               	goto	l5139
  2266  000044                     l5135:
  2267                           
  2268                           ;doprnt.c: 580: flag |= 0x04;
  2269  000044  8444               	bsf	printf@flag,2,c
  2270                           
  2271                           ;doprnt.c: 581: f++;
  2272  000046  4A27               	infsnz	printf@f,f,c
  2273  000048  2A28               	incf	printf@f+1,f,c
  2274                           
  2275                           ;doprnt.c: 582: continue;
  2276  00004A  D001               	goto	l5139
  2277                           
  2278                           ;doprnt.c: 584: }
  2279  00004C  D00B               	goto	l5141
  2280  00004E                     l5139:
  2281  00004E  C027  FFF6         	movff	printf@f,tblptrl
  2282  000052  C028  FFF7         	movff	printf@f+1,tblptrh
  2283  000056                     	if	0	;tblptru may be non-zero
  2284  000056                     	endif
  2285  000056                     	if	0	;tblptru may be non-zero
  2286  000056                     	endif
  2287  000056  0008               	tblrd		*
  2288  000058  50F5               	movf	tablat,w,c
  2289                           
  2290                           ; Switch size 1, requested type "space"
  2291                           ; Number of cases is 1, Range of values is 48 to 48
  2292                           ; switch strategies available:
  2293                           ; Name         Instructions Cycles
  2294                           ; simple_byte            4     3 (average)
  2295                           ;	Chosen strategy is simple_byte
  2296  00005A  0A30               	xorlw	48	; case 48
  2297  00005C  B4D8               	btfsc	status,2,c
  2298  00005E  D7F2               	goto	l5135
  2299                           
  2300                           ;doprnt.c: 585: break;
  2301  000060  D001               	goto	l5141
  2302                           
  2303                           ;doprnt.c: 586: }
  2304  000062  D7F5               	goto	l5139
  2305  000064                     l5141:
  2306                           
  2307                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2308  000064  C027  FFF6         	movff	printf@f,tblptrl
  2309  000068  C028  FFF7         	movff	printf@f+1,tblptrh
  2310  00006C                     	if	0	;tblptru may be non-zero
  2311  00006C                     	endif
  2312  00006C                     	if	0	;tblptru may be non-zero
  2313  00006C                     	endif
  2314  00006C  0008               	tblrd		*
  2315  00006E  50F5               	movf	tablat,w,c
  2316  000070  ECC3  F00D         	call	_isdigit
  2317  000074  A0D8               	btfss	status,0,c
  2318  000076  D03D               	goto	l5159
  2319                           
  2320                           ;doprnt.c: 598: width = 0;
  2321  000078  0E00               	movlw	0
  2322  00007A  6E43               	movwf	printf@width+1,c
  2323  00007C  0E00               	movlw	0
  2324  00007E  6E42               	movwf	printf@width,c
  2325  000080  D000               	goto	l5145
  2326  000082                     l5145:
  2327                           
  2328                           ;doprnt.c: 600: width *= 10;
  2329  000082  C042  F011         	movff	printf@width,___wmul@multiplier
  2330  000086  C043  F012         	movff	printf@width+1,___wmul@multiplier+1
  2331  00008A  0E00               	movlw	0
  2332  00008C  6E14               	movwf	___wmul@multiplicand+1,c
  2333  00008E  0E0A               	movlw	10
  2334  000090  6E13               	movwf	___wmul@multiplicand,c
  2335  000092  EC9D  F00D         	call	___wmul	;wreg free
  2336  000096  C011  F042         	movff	?___wmul,printf@width
  2337  00009A  C012  F043         	movff	?___wmul+1,printf@width+1
  2338                           
  2339                           ;doprnt.c: 601: width += *f++ - '0';
  2340  00009E  0ED0               	movlw	208
  2341  0000A0  6E35               	movwf	??_printf& (0+255),c
  2342  0000A2  0EFF               	movlw	255
  2343  0000A4  6E36               	movwf	(??_printf+1)& (0+255),c
  2344  0000A6  C027  FFF6         	movff	printf@f,tblptrl
  2345  0000AA  C028  FFF7         	movff	printf@f+1,tblptrh
  2346  0000AE                     	if	0	;tblptru may be non-zero
  2347  0000AE                     	endif
  2348  0000AE                     	if	0	;tblptru may be non-zero
  2349  0000AE                     	endif
  2350  0000AE  0008               	tblrd		*
  2351  0000B0  50F5               	movf	tablat,w,c
  2352  0000B2  6E37               	movwf	(??_printf+2)& (0+255),c
  2353  0000B4  6A38               	clrf	(??_printf+3)& (0+255),c
  2354  0000B6  5035               	movf	??_printf,w,c
  2355  0000B8  2637               	addwf	??_printf+2,f,c
  2356  0000BA  5036               	movf	??_printf+1,w,c
  2357  0000BC  2238               	addwfc	??_printf+3,f,c
  2358  0000BE  5037               	movf	??_printf+2,w,c
  2359  0000C0  2642               	addwf	printf@width,f,c
  2360  0000C2  5038               	movf	??_printf+3,w,c
  2361  0000C4  2243               	addwfc	printf@width+1,f,c
  2362  0000C6  4A27               	infsnz	printf@f,f,c
  2363  0000C8  2A28               	incf	printf@f+1,f,c
  2364                           
  2365                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2366  0000CA  C027  FFF6         	movff	printf@f,tblptrl
  2367  0000CE  C028  FFF7         	movff	printf@f+1,tblptrh
  2368  0000D2                     	if	0	;tblptru may be non-zero
  2369  0000D2                     	endif
  2370  0000D2                     	if	0	;tblptru may be non-zero
  2371  0000D2                     	endif
  2372  0000D2  0008               	tblrd		*
  2373  0000D4  50F5               	movf	tablat,w,c
  2374  0000D6  ECC3  F00D         	call	_isdigit
  2375  0000DA  A0D8               	btfss	status,0,c
  2376  0000DC  D00A               	goto	l5159
  2377  0000DE  D7D1               	goto	l5145
  2378                           
  2379                           ;doprnt.c: 635: switch(c = *f++) {
  2380                           
  2381                           ;doprnt.c: 608: }
  2382                           ;doprnt.c: 633: loop:
  2383  0000E0  D008               	goto	l5159
  2384                           
  2385                           ;doprnt.c: 638: goto alldone;
  2386                           
  2387                           ;doprnt.c: 637: case 0:
  2388  0000E2  D1BC               	goto	l667
  2389  0000E4                     l5153:
  2390                           
  2391                           ;doprnt.c: 643: flag |= 0x10;
  2392  0000E4  8844               	bsf	printf@flag,4,c
  2393                           
  2394                           ;doprnt.c: 644: goto loop;
  2395  0000E6  D005               	goto	l5159
  2396                           
  2397                           ;doprnt.c: 698: case 'i':
  2398                           ;doprnt.c: 699: break;
  2399                           
  2400                           ;doprnt.c: 697: case 'd':
  2401  0000E8  D01E               	goto	l626
  2402  0000EA                     l5155:
  2403                           
  2404                           ;doprnt.c: 721: flag |= 0x80;
  2405  0000EA  8E44               	bsf	printf@flag,7,c
  2406                           
  2407                           ;doprnt.c: 723: break;
  2408  0000EC  D01C               	goto	l626
  2409                           
  2410                           ;doprnt.c: 813: continue;
  2411                           
  2412                           ;doprnt.c: 802: default:
  2413  0000EE  D1A8               	goto	l5267
  2414                           
  2415                           ;doprnt.c: 822: }
  2416  0000F0  D01A               	goto	l626
  2417  0000F2                     l5159:
  2418  0000F2  C027  FFF6         	movff	printf@f,tblptrl
  2419  0000F6  C028  FFF7         	movff	printf@f+1,tblptrh
  2420  0000FA  4A27               	infsnz	printf@f,f,c
  2421  0000FC  2A28               	incf	printf@f+1,f,c
  2422  0000FE                     	if	0	;tblptru may be non-zero
  2423  0000FE                     	endif
  2424  0000FE                     	if	0	;tblptru may be non-zero
  2425  0000FE                     	endif
  2426  0000FE  0008               	tblrd		*
  2427  000100  CFF5 F045          	movff	tablat,printf@c
  2428  000104  5045               	movf	printf@c,w,c
  2429                           
  2430                           ; Switch size 1, requested type "space"
  2431                           ; Number of cases is 5, Range of values is 0 to 120
  2432                           ; switch strategies available:
  2433                           ; Name         Instructions Cycles
  2434                           ; simple_byte           16     9 (average)
  2435                           ;	Chosen strategy is simple_byte
  2436  000106  0A00               	xorlw	0	; case 0
  2437  000108  B4D8               	btfsc	status,2,c
  2438  00010A  D1A8               	goto	l667
  2439  00010C  0A64               	xorlw	100	; case 100
  2440  00010E  B4D8               	btfsc	status,2,c
  2441  000110  D00A               	goto	l626
  2442  000112  0A0D               	xorlw	13	; case 105
  2443  000114  B4D8               	btfsc	status,2,c
  2444  000116  D007               	goto	l626
  2445  000118  0A05               	xorlw	5	; case 108
  2446  00011A  B4D8               	btfsc	status,2,c
  2447  00011C  D7E3               	goto	l5153
  2448  00011E  0A14               	xorlw	20	; case 120
  2449  000120  B4D8               	btfsc	status,2,c
  2450  000122  D7E3               	goto	l5155
  2451  000124  D18D               	goto	l5267
  2452  000126                     l626:
  2453                           
  2454                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  2455  000126  BE44               	btfsc	printf@flag,7,c
  2456  000128  D02F               	goto	l629
  2457                           
  2458                           ;doprnt.c: 1253: {
  2459                           ;doprnt.c: 1255: if(flag & 0x10)
  2460  00012A  A844               	btfss	printf@flag,4,c
  2461  00012C  D00E               	goto	l5167
  2462                           
  2463                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  2464  00012E  C03C  FFD9         	movff	printf@ap,fsr2l
  2465  000132  C03D  FFDA         	movff	printf@ap+1,fsr2h
  2466  000136  CFDE F03E          	movff	postinc2,printf@val
  2467  00013A  CFDE F03F          	movff	postinc2,printf@val+1
  2468  00013E  CFDE F040          	movff	postinc2,printf@val+2
  2469  000142  CFDE F041          	movff	postinc2,printf@val+3
  2470  000146  0E04               	movlw	4
  2471  000148  D00E               	goto	L1
  2472  00014A                     l5167:
  2473                           
  2474                           ;doprnt.c: 1257: else
  2475                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  2476  00014A  C03C  FFD9         	movff	printf@ap,fsr2l
  2477  00014E  C03D  FFDA         	movff	printf@ap+1,fsr2h
  2478  000152  CFDE F03E          	movff	postinc2,printf@val
  2479  000156  CFDD F03F          	movff	postdec2,printf@val+1
  2480  00015A  0E00               	movlw	0
  2481  00015C  BE3F               	btfsc	printf@val+1,7,c
  2482  00015E  0EFF               	movlw	-1
  2483  000160  6E40               	movwf	printf@val+2,c
  2484  000162  6E41               	movwf	printf@val+3,c
  2485  000164  0E02               	movlw	2
  2486  000166                     L1:
  2487  000166  263C               	addwf	printf@ap,f,c
  2488  000168  0E00               	movlw	0
  2489  00016A  223D               	addwfc	printf@ap+1,f,c
  2490  00016C  D000               	goto	l5171
  2491  00016E                     l5171:
  2492                           
  2493                           ;doprnt.c: 1261: if((long)val < 0) {
  2494  00016E  AE41               	btfss	printf@val+3,7,c
  2495  000170  D074               	goto	l5215
  2496                           
  2497                           ;doprnt.c: 1262: flag |= 0x03;
  2498  000172  0E03               	movlw	3
  2499  000174  1244               	iorwf	printf@flag,f,c
  2500                           
  2501                           ;doprnt.c: 1263: val = -val;
  2502  000176  1E41               	comf	printf@val+3,f,c
  2503  000178  1E40               	comf	printf@val+2,f,c
  2504  00017A  1E3F               	comf	printf@val+1,f,c
  2505  00017C  6C3E               	negf	printf@val,c
  2506  00017E  0E00               	movlw	0
  2507  000180  223F               	addwfc	printf@val+1,f,c
  2508  000182  2240               	addwfc	printf@val+2,f,c
  2509  000184  2241               	addwfc	printf@val+3,f,c
  2510                           
  2511                           ;doprnt.c: 1264: }
  2512                           ;doprnt.c: 1266: }
  2513  000186  D069               	goto	l5215
  2514  000188                     l629:
  2515                           
  2516                           ;doprnt.c: 1268: else
  2517                           ;doprnt.c: 1273: {
  2518                           ;doprnt.c: 1281: if(flag & 0x10)
  2519  000188  A844               	btfss	printf@flag,4,c
  2520  00018A  D00E               	goto	l5181
  2521                           
  2522                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  2523  00018C  C03C  FFD9         	movff	printf@ap,fsr2l
  2524  000190  C03D  FFDA         	movff	printf@ap+1,fsr2h
  2525  000194  CFDE F03E          	movff	postinc2,printf@val
  2526  000198  CFDE F03F          	movff	postinc2,printf@val+1
  2527  00019C  CFDE F040          	movff	postinc2,printf@val+2
  2528  0001A0  CFDE F041          	movff	postinc2,printf@val+3
  2529  0001A4  0E04               	movlw	4
  2530  0001A6  D00F               	goto	L2
  2531  0001A8                     l5181:
  2532                           
  2533                           ;doprnt.c: 1283: else
  2534                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2535  0001A8  C03C  FFD9         	movff	printf@ap,fsr2l
  2536  0001AC  C03D  FFDA         	movff	printf@ap+1,fsr2h
  2537  0001B0  CFDE F035          	movff	postinc2,??_printf
  2538  0001B4  CFDD F036          	movff	postdec2,??_printf+1
  2539  0001B8  C035  F03E         	movff	??_printf,printf@val
  2540  0001BC  C036  F03F         	movff	??_printf+1,printf@val+1
  2541  0001C0  6A40               	clrf	printf@val+2,c
  2542  0001C2  6A41               	clrf	printf@val+3,c
  2543  0001C4  0E02               	movlw	2
  2544  0001C6                     L2:
  2545  0001C6  263C               	addwf	printf@ap,f,c
  2546  0001C8  0E00               	movlw	0
  2547  0001CA  223D               	addwfc	printf@ap+1,f,c
  2548                           
  2549                           ;doprnt.c: 1287: }
  2550                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  2551  0001CC  D046               	goto	l5215
  2552  0001CE                     l5185:
  2553                           
  2554                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2555  0001CE  0E01               	movlw	1
  2556  0001D0  6E45               	movwf	printf@c,c
  2557  0001D2                     l5187:
  2558  0001D2  0E0A               	movlw	10
  2559  0001D4  1845               	xorwf	printf@c,w,c
  2560  0001D6  B4D8               	btfsc	status,2,c
  2561  0001D8  D049               	goto	l5217
  2562  0001DA  D001               	goto	l5191
  2563  0001DC  D047               	goto	l5217
  2564  0001DE                     l5191:
  2565                           
  2566                           ;doprnt.c: 1306: if(val < dpowers[c])
  2567  0001DE  5045               	movf	printf@c,w,c
  2568  0001E0  0D04               	mullw	4
  2569  0001E2  0E16               	movlw	low _dpowers
  2570  0001E4  24F3               	addwf	prodl,w,c
  2571  0001E6  6EF6               	movwf	tblptrl,c
  2572  0001E8  0EFF               	movlw	high _dpowers
  2573  0001EA  20F4               	addwfc	prodh,w,c
  2574  0001EC  6EF7               	movwf	tblptrh,c
  2575  0001EE                     	if	0	;There are less than 3 active tblptr bytes
  2576  0001EE                     	endif
  2577  0001EE  0009               	tblrd		*+
  2578  0001F0  50F5               	movf	tablat,w,c
  2579  0001F2  5C3E               	subwf	printf@val,w,c
  2580  0001F4  0009               	tblrd		*+
  2581  0001F6  50F5               	movf	tablat,w,c
  2582  0001F8  583F               	subwfb	printf@val+1,w,c
  2583  0001FA  0009               	tblrd		*+
  2584  0001FC  50F5               	movf	tablat,w,c
  2585  0001FE  5840               	subwfb	printf@val+2,w,c
  2586  000200  0009               	tblrd		*+
  2587  000202  50F5               	movf	tablat,w,c
  2588  000204  5841               	subwfb	printf@val+3,w,c
  2589  000206  A0D8               	btfss	status,0,c
  2590  000208  D031               	goto	l5217
  2591  00020A  D001               	goto	l5195
  2592                           
  2593                           ;doprnt.c: 1307: break;
  2594  00020C  D02F               	goto	l5217
  2595  00020E                     l5195:
  2596  00020E  2A45               	incf	printf@c,f,c
  2597  000210  D7E0               	goto	l5187
  2598                           
  2599                           ;doprnt.c: 1309: break;
  2600  000212  D02C               	goto	l5217
  2601  000214                     l5199:
  2602                           
  2603                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2604  000214  0E01               	movlw	1
  2605  000216  6E45               	movwf	printf@c,c
  2606  000218                     l5201:
  2607  000218  0E08               	movlw	8
  2608  00021A  1845               	xorwf	printf@c,w,c
  2609  00021C  B4D8               	btfsc	status,2,c
  2610  00021E  D026               	goto	l5217
  2611  000220  D001               	goto	l5205
  2612  000222  D024               	goto	l5217
  2613  000224                     l5205:
  2614                           
  2615                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2616  000224  5045               	movf	printf@c,w,c
  2617  000226  0D04               	mullw	4
  2618  000228  0E3E               	movlw	low _hexpowers
  2619  00022A  24F3               	addwf	prodl,w,c
  2620  00022C  6EF6               	movwf	tblptrl,c
  2621  00022E  0EFF               	movlw	high _hexpowers
  2622  000230  20F4               	addwfc	prodh,w,c
  2623  000232  6EF7               	movwf	tblptrh,c
  2624  000234                     	if	0	;There are less than 3 active tblptr bytes
  2625  000234                     	endif
  2626  000234  0009               	tblrd		*+
  2627  000236  50F5               	movf	tablat,w,c
  2628  000238  5C3E               	subwf	printf@val,w,c
  2629  00023A  0009               	tblrd		*+
  2630  00023C  50F5               	movf	tablat,w,c
  2631  00023E  583F               	subwfb	printf@val+1,w,c
  2632  000240  0009               	tblrd		*+
  2633  000242  50F5               	movf	tablat,w,c
  2634  000244  5840               	subwfb	printf@val+2,w,c
  2635  000246  0009               	tblrd		*+
  2636  000248  50F5               	movf	tablat,w,c
  2637  00024A  5841               	subwfb	printf@val+3,w,c
  2638  00024C  A0D8               	btfss	status,0,c
  2639  00024E  D00E               	goto	l5217
  2640  000250  D001               	goto	l5209
  2641                           
  2642                           ;doprnt.c: 1318: break;
  2643  000252  D00C               	goto	l5217
  2644  000254                     l5209:
  2645  000254  2A45               	incf	printf@c,f,c
  2646  000256  D7E0               	goto	l5201
  2647                           
  2648                           ;doprnt.c: 1336: }
  2649                           
  2650                           ;doprnt.c: 1320: break;
  2651  000258  D009               	goto	l5217
  2652  00025A                     l5215:
  2653  00025A  5044               	movf	printf@flag,w,c
  2654  00025C  0B80               	andlw	128
  2655                           
  2656                           ; Switch size 1, requested type "space"
  2657                           ; Number of cases is 2, Range of values is 0 to 128
  2658                           ; switch strategies available:
  2659                           ; Name         Instructions Cycles
  2660                           ; simple_byte            7     4 (average)
  2661                           ;	Chosen strategy is simple_byte
  2662  00025E  0A00               	xorlw	0	; case 0
  2663  000260  B4D8               	btfsc	status,2,c
  2664  000262  D7B5               	goto	l5185
  2665  000264  0A80               	xorlw	128	; case 128
  2666  000266  B4D8               	btfsc	status,2,c
  2667  000268  D7D5               	goto	l5199
  2668  00026A  D000               	goto	l5217
  2669  00026C                     l5217:
  2670                           
  2671                           ;doprnt.c: 1345: if(width && flag & 0x03)
  2672  00026C  5042               	movf	printf@width,w,c
  2673  00026E  1043               	iorwf	printf@width+1,w,c
  2674  000270  B4D8               	btfsc	status,2,c
  2675  000272  D00A               	goto	l5223
  2676  000274  C044  F035         	movff	printf@flag,??_printf
  2677  000278  0E03               	movlw	3
  2678  00027A  1635               	andwf	??_printf,f,c
  2679  00027C  B4D8               	btfsc	status,2,c
  2680  00027E  D004               	goto	l5223
  2681                           
  2682                           ;doprnt.c: 1346: width--;
  2683  000280  0642               	decf	printf@width,f,c
  2684  000282  A0D8               	btfss	status,0,c
  2685  000284  0643               	decf	printf@width+1,f,c
  2686  000286  D000               	goto	l5223
  2687  000288                     l5223:
  2688                           
  2689                           ;doprnt.c: 1381: if(width > c)
  2690  000288  0E80               	movlw	128
  2691  00028A  BE45               	btfsc	printf@c,7,c
  2692  00028C  0E7F               	movlw	127
  2693  00028E  6E35               	movwf	??_printf& (0+255),c
  2694  000290  5042               	movf	printf@width,w,c
  2695  000292  5C45               	subwf	printf@c,w,c
  2696  000294  5043               	movf	printf@width+1,w,c
  2697  000296  0A80               	xorlw	128
  2698  000298  5835               	subwfb	??_printf& (0+255),w,c
  2699  00029A  B0D8               	btfsc	status,0,c
  2700  00029C  D007               	goto	l5227
  2701                           
  2702                           ;doprnt.c: 1382: width -= c;
  2703  00029E  5045               	movf	printf@c,w,c
  2704  0002A0  5E42               	subwf	printf@width,f,c
  2705  0002A2  0E00               	movlw	0
  2706  0002A4  BE45               	btfsc	printf@c,7,c
  2707  0002A6  0EFF               	movlw	255
  2708  0002A8  5A43               	subwfb	printf@width+1,f,c
  2709  0002AA  D005               	goto	l5229
  2710  0002AC                     l5227:
  2711                           
  2712                           ;doprnt.c: 1383: else
  2713                           ;doprnt.c: 1384: width = 0;
  2714  0002AC  0E00               	movlw	0
  2715  0002AE  6E43               	movwf	printf@width+1,c
  2716  0002B0  0E00               	movlw	0
  2717  0002B2  6E42               	movwf	printf@width,c
  2718  0002B4  D000               	goto	l5229
  2719  0002B6                     l5229:
  2720                           
  2721                           ;doprnt.c: 1387: if(flag & 0x04) {
  2722  0002B6  A444               	btfss	printf@flag,2,c
  2723  0002B8  D01A               	goto	l5241
  2724                           
  2725                           ;doprnt.c: 1392: if(flag & 0x03)
  2726  0002BA  C044  F035         	movff	printf@flag,??_printf
  2727  0002BE  0E03               	movlw	3
  2728  0002C0  1635               	andwf	??_printf,f,c
  2729  0002C2  B4D8               	btfsc	status,2,c
  2730  0002C4  D004               	goto	l5235
  2731                           
  2732                           ;doprnt.c: 1393: (putch('-') );
  2733  0002C6  0E2D               	movlw	45
  2734  0002C8  EC6A  F00E         	call	_putch
  2735  0002CC  D000               	goto	l5235
  2736  0002CE                     l5235:
  2737                           
  2738                           ;doprnt.c: 1415: if(width)
  2739  0002CE  5042               	movf	printf@width,w,c
  2740  0002D0  1043               	iorwf	printf@width+1,w,c
  2741  0002D2  B4D8               	btfsc	status,2,c
  2742  0002D4  D026               	goto	l5251
  2743  0002D6                     l5237:
  2744                           
  2745                           ;doprnt.c: 1417: (putch('0') );
  2746  0002D6  0E30               	movlw	48
  2747  0002D8  EC6A  F00E         	call	_putch
  2748                           
  2749                           ;doprnt.c: 1418: while(--width);
  2750  0002DC  0642               	decf	printf@width,f,c
  2751  0002DE  A0D8               	btfss	status,0,c
  2752  0002E0  0643               	decf	printf@width+1,f,c
  2753  0002E2  5042               	movf	printf@width,w,c
  2754  0002E4  1043               	iorwf	printf@width+1,w,c
  2755  0002E6  B4D8               	btfsc	status,2,c
  2756  0002E8  D01C               	goto	l5251
  2757  0002EA  D7F5               	goto	l5237
  2758                           
  2759                           ;doprnt.c: 1420: } else
  2760  0002EC  D01A               	goto	l5251
  2761  0002EE                     l5241:
  2762                           
  2763                           ;doprnt.c: 1422: {
  2764                           ;doprnt.c: 1424: if(width
  2765                           ;doprnt.c: 1428: )
  2766  0002EE  5042               	movf	printf@width,w,c
  2767  0002F0  1043               	iorwf	printf@width+1,w,c
  2768  0002F2  B4D8               	btfsc	status,2,c
  2769  0002F4  D00C               	goto	l5247
  2770  0002F6                     l5243:
  2771                           
  2772                           ;doprnt.c: 1430: (putch(' ') );
  2773  0002F6  0E20               	movlw	32
  2774  0002F8  EC6A  F00E         	call	_putch
  2775                           
  2776                           ;doprnt.c: 1431: while(--width);
  2777  0002FC  0642               	decf	printf@width,f,c
  2778  0002FE  A0D8               	btfss	status,0,c
  2779  000300  0643               	decf	printf@width+1,f,c
  2780  000302  5042               	movf	printf@width,w,c
  2781  000304  1043               	iorwf	printf@width+1,w,c
  2782  000306  B4D8               	btfsc	status,2,c
  2783  000308  D002               	goto	l5247
  2784  00030A  D7F5               	goto	l5243
  2785  00030C  D000               	goto	l5247
  2786  00030E                     l5247:
  2787                           
  2788                           ;doprnt.c: 1438: if(flag & 0x03)
  2789  00030E  C044  F035         	movff	printf@flag,??_printf
  2790  000312  0E03               	movlw	3
  2791  000314  1635               	andwf	??_printf,f,c
  2792  000316  B4D8               	btfsc	status,2,c
  2793  000318  D004               	goto	l5251
  2794                           
  2795                           ;doprnt.c: 1439: (putch('-') );
  2796  00031A  0E2D               	movlw	45
  2797  00031C  EC6A  F00E         	call	_putch
  2798  000320  D000               	goto	l5251
  2799  000322                     l5251:
  2800                           
  2801                           ;doprnt.c: 1469: }
  2802                           ;doprnt.c: 1472: prec = c;
  2803  000322  5045               	movf	printf@c,w,c
  2804  000324  6E3A               	movwf	printf@prec,c
  2805  000326  6A3B               	clrf	printf@prec+1,c
  2806  000328  BE3A               	btfsc	printf@prec,7,c
  2807  00032A  063B               	decf	printf@prec+1,f,c
  2808                           
  2809                           ;doprnt.c: 1474: while(prec--) {
  2810  00032C  D07F               	goto	l5265
  2811                           
  2812                           ;doprnt.c: 1476: switch((unsigned char)(flag & 0x80))
  2813  00032E  D071               	goto	l5261
  2814  000330                     l5253:
  2815                           
  2816                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2817  000330  C03A  F035         	movff	printf@prec,??_printf
  2818  000334  C03B  F036         	movff	printf@prec+1,??_printf+1
  2819  000338  90D8               	bcf	status,0,c
  2820  00033A  3635               	rlcf	??_printf,f,c
  2821  00033C  3636               	rlcf	??_printf+1,f,c
  2822  00033E  90D8               	bcf	status,0,c
  2823  000340  3635               	rlcf	??_printf,f,c
  2824  000342  3636               	rlcf	??_printf+1,f,c
  2825  000344  0E16               	movlw	low _dpowers
  2826  000346  2435               	addwf	??_printf,w,c
  2827  000348  6EF6               	movwf	tblptrl,c
  2828  00034A  0EFF               	movlw	high _dpowers
  2829  00034C  2036               	addwfc	??_printf+1,w,c
  2830  00034E  6EF7               	movwf	tblptrh,c
  2831  000350                     	if	0	;There are less than 3 active tblptr bytes
  2832  000350                     	endif
  2833  000350  0009               	tblrd		*+
  2834  000352  CFF5 F015          	movff	tablat,___lldiv@divisor
  2835  000356  0009               	tblrd		*+
  2836  000358  CFF5 F016          	movff	tablat,___lldiv@divisor+1
  2837  00035C  0009               	tblrd		*+
  2838  00035E  CFF5 F017          	movff	tablat,___lldiv@divisor+2
  2839  000362  000A               	tblrd		*-
  2840  000364  CFF5 F018          	movff	tablat,___lldiv@divisor+3
  2841  000368  C03E  F011         	movff	printf@val,___lldiv@dividend
  2842  00036C  C03F  F012         	movff	printf@val+1,___lldiv@dividend+1
  2843  000370  C040  F013         	movff	printf@val+2,___lldiv@dividend+2
  2844  000374  C041  F014         	movff	printf@val+3,___lldiv@dividend+3
  2845  000378  ECC0  F009         	call	___lldiv	;wreg free
  2846  00037C  C011  F01E         	movff	?___lldiv,___llmod@dividend
  2847  000380  C012  F01F         	movff	?___lldiv+1,___llmod@dividend+1
  2848  000384  C013  F020         	movff	?___lldiv+2,___llmod@dividend+2
  2849  000388  C014  F021         	movff	?___lldiv+3,___llmod@dividend+3
  2850  00038C  0E0A               	movlw	10
  2851  00038E  6E22               	movwf	___llmod@divisor,c
  2852  000390  0E00               	movlw	0
  2853  000392  6E23               	movwf	___llmod@divisor+1,c
  2854  000394  0E00               	movlw	0
  2855  000396  6E24               	movwf	___llmod@divisor+2,c
  2856  000398  0E00               	movlw	0
  2857  00039A  6E25               	movwf	___llmod@divisor+3,c
  2858  00039C  ECC5  F00A         	call	___llmod	;wreg free
  2859  0003A0  501E               	movf	?___llmod,w,c
  2860  0003A2  0F30               	addlw	48
  2861  0003A4  6E45               	movwf	printf@c,c
  2862                           
  2863                           ;doprnt.c: 1491: break;
  2864  0003A6  D03E               	goto	l5263
  2865  0003A8                     l5255:
  2866                           
  2867                           ;doprnt.c: 1499: {
  2868                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  2869  0003A8  C03E  F011         	movff	printf@val,___lldiv@dividend
  2870  0003AC  C03F  F012         	movff	printf@val+1,___lldiv@dividend+1
  2871  0003B0  C040  F013         	movff	printf@val+2,___lldiv@dividend+2
  2872  0003B4  C041  F014         	movff	printf@val+3,___lldiv@dividend+3
  2873  0003B8  C03A  F035         	movff	printf@prec,??_printf
  2874  0003BC  C03B  F036         	movff	printf@prec+1,??_printf+1
  2875  0003C0  90D8               	bcf	status,0,c
  2876  0003C2  3635               	rlcf	??_printf,f,c
  2877  0003C4  3636               	rlcf	??_printf+1,f,c
  2878  0003C6  90D8               	bcf	status,0,c
  2879  0003C8  3635               	rlcf	??_printf,f,c
  2880  0003CA  3636               	rlcf	??_printf+1,f,c
  2881  0003CC  0E3E               	movlw	low _hexpowers
  2882  0003CE  2435               	addwf	??_printf,w,c
  2883  0003D0  6EF6               	movwf	tblptrl,c
  2884  0003D2  0EFF               	movlw	high _hexpowers
  2885  0003D4  2036               	addwfc	??_printf+1,w,c
  2886  0003D6  6EF7               	movwf	tblptrh,c
  2887  0003D8                     	if	0	;There are less than 3 active tblptr bytes
  2888  0003D8                     	endif
  2889  0003D8  0009               	tblrd		*+
  2890  0003DA  CFF5 F015          	movff	tablat,___lldiv@divisor
  2891  0003DE  0009               	tblrd		*+
  2892  0003E0  CFF5 F016          	movff	tablat,___lldiv@divisor+1
  2893  0003E4  0009               	tblrd		*+
  2894  0003E6  CFF5 F017          	movff	tablat,___lldiv@divisor+2
  2895  0003EA  000A               	tblrd		*-
  2896  0003EC  CFF5 F018          	movff	tablat,___lldiv@divisor+3
  2897  0003F0  ECC0  F009         	call	___lldiv	;wreg free
  2898  0003F4  5011               	movf	?___lldiv,w,c
  2899  0003F6  0B0F               	andlw	15
  2900  0003F8  6E39               	movwf	printf@idx,c
  2901                           
  2902                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  2903  0003FA  5039               	movf	printf@idx,w,c
  2904  0003FC  0D01               	mullw	1
  2905  0003FE  0ED6               	movlw	low STR_7
  2906  000400  24F3               	addwf	prodl,w,c
  2907  000402  6EF6               	movwf	tblptrl,c
  2908  000404  0EFF               	movlw	high STR_7
  2909  000406  20F4               	addwfc	prodh,w,c
  2910  000408  6EF7               	movwf	tblptrh,c
  2911  00040A                     	if	0	;There are less than 3 active tblptr bytes
  2912  00040A                     	endif
  2913  00040A  0008               	tblrd		*
  2914  00040C  CFF5 F045          	movff	tablat,printf@c
  2915                           
  2916                           ;doprnt.c: 1523: }
  2917                           
  2918                           ;doprnt.c: 1508: }
  2919                           ;doprnt.c: 1510: break;
  2920  000410  D009               	goto	l5263
  2921  000412                     l5261:
  2922  000412  5044               	movf	printf@flag,w,c
  2923  000414  0B80               	andlw	128
  2924                           
  2925                           ; Switch size 1, requested type "space"
  2926                           ; Number of cases is 2, Range of values is 0 to 128
  2927                           ; switch strategies available:
  2928                           ; Name         Instructions Cycles
  2929                           ; simple_byte            7     4 (average)
  2930                           ;	Chosen strategy is simple_byte
  2931  000416  0A00               	xorlw	0	; case 0
  2932  000418  B4D8               	btfsc	status,2,c
  2933  00041A  D78A               	goto	l5253
  2934  00041C  0A80               	xorlw	128	; case 128
  2935  00041E  B4D8               	btfsc	status,2,c
  2936  000420  D7C3               	goto	l5255
  2937  000422  D000               	goto	l5263
  2938  000424                     l5263:
  2939                           
  2940                           ;doprnt.c: 1524: (putch(c) );
  2941  000424  5045               	movf	printf@c,w,c
  2942  000426  EC6A  F00E         	call	_putch
  2943  00042A  D000               	goto	l5265
  2944  00042C                     l5265:
  2945  00042C  063A               	decf	printf@prec,f,c
  2946  00042E  A0D8               	btfss	status,0,c
  2947  000430  063B               	decf	printf@prec+1,f,c
  2948  000432  283A               	incf	printf@prec,w,c
  2949  000434  E1EE               	bnz	l5261
  2950  000436  283B               	incf	printf@prec+1,w,c
  2951  000438  B4D8               	btfsc	status,2,c
  2952  00043A  D002               	goto	l5267
  2953  00043C  D7EA               	goto	l5261
  2954  00043E  D000               	goto	l5267
  2955  000440                     l5267:
  2956  000440  C027  FFF6         	movff	printf@f,tblptrl
  2957  000444  C028  FFF7         	movff	printf@f+1,tblptrh
  2958  000448  4A27               	infsnz	printf@f,f,c
  2959  00044A  2A28               	incf	printf@f+1,f,c
  2960  00044C                     	if	0	;tblptru may be non-zero
  2961  00044C                     	endif
  2962  00044C                     	if	0	;tblptru may be non-zero
  2963  00044C                     	endif
  2964  00044C  0008               	tblrd		*
  2965  00044E  CFF5 F045          	movff	tablat,printf@c
  2966  000452  5045               	movf	printf@c,w,c
  2967  000454  B4D8               	btfsc	status,2,c
  2968  000456  D002               	goto	l667
  2969  000458  D5E6               	goto	l5129
  2970  00045A  D000               	goto	l667
  2971  00045C                     l667:
  2972  00045C  0012               	return		;funcret
  2973  00045E                     __end_of_printf:
  2974                           	opt stack 0
  2975                           tblptru	equ	0xFF8
  2976                           tblptrh	equ	0xFF7
  2977                           tblptrl	equ	0xFF6
  2978                           tablat	equ	0xFF5
  2979                           prodh	equ	0xFF4
  2980                           prodl	equ	0xFF3
  2981                           intcon	equ	0xFF2
  2982                           intcon2	equ	0xFF1
  2983                           postinc0	equ	0xFEE
  2984                           wreg	equ	0xFE8
  2985                           postdec1	equ	0xFE5
  2986                           fsr1l	equ	0xFE1
  2987                           postinc2	equ	0xFDE
  2988                           postdec2	equ	0xFDD
  2989                           fsr2h	equ	0xFDA
  2990                           fsr2l	equ	0xFD9
  2991                           status	equ	0xFD8
  2992                           
  2993 ;; *************** function _putch *****************
  2994 ;; Defined at:
  2995 ;;		line 88 in file "Lab10p1.c"
  2996 ;; Parameters:    Size  Location     Type
  2997 ;;  c               1    wreg     unsigned char 
  2998 ;; Auto vars:     Size  Location     Type
  2999 ;;  c               1   16[COMRAM] unsigned char 
  3000 ;; Return value:  Size  Location     Type
  3001 ;;		None               void
  3002 ;; Registers used:
  3003 ;;		wreg
  3004 ;; Tracked objects:
  3005 ;;		On entry : 0/0
  3006 ;;		On exit  : 0/0
  3007 ;;		Unchanged: 0/0
  3008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3009 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3010 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3011 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3012 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3013 ;;Total ram usage:        1 bytes
  3014 ;; Hardware stack levels used:    1
  3015 ;; Hardware stack levels required when called:    3
  3016 ;; This function calls:
  3017 ;;		Nothing
  3018 ;; This function is called by:
  3019 ;;		_printf
  3020 ;; This function uses a non-reentrant model
  3021 ;;
  3022                           
  3023                           	psect	text2
  3024  001CD4                     __ptext2:
  3025                           	opt stack 0
  3026  001CD4                     _putch:
  3027                           	opt stack 26
  3028                           
  3029                           ;incstack = 0
  3030                           ;putch@c stored from wreg
  3031  001CD4  6E11               	movwf	putch@c,c
  3032                           
  3033                           ;Lab10p1.c: 90: while (!TRMT);
  3034  001CD6  D000               	goto	l145
  3035  001CD8                     l145:
  3036  001CD8  A2AC               	btfss	4012,1,c	;volatile
  3037  001CDA  D7FE               	goto	l145
  3038                           
  3039                           ;Lab10p1.c: 91: TXREG = c;
  3040  001CDC  C011  FFAD         	movff	putch@c,4013	;volatile
  3041  001CE0  0012               	return		;funcret
  3042  001CE2                     __end_of_putch:
  3043                           	opt stack 0
  3044                           tblptru	equ	0xFF8
  3045                           tblptrh	equ	0xFF7
  3046                           tblptrl	equ	0xFF6
  3047                           tablat	equ	0xFF5
  3048                           prodh	equ	0xFF4
  3049                           prodl	equ	0xFF3
  3050                           intcon	equ	0xFF2
  3051                           intcon2	equ	0xFF1
  3052                           postinc0	equ	0xFEE
  3053                           wreg	equ	0xFE8
  3054                           postdec1	equ	0xFE5
  3055                           fsr1l	equ	0xFE1
  3056                           postinc2	equ	0xFDE
  3057                           postdec2	equ	0xFDD
  3058                           fsr2h	equ	0xFDA
  3059                           fsr2l	equ	0xFD9
  3060                           status	equ	0xFD8
  3061                           
  3062 ;; *************** function _isdigit *****************
  3063 ;; Defined at:
  3064 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
  3065 ;; Parameters:    Size  Location     Type
  3066 ;;  c               1    wreg     unsigned char 
  3067 ;; Auto vars:     Size  Location     Type
  3068 ;;  c               1   18[COMRAM] unsigned char 
  3069 ;; Return value:  Size  Location     Type
  3070 ;;		None               void
  3071 ;; Registers used:
  3072 ;;		wreg, status,2, status,0
  3073 ;; Tracked objects:
  3074 ;;		On entry : 0/0
  3075 ;;		On exit  : 0/0
  3076 ;;		Unchanged: 0/0
  3077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3078 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3079 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3080 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3081 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3082 ;;Total ram usage:        3 bytes
  3083 ;; Hardware stack levels used:    1
  3084 ;; Hardware stack levels required when called:    3
  3085 ;; This function calls:
  3086 ;;		Nothing
  3087 ;; This function is called by:
  3088 ;;		_printf
  3089 ;; This function uses a non-reentrant model
  3090 ;;
  3091                           
  3092                           	psect	text3
  3093  001B86                     __ptext3:
  3094                           	opt stack 0
  3095  001B86                     _isdigit:
  3096                           	opt stack 26
  3097                           
  3098                           ;incstack = 0
  3099                           ;isdigit@c stored from wreg
  3100  001B86  6E13               	movwf	isdigit@c,c
  3101  001B88  0E00               	movlw	0
  3102  001B8A  6E12               	movwf	_isdigit$2177,c
  3103  001B8C  0E3A               	movlw	58
  3104  001B8E  6013               	cpfslt	isdigit@c,c
  3105  001B90  D006               	goto	l4971
  3106  001B92  0E2F               	movlw	47
  3107  001B94  6413               	cpfsgt	isdigit@c,c
  3108  001B96  D003               	goto	l4971
  3109  001B98  0E01               	movlw	1
  3110  001B9A  6E12               	movwf	_isdigit$2177,c
  3111  001B9C  D000               	goto	l4971
  3112  001B9E                     l4971:
  3113  001B9E  C012  F011         	movff	_isdigit$2177,??_isdigit
  3114  001BA2  3011               	rrcf	??_isdigit,w,c
  3115  001BA4  D000               	goto	l1134
  3116  001BA6                     l1134:
  3117  001BA6  0012               	return		;funcret
  3118  001BA8                     __end_of_isdigit:
  3119                           	opt stack 0
  3120                           tblptru	equ	0xFF8
  3121                           tblptrh	equ	0xFF7
  3122                           tblptrl	equ	0xFF6
  3123                           tablat	equ	0xFF5
  3124                           prodh	equ	0xFF4
  3125                           prodl	equ	0xFF3
  3126                           intcon	equ	0xFF2
  3127                           intcon2	equ	0xFF1
  3128                           postinc0	equ	0xFEE
  3129                           wreg	equ	0xFE8
  3130                           postdec1	equ	0xFE5
  3131                           fsr1l	equ	0xFE1
  3132                           postinc2	equ	0xFDE
  3133                           postdec2	equ	0xFDD
  3134                           fsr2h	equ	0xFDA
  3135                           fsr2l	equ	0xFD9
  3136                           status	equ	0xFD8
  3137                           
  3138 ;; *************** function ___llmod *****************
  3139 ;; Defined at:
  3140 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\llmod.c"
  3141 ;; Parameters:    Size  Location     Type
  3142 ;;  dividend        4   29[COMRAM] unsigned long 
  3143 ;;  divisor         4   33[COMRAM] unsigned long 
  3144 ;; Auto vars:     Size  Location     Type
  3145 ;;  counter         1   37[COMRAM] unsigned char 
  3146 ;; Return value:  Size  Location     Type
  3147 ;;                  4   29[COMRAM] unsigned long 
  3148 ;; Registers used:
  3149 ;;		wreg, status,2, status,0
  3150 ;; Tracked objects:
  3151 ;;		On entry : 0/0
  3152 ;;		On exit  : 0/0
  3153 ;;		Unchanged: 0/0
  3154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3155 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3156 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3157 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3158 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3159 ;;Total ram usage:        9 bytes
  3160 ;; Hardware stack levels used:    1
  3161 ;; Hardware stack levels required when called:    3
  3162 ;; This function calls:
  3163 ;;		Nothing
  3164 ;; This function is called by:
  3165 ;;		_printf
  3166 ;; This function uses a non-reentrant model
  3167 ;;
  3168                           
  3169                           	psect	text4
  3170  00158A                     __ptext4:
  3171                           	opt stack 0
  3172  00158A                     ___llmod:
  3173                           	opt stack 26
  3174                           
  3175                           ;incstack = 0
  3176  00158A  5022               	movf	___llmod@divisor,w,c
  3177  00158C  1023               	iorwf	___llmod@divisor+1,w,c
  3178  00158E  1024               	iorwf	___llmod@divisor+2,w,c
  3179  001590  1025               	iorwf	___llmod@divisor+3,w,c
  3180  001592  B4D8               	btfsc	status,2,c
  3181  001594  D029               	goto	l1173
  3182  001596  0E01               	movlw	1
  3183  001598  6E26               	movwf	___llmod@counter,c
  3184  00159A  D007               	goto	l5003
  3185  00159C                     l5001:
  3186  00159C  90D8               	bcf	status,0,c
  3187  00159E  3622               	rlcf	___llmod@divisor,f,c
  3188  0015A0  3623               	rlcf	___llmod@divisor+1,f,c
  3189  0015A2  3624               	rlcf	___llmod@divisor+2,f,c
  3190  0015A4  3625               	rlcf	___llmod@divisor+3,f,c
  3191  0015A6  2A26               	incf	___llmod@counter,f,c
  3192  0015A8  D000               	goto	l5003
  3193  0015AA                     l5003:
  3194  0015AA  BE25               	btfsc	___llmod@divisor+3,7,c
  3195  0015AC  D002               	goto	l5005
  3196  0015AE  D7F6               	goto	l5001
  3197  0015B0  D000               	goto	l5005
  3198  0015B2                     l5005:
  3199  0015B2  5022               	movf	___llmod@divisor,w,c
  3200  0015B4  5C1E               	subwf	___llmod@dividend,w,c
  3201  0015B6  5023               	movf	___llmod@divisor+1,w,c
  3202  0015B8  581F               	subwfb	___llmod@dividend+1,w,c
  3203  0015BA  5024               	movf	___llmod@divisor+2,w,c
  3204  0015BC  5820               	subwfb	___llmod@dividend+2,w,c
  3205  0015BE  5025               	movf	___llmod@divisor+3,w,c
  3206  0015C0  5821               	subwfb	___llmod@dividend+3,w,c
  3207  0015C2  A0D8               	btfss	status,0,c
  3208  0015C4  D009               	goto	l5009
  3209  0015C6  5022               	movf	___llmod@divisor,w,c
  3210  0015C8  5E1E               	subwf	___llmod@dividend,f,c
  3211  0015CA  5023               	movf	___llmod@divisor+1,w,c
  3212  0015CC  5A1F               	subwfb	___llmod@dividend+1,f,c
  3213  0015CE  5024               	movf	___llmod@divisor+2,w,c
  3214  0015D0  5A20               	subwfb	___llmod@dividend+2,f,c
  3215  0015D2  5025               	movf	___llmod@divisor+3,w,c
  3216  0015D4  5A21               	subwfb	___llmod@dividend+3,f,c
  3217  0015D6  D000               	goto	l5009
  3218  0015D8                     l5009:
  3219  0015D8  90D8               	bcf	status,0,c
  3220  0015DA  3225               	rrcf	___llmod@divisor+3,f,c
  3221  0015DC  3224               	rrcf	___llmod@divisor+2,f,c
  3222  0015DE  3223               	rrcf	___llmod@divisor+1,f,c
  3223  0015E0  3222               	rrcf	___llmod@divisor,f,c
  3224  0015E2  2E26               	decfsz	___llmod@counter,f,c
  3225  0015E4  D7E6               	goto	l5005
  3226  0015E6  D000               	goto	l1173
  3227  0015E8                     l1173:
  3228  0015E8  C01E  F01E         	movff	___llmod@dividend,?___llmod
  3229  0015EC  C01F  F01F         	movff	___llmod@dividend+1,?___llmod+1
  3230  0015F0  C020  F020         	movff	___llmod@dividend+2,?___llmod+2
  3231  0015F4  C021  F021         	movff	___llmod@dividend+3,?___llmod+3
  3232  0015F8  0012               	return		;funcret
  3233  0015FA                     __end_of___llmod:
  3234                           	opt stack 0
  3235                           tblptru	equ	0xFF8
  3236                           tblptrh	equ	0xFF7
  3237                           tblptrl	equ	0xFF6
  3238                           tablat	equ	0xFF5
  3239                           prodh	equ	0xFF4
  3240                           prodl	equ	0xFF3
  3241                           intcon	equ	0xFF2
  3242                           intcon2	equ	0xFF1
  3243                           postinc0	equ	0xFEE
  3244                           wreg	equ	0xFE8
  3245                           postdec1	equ	0xFE5
  3246                           fsr1l	equ	0xFE1
  3247                           postinc2	equ	0xFDE
  3248                           postdec2	equ	0xFDD
  3249                           fsr2h	equ	0xFDA
  3250                           fsr2l	equ	0xFD9
  3251                           status	equ	0xFD8
  3252                           
  3253 ;; *************** function ___lldiv *****************
  3254 ;; Defined at:
  3255 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lldiv.c"
  3256 ;; Parameters:    Size  Location     Type
  3257 ;;  dividend        4   16[COMRAM] unsigned long 
  3258 ;;  divisor         4   20[COMRAM] unsigned long 
  3259 ;; Auto vars:     Size  Location     Type
  3260 ;;  quotient        4   24[COMRAM] unsigned long 
  3261 ;;  counter         1   28[COMRAM] unsigned char 
  3262 ;; Return value:  Size  Location     Type
  3263 ;;                  4   16[COMRAM] unsigned long 
  3264 ;; Registers used:
  3265 ;;		wreg, status,2, status,0
  3266 ;; Tracked objects:
  3267 ;;		On entry : 0/0
  3268 ;;		On exit  : 0/0
  3269 ;;		Unchanged: 0/0
  3270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3271 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3272 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3273 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3274 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3275 ;;Total ram usage:       13 bytes
  3276 ;; Hardware stack levels used:    1
  3277 ;; Hardware stack levels required when called:    3
  3278 ;; This function calls:
  3279 ;;		Nothing
  3280 ;; This function is called by:
  3281 ;;		_printf
  3282 ;; This function uses a non-reentrant model
  3283 ;;
  3284                           
  3285                           	psect	text5
  3286  001380                     __ptext5:
  3287                           	opt stack 0
  3288  001380                     ___lldiv:
  3289                           	opt stack 26
  3290                           
  3291                           ;incstack = 0
  3292  001380  0E00               	movlw	0
  3293  001382  6E19               	movwf	___lldiv@quotient,c
  3294  001384  0E00               	movlw	0
  3295  001386  6E1A               	movwf	___lldiv@quotient+1,c
  3296  001388  0E00               	movlw	0
  3297  00138A  6E1B               	movwf	___lldiv@quotient+2,c
  3298  00138C  0E00               	movlw	0
  3299  00138E  6E1C               	movwf	___lldiv@quotient+3,c
  3300  001390  5015               	movf	___lldiv@divisor,w,c
  3301  001392  1016               	iorwf	___lldiv@divisor+1,w,c
  3302  001394  1017               	iorwf	___lldiv@divisor+2,w,c
  3303  001396  1018               	iorwf	___lldiv@divisor+3,w,c
  3304  001398  B4D8               	btfsc	status,2,c
  3305  00139A  D02F               	goto	l1163
  3306  00139C  0E01               	movlw	1
  3307  00139E  6E1D               	movwf	___lldiv@counter,c
  3308  0013A0  D007               	goto	l4983
  3309  0013A2                     l4981:
  3310  0013A2  90D8               	bcf	status,0,c
  3311  0013A4  3615               	rlcf	___lldiv@divisor,f,c
  3312  0013A6  3616               	rlcf	___lldiv@divisor+1,f,c
  3313  0013A8  3617               	rlcf	___lldiv@divisor+2,f,c
  3314  0013AA  3618               	rlcf	___lldiv@divisor+3,f,c
  3315  0013AC  2A1D               	incf	___lldiv@counter,f,c
  3316  0013AE  D000               	goto	l4983
  3317  0013B0                     l4983:
  3318  0013B0  BE18               	btfsc	___lldiv@divisor+3,7,c
  3319  0013B2  D002               	goto	l4985
  3320  0013B4  D7F6               	goto	l4981
  3321  0013B6  D000               	goto	l4985
  3322  0013B8                     l4985:
  3323  0013B8  90D8               	bcf	status,0,c
  3324  0013BA  3619               	rlcf	___lldiv@quotient,f,c
  3325  0013BC  361A               	rlcf	___lldiv@quotient+1,f,c
  3326  0013BE  361B               	rlcf	___lldiv@quotient+2,f,c
  3327  0013C0  361C               	rlcf	___lldiv@quotient+3,f,c
  3328  0013C2  5015               	movf	___lldiv@divisor,w,c
  3329  0013C4  5C11               	subwf	___lldiv@dividend,w,c
  3330  0013C6  5016               	movf	___lldiv@divisor+1,w,c
  3331  0013C8  5812               	subwfb	___lldiv@dividend+1,w,c
  3332  0013CA  5017               	movf	___lldiv@divisor+2,w,c
  3333  0013CC  5813               	subwfb	___lldiv@dividend+2,w,c
  3334  0013CE  5018               	movf	___lldiv@divisor+3,w,c
  3335  0013D0  5814               	subwfb	___lldiv@dividend+3,w,c
  3336  0013D2  A0D8               	btfss	status,0,c
  3337  0013D4  D00A               	goto	l4993
  3338  0013D6  5015               	movf	___lldiv@divisor,w,c
  3339  0013D8  5E11               	subwf	___lldiv@dividend,f,c
  3340  0013DA  5016               	movf	___lldiv@divisor+1,w,c
  3341  0013DC  5A12               	subwfb	___lldiv@dividend+1,f,c
  3342  0013DE  5017               	movf	___lldiv@divisor+2,w,c
  3343  0013E0  5A13               	subwfb	___lldiv@dividend+2,f,c
  3344  0013E2  5018               	movf	___lldiv@divisor+3,w,c
  3345  0013E4  5A14               	subwfb	___lldiv@dividend+3,f,c
  3346  0013E6  8019               	bsf	___lldiv@quotient,0,c
  3347  0013E8  D000               	goto	l4993
  3348  0013EA                     l4993:
  3349  0013EA  90D8               	bcf	status,0,c
  3350  0013EC  3218               	rrcf	___lldiv@divisor+3,f,c
  3351  0013EE  3217               	rrcf	___lldiv@divisor+2,f,c
  3352  0013F0  3216               	rrcf	___lldiv@divisor+1,f,c
  3353  0013F2  3215               	rrcf	___lldiv@divisor,f,c
  3354  0013F4  2E1D               	decfsz	___lldiv@counter,f,c
  3355  0013F6  D7E0               	goto	l4985
  3356  0013F8  D000               	goto	l1163
  3357  0013FA                     l1163:
  3358  0013FA  C019  F011         	movff	___lldiv@quotient,?___lldiv
  3359  0013FE  C01A  F012         	movff	___lldiv@quotient+1,?___lldiv+1
  3360  001402  C01B  F013         	movff	___lldiv@quotient+2,?___lldiv+2
  3361  001406  C01C  F014         	movff	___lldiv@quotient+3,?___lldiv+3
  3362  00140A  0012               	return		;funcret
  3363  00140C                     __end_of___lldiv:
  3364                           	opt stack 0
  3365                           tblptru	equ	0xFF8
  3366                           tblptrh	equ	0xFF7
  3367                           tblptrl	equ	0xFF6
  3368                           tablat	equ	0xFF5
  3369                           prodh	equ	0xFF4
  3370                           prodl	equ	0xFF3
  3371                           intcon	equ	0xFF2
  3372                           intcon2	equ	0xFF1
  3373                           postinc0	equ	0xFEE
  3374                           wreg	equ	0xFE8
  3375                           postdec1	equ	0xFE5
  3376                           fsr1l	equ	0xFE1
  3377                           postinc2	equ	0xFDE
  3378                           postdec2	equ	0xFDD
  3379                           fsr2h	equ	0xFDA
  3380                           fsr2l	equ	0xFD9
  3381                           status	equ	0xFD8
  3382                           
  3383 ;; *************** function _fillCircle *****************
  3384 ;; Defined at:
  3385 ;;		line 614 in file "ST7735_TFT.c"
  3386 ;; Parameters:    Size  Location     Type
  3387 ;;  x0              2   58[COMRAM] int 
  3388 ;;  y0              2   60[COMRAM] int 
  3389 ;;  r               2   62[COMRAM] int 
  3390 ;;  color           2   64[COMRAM] unsigned int 
  3391 ;; Auto vars:     Size  Location     Type
  3392 ;;		None
  3393 ;; Return value:  Size  Location     Type
  3394 ;;		None               void
  3395 ;; Registers used:
  3396 ;;		wreg, status,2, status,0, cstack
  3397 ;; Tracked objects:
  3398 ;;		On entry : 0/0
  3399 ;;		On exit  : 0/0
  3400 ;;		Unchanged: 0/0
  3401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3402 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3403 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3404 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3405 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3406 ;;Total ram usage:        8 bytes
  3407 ;; Hardware stack levels used:    1
  3408 ;; Hardware stack levels required when called:    8
  3409 ;; This function calls:
  3410 ;;		_drawFastVLine
  3411 ;;		_fillCircleHelper
  3412 ;; This function is called by:
  3413 ;;		_main
  3414 ;; This function uses a non-reentrant model
  3415 ;;
  3416                           
  3417                           	psect	text6
  3418  001788                     __ptext6:
  3419                           	opt stack 0
  3420  001788                     _fillCircle:
  3421                           	opt stack 22
  3422                           
  3423                           ;ST7735_TFT.c: 616: drawFastVLine(x0, y0 - r, 2 * r + 1, color);
  3424                           
  3425                           ;incstack = 0
  3426  001788  503F               	movf	fillCircle@r,w,c
  3427  00178A  0800               	sublw	0
  3428  00178C  243D               	addwf	fillCircle@y0,w,c
  3429  00178E  6E18               	movwf	drawFastVLine@y,c
  3430  001790  80D8               	bsf	status,0,c
  3431  001792  343F               	rlcf	fillCircle@r,w,c
  3432  001794  6E19               	movwf	drawFastVLine@h,c
  3433  001796  C041  F01A         	movff	fillCircle@color,drawFastVLine@color
  3434  00179A  C042  F01B         	movff	fillCircle@color+1,drawFastVLine@color+1
  3435  00179E  503B               	movf	fillCircle@x0,w,c
  3436  0017A0  EC06  F00A         	call	_drawFastVLine
  3437                           
  3438                           ;ST7735_TFT.c: 617: fillCircleHelper(x0, y0, r, 3, 0, color);
  3439  0017A4  C03B  F023         	movff	fillCircle@x0,fillCircleHelper@x0
  3440  0017A8  C03C  F024         	movff	fillCircle@x0+1,fillCircleHelper@x0+1
  3441  0017AC  C03D  F025         	movff	fillCircle@y0,fillCircleHelper@y0
  3442  0017B0  C03E  F026         	movff	fillCircle@y0+1,fillCircleHelper@y0+1
  3443  0017B4  C03F  F027         	movff	fillCircle@r,fillCircleHelper@r
  3444  0017B8  C040  F028         	movff	fillCircle@r+1,fillCircleHelper@r+1
  3445  0017BC  0E00               	movlw	0
  3446  0017BE  6E2A               	movwf	fillCircleHelper@cornername+1,c
  3447  0017C0  0E03               	movlw	3
  3448  0017C2  6E29               	movwf	fillCircleHelper@cornername,c
  3449  0017C4  0E00               	movlw	0
  3450  0017C6  6E2C               	movwf	fillCircleHelper@delta+1,c
  3451  0017C8  0E00               	movlw	0
  3452  0017CA  6E2B               	movwf	fillCircleHelper@delta,c
  3453  0017CC  C041  F02D         	movff	fillCircle@color,fillCircleHelper@color
  3454  0017D0  C042  F02E         	movff	fillCircle@color+1,fillCircleHelper@color+1
  3455  0017D4  EC1C  F006         	call	_fillCircleHelper	;wreg free
  3456  0017D8  0012               	return		;funcret
  3457  0017DA                     __end_of_fillCircle:
  3458                           	opt stack 0
  3459                           tblptru	equ	0xFF8
  3460                           tblptrh	equ	0xFF7
  3461                           tblptrl	equ	0xFF6
  3462                           tablat	equ	0xFF5
  3463                           prodh	equ	0xFF4
  3464                           prodl	equ	0xFF3
  3465                           intcon	equ	0xFF2
  3466                           intcon2	equ	0xFF1
  3467                           postinc0	equ	0xFEE
  3468                           wreg	equ	0xFE8
  3469                           postdec1	equ	0xFE5
  3470                           fsr1l	equ	0xFE1
  3471                           postinc2	equ	0xFDE
  3472                           postdec2	equ	0xFDD
  3473                           fsr2h	equ	0xFDA
  3474                           fsr2l	equ	0xFD9
  3475                           status	equ	0xFD8
  3476                           
  3477 ;; *************** function _fillCircleHelper *****************
  3478 ;; Defined at:
  3479 ;;		line 589 in file "ST7735_TFT.c"
  3480 ;; Parameters:    Size  Location     Type
  3481 ;;  x0              2   34[COMRAM] int 
  3482 ;;  y0              2   36[COMRAM] int 
  3483 ;;  r               2   38[COMRAM] int 
  3484 ;;  cornername      2   40[COMRAM] unsigned int 
  3485 ;;  delta           2   42[COMRAM] int 
  3486 ;;  color           2   44[COMRAM] unsigned int 
  3487 ;; Auto vars:     Size  Location     Type
  3488 ;;  y               2   56[COMRAM] int 
  3489 ;;  x               2   54[COMRAM] int 
  3490 ;;  f               2   52[COMRAM] int 
  3491 ;;  ddF_y           2   50[COMRAM] int 
  3492 ;;  ddF_x           2   48[COMRAM] int 
  3493 ;; Return value:  Size  Location     Type
  3494 ;;		None               void
  3495 ;; Registers used:
  3496 ;;		wreg, status,2, status,0, cstack
  3497 ;; Tracked objects:
  3498 ;;		On entry : 0/0
  3499 ;;		On exit  : 0/0
  3500 ;;		Unchanged: 0/0
  3501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3502 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3503 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3504 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3505 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3506 ;;Total ram usage:       24 bytes
  3507 ;; Hardware stack levels used:    1
  3508 ;; Hardware stack levels required when called:    7
  3509 ;; This function calls:
  3510 ;;		_drawFastVLine
  3511 ;; This function is called by:
  3512 ;;		_fillCircle
  3513 ;; This function uses a non-reentrant model
  3514 ;;
  3515                           
  3516                           	psect	text7
  3517  000C38                     __ptext7:
  3518                           	opt stack 0
  3519  000C38                     _fillCircleHelper:
  3520                           	opt stack 22
  3521                           
  3522                           ;ST7735_TFT.c: 591: signed int f, ddF_x, ddF_y, x, y;
  3523                           ;ST7735_TFT.c: 592: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  3524                           
  3525                           ;incstack = 0
  3526  000C38  C027  F02F         	movff	fillCircleHelper@r,??_fillCircleHelper
  3527  000C3C  C028  F030         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  3528  000C40  1E2F               	comf	??_fillCircleHelper,f,c
  3529  000C42  1E30               	comf	??_fillCircleHelper+1,f,c
  3530  000C44  4A2F               	infsnz	??_fillCircleHelper,f,c
  3531  000C46  2A30               	incf	??_fillCircleHelper+1,f,c
  3532  000C48  0E01               	movlw	1
  3533  000C4A  242F               	addwf	??_fillCircleHelper,w,c
  3534  000C4C  6E35               	movwf	fillCircleHelper@f,c
  3535  000C4E  0E00               	movlw	0
  3536  000C50  2030               	addwfc	??_fillCircleHelper+1,w,c
  3537  000C52  6E36               	movwf	fillCircleHelper@f+1,c
  3538  000C54  0E00               	movlw	0
  3539  000C56  6E32               	movwf	fillCircleHelper@ddF_x+1,c
  3540  000C58  0E01               	movlw	1
  3541  000C5A  6E31               	movwf	fillCircleHelper@ddF_x,c
  3542  000C5C  C027  F02F         	movff	fillCircleHelper@r,??_fillCircleHelper
  3543  000C60  C028  F030         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  3544  000C64  90D8               	bcf	status,0,c
  3545  000C66  362F               	rlcf	??_fillCircleHelper,f,c
  3546  000C68  3630               	rlcf	??_fillCircleHelper+1,f,c
  3547  000C6A  1E2F               	comf	??_fillCircleHelper,f,c
  3548  000C6C  1E30               	comf	??_fillCircleHelper+1,f,c
  3549  000C6E  4A2F               	infsnz	??_fillCircleHelper,f,c
  3550  000C70  2A30               	incf	??_fillCircleHelper+1,f,c
  3551  000C72  C02F  F033         	movff	??_fillCircleHelper,fillCircleHelper@ddF_y
  3552  000C76  C030  F034         	movff	??_fillCircleHelper+1,fillCircleHelper@ddF_y+1
  3553  000C7A  0E00               	movlw	0
  3554  000C7C  6E38               	movwf	fillCircleHelper@x+1,c
  3555  000C7E  0E00               	movlw	0
  3556  000C80  6E37               	movwf	fillCircleHelper@x,c
  3557  000C82  C027  F039         	movff	fillCircleHelper@r,fillCircleHelper@y
  3558  000C86  C028  F03A         	movff	fillCircleHelper@r+1,fillCircleHelper@y+1
  3559                           
  3560                           ;ST7735_TFT.c: 593: while (x<y) {
  3561  000C8A  D067               	goto	l4961
  3562  000C8C                     l4941:
  3563                           
  3564                           ;ST7735_TFT.c: 594: if (f >= 0) {
  3565  000C8C  BE36               	btfsc	fillCircleHelper@f+1,7,c
  3566  000C8E  D00B               	goto	l560
  3567                           
  3568                           ;ST7735_TFT.c: 595: y--;
  3569  000C90  0639               	decf	fillCircleHelper@y,f,c
  3570  000C92  A0D8               	btfss	status,0,c
  3571  000C94  063A               	decf	fillCircleHelper@y+1,f,c
  3572                           
  3573                           ;ST7735_TFT.c: 596: ddF_y += 2;
  3574  000C96  0E02               	movlw	2
  3575  000C98  2633               	addwf	fillCircleHelper@ddF_y,f,c
  3576  000C9A  0E00               	movlw	0
  3577  000C9C  2234               	addwfc	fillCircleHelper@ddF_y+1,f,c
  3578                           
  3579                           ;ST7735_TFT.c: 597: f += ddF_y;
  3580  000C9E  5033               	movf	fillCircleHelper@ddF_y,w,c
  3581  000CA0  2635               	addwf	fillCircleHelper@f,f,c
  3582  000CA2  5034               	movf	fillCircleHelper@ddF_y+1,w,c
  3583  000CA4  2236               	addwfc	fillCircleHelper@f+1,f,c
  3584  000CA6                     l560:
  3585                           
  3586                           ;ST7735_TFT.c: 598: }
  3587                           ;ST7735_TFT.c: 599: x++;
  3588  000CA6  4A37               	infsnz	fillCircleHelper@x,f,c
  3589  000CA8  2A38               	incf	fillCircleHelper@x+1,f,c
  3590                           
  3591                           ;ST7735_TFT.c: 600: ddF_x += 2;
  3592  000CAA  0E02               	movlw	2
  3593  000CAC  2631               	addwf	fillCircleHelper@ddF_x,f,c
  3594  000CAE  0E00               	movlw	0
  3595  000CB0  2232               	addwfc	fillCircleHelper@ddF_x+1,f,c
  3596                           
  3597                           ;ST7735_TFT.c: 601: f += ddF_x;
  3598  000CB2  5031               	movf	fillCircleHelper@ddF_x,w,c
  3599  000CB4  2635               	addwf	fillCircleHelper@f,f,c
  3600  000CB6  5032               	movf	fillCircleHelper@ddF_x+1,w,c
  3601  000CB8  2236               	addwfc	fillCircleHelper@f+1,f,c
  3602                           
  3603                           ;ST7735_TFT.c: 603: if (cornername & 0x1) {
  3604  000CBA  A029               	btfss	fillCircleHelper@cornername,0,c
  3605  000CBC  D025               	goto	l4957
  3606                           
  3607                           ;ST7735_TFT.c: 604: drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
  3608  000CBE  5039               	movf	fillCircleHelper@y,w,c
  3609  000CC0  0800               	sublw	0
  3610  000CC2  2425               	addwf	fillCircleHelper@y0,w,c
  3611  000CC4  6E18               	movwf	drawFastVLine@y,c
  3612  000CC6  5039               	movf	fillCircleHelper@y,w,c
  3613  000CC8  2439               	addwf	fillCircleHelper@y,w,c
  3614  000CCA  242B               	addwf	fillCircleHelper@delta,w,c
  3615  000CCC  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3616  000CCE  282F               	incf	??_fillCircleHelper,w,c
  3617  000CD0  6E19               	movwf	drawFastVLine@h,c
  3618  000CD2  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3619  000CD6  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3620  000CDA  5023               	movf	fillCircleHelper@x0,w,c
  3621  000CDC  2437               	addwf	fillCircleHelper@x,w,c
  3622  000CDE  EC06  F00A         	call	_drawFastVLine
  3623                           
  3624                           ;ST7735_TFT.c: 605: drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
  3625  000CE2  5037               	movf	fillCircleHelper@x,w,c
  3626  000CE4  0800               	sublw	0
  3627  000CE6  2425               	addwf	fillCircleHelper@y0,w,c
  3628  000CE8  6E18               	movwf	drawFastVLine@y,c
  3629  000CEA  5037               	movf	fillCircleHelper@x,w,c
  3630  000CEC  2437               	addwf	fillCircleHelper@x,w,c
  3631  000CEE  242B               	addwf	fillCircleHelper@delta,w,c
  3632  000CF0  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3633  000CF2  282F               	incf	??_fillCircleHelper,w,c
  3634  000CF4  6E19               	movwf	drawFastVLine@h,c
  3635  000CF6  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3636  000CFA  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3637  000CFE  5023               	movf	fillCircleHelper@x0,w,c
  3638  000D00  2439               	addwf	fillCircleHelper@y,w,c
  3639  000D02  EC06  F00A         	call	_drawFastVLine
  3640  000D06  D000               	goto	l4957
  3641  000D08                     l4957:
  3642                           
  3643                           ;ST7735_TFT.c: 606: }
  3644                           ;ST7735_TFT.c: 607: if (cornername & 0x2) {
  3645  000D08  A229               	btfss	fillCircleHelper@cornername,1,c
  3646  000D0A  D027               	goto	l4961
  3647                           
  3648                           ;ST7735_TFT.c: 608: drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
  3649  000D0C  5039               	movf	fillCircleHelper@y,w,c
  3650  000D0E  0800               	sublw	0
  3651  000D10  2425               	addwf	fillCircleHelper@y0,w,c
  3652  000D12  6E18               	movwf	drawFastVLine@y,c
  3653  000D14  5039               	movf	fillCircleHelper@y,w,c
  3654  000D16  2439               	addwf	fillCircleHelper@y,w,c
  3655  000D18  242B               	addwf	fillCircleHelper@delta,w,c
  3656  000D1A  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3657  000D1C  282F               	incf	??_fillCircleHelper,w,c
  3658  000D1E  6E19               	movwf	drawFastVLine@h,c
  3659  000D20  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3660  000D24  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3661  000D28  5037               	movf	fillCircleHelper@x,w,c
  3662  000D2A  0800               	sublw	0
  3663  000D2C  2423               	addwf	fillCircleHelper@x0,w,c
  3664  000D2E  EC06  F00A         	call	_drawFastVLine
  3665                           
  3666                           ;ST7735_TFT.c: 609: drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
  3667  000D32  5037               	movf	fillCircleHelper@x,w,c
  3668  000D34  0800               	sublw	0
  3669  000D36  2425               	addwf	fillCircleHelper@y0,w,c
  3670  000D38  6E18               	movwf	drawFastVLine@y,c
  3671  000D3A  5037               	movf	fillCircleHelper@x,w,c
  3672  000D3C  2437               	addwf	fillCircleHelper@x,w,c
  3673  000D3E  242B               	addwf	fillCircleHelper@delta,w,c
  3674  000D40  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3675  000D42  282F               	incf	??_fillCircleHelper,w,c
  3676  000D44  6E19               	movwf	drawFastVLine@h,c
  3677  000D46  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3678  000D4A  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3679  000D4E  5039               	movf	fillCircleHelper@y,w,c
  3680  000D50  0800               	sublw	0
  3681  000D52  2423               	addwf	fillCircleHelper@x0,w,c
  3682  000D54  EC06  F00A         	call	_drawFastVLine
  3683  000D58  D000               	goto	l4961
  3684  000D5A                     l4961:
  3685  000D5A  5039               	movf	fillCircleHelper@y,w,c
  3686  000D5C  5C37               	subwf	fillCircleHelper@x,w,c
  3687  000D5E  5038               	movf	fillCircleHelper@x+1,w,c
  3688  000D60  0A80               	xorlw	128
  3689  000D62  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3690  000D64  503A               	movf	fillCircleHelper@y+1,w,c
  3691  000D66  0A80               	xorlw	128
  3692  000D68  582F               	subwfb	??_fillCircleHelper& (0+255),w,c
  3693  000D6A  A0D8               	btfss	status,0,c
  3694  000D6C  D78F               	goto	l4941
  3695  000D6E  0012               	return		;funcret
  3696  000D70                     __end_of_fillCircleHelper:
  3697                           	opt stack 0
  3698                           tblptru	equ	0xFF8
  3699                           tblptrh	equ	0xFF7
  3700                           tblptrl	equ	0xFF6
  3701                           tablat	equ	0xFF5
  3702                           prodh	equ	0xFF4
  3703                           prodl	equ	0xFF3
  3704                           intcon	equ	0xFF2
  3705                           intcon2	equ	0xFF1
  3706                           postinc0	equ	0xFEE
  3707                           wreg	equ	0xFE8
  3708                           postdec1	equ	0xFE5
  3709                           fsr1l	equ	0xFE1
  3710                           postinc2	equ	0xFDE
  3711                           postdec2	equ	0xFDD
  3712                           fsr2h	equ	0xFDA
  3713                           fsr2l	equ	0xFD9
  3714                           status	equ	0xFD8
  3715                           
  3716 ;; *************** function _drawCircle *****************
  3717 ;; Defined at:
  3718 ;;		line 528 in file "ST7735_TFT.c"
  3719 ;; Parameters:    Size  Location     Type
  3720 ;;  x0              2   27[COMRAM] int 
  3721 ;;  y0              2   29[COMRAM] int 
  3722 ;;  r               2   31[COMRAM] int 
  3723 ;;  color           2   33[COMRAM] unsigned int 
  3724 ;; Auto vars:     Size  Location     Type
  3725 ;;  y               2   45[COMRAM] int 
  3726 ;;  x               2   43[COMRAM] int 
  3727 ;;  f               2   41[COMRAM] int 
  3728 ;;  ddF_y           2   39[COMRAM] int 
  3729 ;;  ddF_x           2   37[COMRAM] int 
  3730 ;; Return value:  Size  Location     Type
  3731 ;;		None               void
  3732 ;; Registers used:
  3733 ;;		wreg, status,2, status,0, cstack
  3734 ;; Tracked objects:
  3735 ;;		On entry : 0/0
  3736 ;;		On exit  : 0/0
  3737 ;;		Unchanged: 0/0
  3738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3739 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3740 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3741 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3742 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3743 ;;Total ram usage:       20 bytes
  3744 ;; Hardware stack levels used:    1
  3745 ;; Hardware stack levels required when called:    7
  3746 ;; This function calls:
  3747 ;;		_drawPixel
  3748 ;; This function is called by:
  3749 ;;		_main
  3750 ;; This function uses a non-reentrant model
  3751 ;;
  3752                           
  3753                           	psect	text8
  3754  000674                     __ptext8:
  3755                           	opt stack 0
  3756  000674                     _drawCircle:
  3757                           	opt stack 23
  3758                           
  3759                           ;ST7735_TFT.c: 530: signed int f, ddF_x, ddF_y, x, y;
  3760                           ;ST7735_TFT.c: 531: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  3761                           
  3762                           ;incstack = 0
  3763  000674  C020  F024         	movff	drawCircle@r,??_drawCircle
  3764  000678  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
  3765  00067C  1E24               	comf	??_drawCircle,f,c
  3766  00067E  1E25               	comf	??_drawCircle+1,f,c
  3767  000680  4A24               	infsnz	??_drawCircle,f,c
  3768  000682  2A25               	incf	??_drawCircle+1,f,c
  3769  000684  0E01               	movlw	1
  3770  000686  2424               	addwf	??_drawCircle,w,c
  3771  000688  6E2A               	movwf	drawCircle@f,c
  3772  00068A  0E00               	movlw	0
  3773  00068C  2025               	addwfc	??_drawCircle+1,w,c
  3774  00068E  6E2B               	movwf	drawCircle@f+1,c
  3775  000690  0E00               	movlw	0
  3776  000692  6E27               	movwf	drawCircle@ddF_x+1,c
  3777  000694  0E01               	movlw	1
  3778  000696  6E26               	movwf	drawCircle@ddF_x,c
  3779  000698  C020  F024         	movff	drawCircle@r,??_drawCircle
  3780  00069C  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
  3781  0006A0  90D8               	bcf	status,0,c
  3782  0006A2  3624               	rlcf	??_drawCircle,f,c
  3783  0006A4  3625               	rlcf	??_drawCircle+1,f,c
  3784  0006A6  1E24               	comf	??_drawCircle,f,c
  3785  0006A8  1E25               	comf	??_drawCircle+1,f,c
  3786  0006AA  4A24               	infsnz	??_drawCircle,f,c
  3787  0006AC  2A25               	incf	??_drawCircle+1,f,c
  3788  0006AE  C024  F028         	movff	??_drawCircle,drawCircle@ddF_y
  3789  0006B2  C025  F029         	movff	??_drawCircle+1,drawCircle@ddF_y+1
  3790  0006B6  0E00               	movlw	0
  3791  0006B8  6E2D               	movwf	drawCircle@x+1,c
  3792  0006BA  0E00               	movlw	0
  3793  0006BC  6E2C               	movwf	drawCircle@x,c
  3794  0006BE  C020  F02E         	movff	drawCircle@r,drawCircle@y
  3795  0006C2  C021  F02F         	movff	drawCircle@r+1,drawCircle@y+1
  3796                           
  3797                           ;ST7735_TFT.c: 532: drawPixel(x0 , y0 + r, color);
  3798  0006C6  501E               	movf	drawCircle@y0,w,c
  3799  0006C8  2420               	addwf	drawCircle@r,w,c
  3800  0006CA  6E18               	movwf	drawPixel@y,c
  3801  0006CC  C022  F019         	movff	drawCircle@color,drawPixel@color
  3802  0006D0  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3803  0006D4  501C               	movf	drawCircle@x0,w,c
  3804  0006D6  EC58  F00D         	call	_drawPixel
  3805                           
  3806                           ;ST7735_TFT.c: 533: drawPixel(x0 , y0 - r, color);
  3807  0006DA  5020               	movf	drawCircle@r,w,c
  3808  0006DC  0800               	sublw	0
  3809  0006DE  241E               	addwf	drawCircle@y0,w,c
  3810  0006E0  6E18               	movwf	drawPixel@y,c
  3811  0006E2  C022  F019         	movff	drawCircle@color,drawPixel@color
  3812  0006E6  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3813  0006EA  501C               	movf	drawCircle@x0,w,c
  3814  0006EC  EC58  F00D         	call	_drawPixel
  3815                           
  3816                           ;ST7735_TFT.c: 534: drawPixel(x0+r, y0 , color);
  3817  0006F0  C01E  F018         	movff	drawCircle@y0,drawPixel@y
  3818  0006F4  C022  F019         	movff	drawCircle@color,drawPixel@color
  3819  0006F8  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3820  0006FC  501C               	movf	drawCircle@x0,w,c
  3821  0006FE  2420               	addwf	drawCircle@r,w,c
  3822  000700  EC58  F00D         	call	_drawPixel
  3823                           
  3824                           ;ST7735_TFT.c: 535: drawPixel(x0-r, y0 , color);
  3825  000704  C01E  F018         	movff	drawCircle@y0,drawPixel@y
  3826  000708  C022  F019         	movff	drawCircle@color,drawPixel@color
  3827  00070C  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3828  000710  5020               	movf	drawCircle@r,w,c
  3829  000712  0800               	sublw	0
  3830  000714  241C               	addwf	drawCircle@x0,w,c
  3831  000716  EC58  F00D         	call	_drawPixel
  3832                           
  3833                           ;ST7735_TFT.c: 536: while (x < y) {
  3834  00071A  D078               	goto	l5439
  3835  00071C                     l5411:
  3836                           
  3837                           ;ST7735_TFT.c: 537: if (f >= 0) {
  3838  00071C  BE2B               	btfsc	drawCircle@f+1,7,c
  3839  00071E  D00B               	goto	l542
  3840                           
  3841                           ;ST7735_TFT.c: 538: y--;
  3842  000720  062E               	decf	drawCircle@y,f,c
  3843  000722  A0D8               	btfss	status,0,c
  3844  000724  062F               	decf	drawCircle@y+1,f,c
  3845                           
  3846                           ;ST7735_TFT.c: 539: ddF_y += 2;
  3847  000726  0E02               	movlw	2
  3848  000728  2628               	addwf	drawCircle@ddF_y,f,c
  3849  00072A  0E00               	movlw	0
  3850  00072C  2229               	addwfc	drawCircle@ddF_y+1,f,c
  3851                           
  3852                           ;ST7735_TFT.c: 540: f += ddF_y;
  3853  00072E  5028               	movf	drawCircle@ddF_y,w,c
  3854  000730  262A               	addwf	drawCircle@f,f,c
  3855  000732  5029               	movf	drawCircle@ddF_y+1,w,c
  3856  000734  222B               	addwfc	drawCircle@f+1,f,c
  3857  000736                     l542:
  3858                           
  3859                           ;ST7735_TFT.c: 541: }
  3860                           ;ST7735_TFT.c: 542: x++;
  3861  000736  4A2C               	infsnz	drawCircle@x,f,c
  3862  000738  2A2D               	incf	drawCircle@x+1,f,c
  3863                           
  3864                           ;ST7735_TFT.c: 543: ddF_x += 2;
  3865  00073A  0E02               	movlw	2
  3866  00073C  2626               	addwf	drawCircle@ddF_x,f,c
  3867  00073E  0E00               	movlw	0
  3868  000740  2227               	addwfc	drawCircle@ddF_x+1,f,c
  3869                           
  3870                           ;ST7735_TFT.c: 544: f += ddF_x;
  3871  000742  5026               	movf	drawCircle@ddF_x,w,c
  3872  000744  262A               	addwf	drawCircle@f,f,c
  3873  000746  5027               	movf	drawCircle@ddF_x+1,w,c
  3874  000748  222B               	addwfc	drawCircle@f+1,f,c
  3875                           
  3876                           ;ST7735_TFT.c: 545: drawPixel(x0 + x, y0 + y, color);
  3877  00074A  501E               	movf	drawCircle@y0,w,c
  3878  00074C  242E               	addwf	drawCircle@y,w,c
  3879  00074E  6E18               	movwf	drawPixel@y,c
  3880  000750  C022  F019         	movff	drawCircle@color,drawPixel@color
  3881  000754  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3882  000758  501C               	movf	drawCircle@x0,w,c
  3883  00075A  242C               	addwf	drawCircle@x,w,c
  3884  00075C  EC58  F00D         	call	_drawPixel
  3885                           
  3886                           ;ST7735_TFT.c: 546: drawPixel(x0 - x, y0 + y, color);
  3887  000760  501E               	movf	drawCircle@y0,w,c
  3888  000762  242E               	addwf	drawCircle@y,w,c
  3889  000764  6E18               	movwf	drawPixel@y,c
  3890  000766  C022  F019         	movff	drawCircle@color,drawPixel@color
  3891  00076A  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3892  00076E  502C               	movf	drawCircle@x,w,c
  3893  000770  0800               	sublw	0
  3894  000772  241C               	addwf	drawCircle@x0,w,c
  3895  000774  EC58  F00D         	call	_drawPixel
  3896                           
  3897                           ;ST7735_TFT.c: 547: drawPixel(x0 + x, y0 - y, color);
  3898  000778  502E               	movf	drawCircle@y,w,c
  3899  00077A  0800               	sublw	0
  3900  00077C  241E               	addwf	drawCircle@y0,w,c
  3901  00077E  6E18               	movwf	drawPixel@y,c
  3902  000780  C022  F019         	movff	drawCircle@color,drawPixel@color
  3903  000784  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3904  000788  501C               	movf	drawCircle@x0,w,c
  3905  00078A  242C               	addwf	drawCircle@x,w,c
  3906  00078C  EC58  F00D         	call	_drawPixel
  3907                           
  3908                           ;ST7735_TFT.c: 548: drawPixel(x0 - x, y0 - y, color);
  3909  000790  502E               	movf	drawCircle@y,w,c
  3910  000792  0800               	sublw	0
  3911  000794  241E               	addwf	drawCircle@y0,w,c
  3912  000796  6E18               	movwf	drawPixel@y,c
  3913  000798  C022  F019         	movff	drawCircle@color,drawPixel@color
  3914  00079C  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3915  0007A0  502C               	movf	drawCircle@x,w,c
  3916  0007A2  0800               	sublw	0
  3917  0007A4  241C               	addwf	drawCircle@x0,w,c
  3918  0007A6  EC58  F00D         	call	_drawPixel
  3919                           
  3920                           ;ST7735_TFT.c: 549: drawPixel(x0 + y, y0 + x, color);
  3921  0007AA  501E               	movf	drawCircle@y0,w,c
  3922  0007AC  242C               	addwf	drawCircle@x,w,c
  3923  0007AE  6E18               	movwf	drawPixel@y,c
  3924  0007B0  C022  F019         	movff	drawCircle@color,drawPixel@color
  3925  0007B4  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3926  0007B8  501C               	movf	drawCircle@x0,w,c
  3927  0007BA  242E               	addwf	drawCircle@y,w,c
  3928  0007BC  EC58  F00D         	call	_drawPixel
  3929                           
  3930                           ;ST7735_TFT.c: 550: drawPixel(x0 - y, y0 + x, color);
  3931  0007C0  501E               	movf	drawCircle@y0,w,c
  3932  0007C2  242C               	addwf	drawCircle@x,w,c
  3933  0007C4  6E18               	movwf	drawPixel@y,c
  3934  0007C6  C022  F019         	movff	drawCircle@color,drawPixel@color
  3935  0007CA  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3936  0007CE  502E               	movf	drawCircle@y,w,c
  3937  0007D0  0800               	sublw	0
  3938  0007D2  241C               	addwf	drawCircle@x0,w,c
  3939  0007D4  EC58  F00D         	call	_drawPixel
  3940                           
  3941                           ;ST7735_TFT.c: 551: drawPixel(x0 + y, y0 - x, color);
  3942  0007D8  502C               	movf	drawCircle@x,w,c
  3943  0007DA  0800               	sublw	0
  3944  0007DC  241E               	addwf	drawCircle@y0,w,c
  3945  0007DE  6E18               	movwf	drawPixel@y,c
  3946  0007E0  C022  F019         	movff	drawCircle@color,drawPixel@color
  3947  0007E4  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3948  0007E8  501C               	movf	drawCircle@x0,w,c
  3949  0007EA  242E               	addwf	drawCircle@y,w,c
  3950  0007EC  EC58  F00D         	call	_drawPixel
  3951                           
  3952                           ;ST7735_TFT.c: 552: drawPixel(x0 - y, y0 - x, color);
  3953  0007F0  502C               	movf	drawCircle@x,w,c
  3954  0007F2  0800               	sublw	0
  3955  0007F4  241E               	addwf	drawCircle@y0,w,c
  3956  0007F6  6E18               	movwf	drawPixel@y,c
  3957  0007F8  C022  F019         	movff	drawCircle@color,drawPixel@color
  3958  0007FC  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3959  000800  502E               	movf	drawCircle@y,w,c
  3960  000802  0800               	sublw	0
  3961  000804  241C               	addwf	drawCircle@x0,w,c
  3962  000806  EC58  F00D         	call	_drawPixel
  3963  00080A  D000               	goto	l5439
  3964  00080C                     l5439:
  3965  00080C  502E               	movf	drawCircle@y,w,c
  3966  00080E  5C2C               	subwf	drawCircle@x,w,c
  3967  000810  502D               	movf	drawCircle@x+1,w,c
  3968  000812  0A80               	xorlw	128
  3969  000814  6E24               	movwf	??_drawCircle& (0+255),c
  3970  000816  502F               	movf	drawCircle@y+1,w,c
  3971  000818  0A80               	xorlw	128
  3972  00081A  5824               	subwfb	??_drawCircle& (0+255),w,c
  3973  00081C  A0D8               	btfss	status,0,c
  3974  00081E  D77E               	goto	l5411
  3975  000820  0012               	return		;funcret
  3976  000822                     __end_of_drawCircle:
  3977                           	opt stack 0
  3978                           tblptru	equ	0xFF8
  3979                           tblptrh	equ	0xFF7
  3980                           tblptrl	equ	0xFF6
  3981                           tablat	equ	0xFF5
  3982                           prodh	equ	0xFF4
  3983                           prodl	equ	0xFF3
  3984                           intcon	equ	0xFF2
  3985                           intcon2	equ	0xFF1
  3986                           postinc0	equ	0xFEE
  3987                           wreg	equ	0xFE8
  3988                           postdec1	equ	0xFE5
  3989                           fsr1l	equ	0xFE1
  3990                           postinc2	equ	0xFDE
  3991                           postdec2	equ	0xFDD
  3992                           fsr2h	equ	0xFDA
  3993                           fsr2l	equ	0xFD9
  3994                           status	equ	0xFD8
  3995                           
  3996 ;; *************** function ___awdiv *****************
  3997 ;; Defined at:
  3998 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  3999 ;; Parameters:    Size  Location     Type
  4000 ;;  dividend        2   22[COMRAM] int 
  4001 ;;  divisor         2   24[COMRAM] int 
  4002 ;; Auto vars:     Size  Location     Type
  4003 ;;  quotient        2   28[COMRAM] int 
  4004 ;;  sign            1   27[COMRAM] unsigned char 
  4005 ;;  counter         1   26[COMRAM] unsigned char 
  4006 ;; Return value:  Size  Location     Type
  4007 ;;                  2   22[COMRAM] int 
  4008 ;; Registers used:
  4009 ;;		wreg, status,2, status,0
  4010 ;; Tracked objects:
  4011 ;;		On entry : 0/0
  4012 ;;		On exit  : 0/0
  4013 ;;		Unchanged: 0/0
  4014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4015 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4016 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4017 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4018 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4019 ;;Total ram usage:        8 bytes
  4020 ;; Hardware stack levels used:    1
  4021 ;; Hardware stack levels required when called:    3
  4022 ;; This function calls:
  4023 ;;		Nothing
  4024 ;; This function is called by:
  4025 ;;		_main
  4026 ;; This function uses a non-reentrant model
  4027 ;;
  4028                           
  4029                           	psect	text9
  4030  00125C                     __ptext9:
  4031                           	opt stack 0
  4032  00125C                     ___awdiv:
  4033                           	opt stack 27
  4034                           
  4035                           ;incstack = 0
  4036  00125C  0E00               	movlw	0
  4037  00125E  6E1C               	movwf	___awdiv@sign,c
  4038  001260  AE1A               	btfss	___awdiv@divisor+1,7,c
  4039  001262  D007               	goto	l5479
  4040  001264  6C19               	negf	___awdiv@divisor,c
  4041  001266  1E1A               	comf	___awdiv@divisor+1,f,c
  4042  001268  B0D8               	btfsc	status,0,c
  4043  00126A  2A1A               	incf	___awdiv@divisor+1,f,c
  4044  00126C  0E01               	movlw	1
  4045  00126E  6E1C               	movwf	___awdiv@sign,c
  4046  001270  D000               	goto	l5479
  4047  001272                     l5479:
  4048  001272  AE18               	btfss	___awdiv@dividend+1,7,c
  4049  001274  D007               	goto	l5485
  4050  001276  6C17               	negf	___awdiv@dividend,c
  4051  001278  1E18               	comf	___awdiv@dividend+1,f,c
  4052  00127A  B0D8               	btfsc	status,0,c
  4053  00127C  2A18               	incf	___awdiv@dividend+1,f,c
  4054  00127E  0E01               	movlw	1
  4055  001280  1A1C               	xorwf	___awdiv@sign,f,c
  4056  001282  D000               	goto	l5485
  4057  001284                     l5485:
  4058  001284  0E00               	movlw	0
  4059  001286  6E1E               	movwf	___awdiv@quotient+1,c
  4060  001288  0E00               	movlw	0
  4061  00128A  6E1D               	movwf	___awdiv@quotient,c
  4062  00128C  5019               	movf	___awdiv@divisor,w,c
  4063  00128E  101A               	iorwf	___awdiv@divisor+1,w,c
  4064  001290  B4D8               	btfsc	status,2,c
  4065  001292  D021               	goto	l5507
  4066  001294  0E01               	movlw	1
  4067  001296  6E1B               	movwf	___awdiv@counter,c
  4068  001298  D005               	goto	l5493
  4069  00129A                     l5491:
  4070  00129A  90D8               	bcf	status,0,c
  4071  00129C  3619               	rlcf	___awdiv@divisor,f,c
  4072  00129E  361A               	rlcf	___awdiv@divisor+1,f,c
  4073  0012A0  2A1B               	incf	___awdiv@counter,f,c
  4074  0012A2  D000               	goto	l5493
  4075  0012A4                     l5493:
  4076  0012A4  BE1A               	btfsc	___awdiv@divisor+1,7,c
  4077  0012A6  D002               	goto	l5495
  4078  0012A8  D7F8               	goto	l5491
  4079  0012AA  D000               	goto	l5495
  4080  0012AC                     l5495:
  4081  0012AC  90D8               	bcf	status,0,c
  4082  0012AE  361D               	rlcf	___awdiv@quotient,f,c
  4083  0012B0  361E               	rlcf	___awdiv@quotient+1,f,c
  4084  0012B2  5019               	movf	___awdiv@divisor,w,c
  4085  0012B4  5C17               	subwf	___awdiv@dividend,w,c
  4086  0012B6  501A               	movf	___awdiv@divisor+1,w,c
  4087  0012B8  5818               	subwfb	___awdiv@dividend+1,w,c
  4088  0012BA  A0D8               	btfss	status,0,c
  4089  0012BC  D006               	goto	l5503
  4090  0012BE  5019               	movf	___awdiv@divisor,w,c
  4091  0012C0  5E17               	subwf	___awdiv@dividend,f,c
  4092  0012C2  501A               	movf	___awdiv@divisor+1,w,c
  4093  0012C4  5A18               	subwfb	___awdiv@dividend+1,f,c
  4094  0012C6  801D               	bsf	___awdiv@quotient,0,c
  4095  0012C8  D000               	goto	l5503
  4096  0012CA                     l5503:
  4097  0012CA  90D8               	bcf	status,0,c
  4098  0012CC  321A               	rrcf	___awdiv@divisor+1,f,c
  4099  0012CE  3219               	rrcf	___awdiv@divisor,f,c
  4100  0012D0  2E1B               	decfsz	___awdiv@counter,f,c
  4101  0012D2  D7EC               	goto	l5495
  4102  0012D4  D000               	goto	l5507
  4103  0012D6                     l5507:
  4104  0012D6  501C               	movf	___awdiv@sign,w,c
  4105  0012D8  B4D8               	btfsc	status,2,c
  4106  0012DA  D005               	goto	l5511
  4107  0012DC  6C1D               	negf	___awdiv@quotient,c
  4108  0012DE  1E1E               	comf	___awdiv@quotient+1,f,c
  4109  0012E0  B0D8               	btfsc	status,0,c
  4110  0012E2  2A1E               	incf	___awdiv@quotient+1,f,c
  4111  0012E4  D000               	goto	l5511
  4112  0012E6                     l5511:
  4113  0012E6  C01D  F017         	movff	___awdiv@quotient,?___awdiv
  4114  0012EA  C01E  F018         	movff	___awdiv@quotient+1,?___awdiv+1
  4115  0012EE  D000               	goto	l896
  4116  0012F0                     l896:
  4117  0012F0  0012               	return		;funcret
  4118  0012F2                     __end_of___awdiv:
  4119                           	opt stack 0
  4120                           tblptru	equ	0xFF8
  4121                           tblptrh	equ	0xFF7
  4122                           tblptrl	equ	0xFF6
  4123                           tablat	equ	0xFF5
  4124                           prodh	equ	0xFF4
  4125                           prodl	equ	0xFF3
  4126                           intcon	equ	0xFF2
  4127                           intcon2	equ	0xFF1
  4128                           postinc0	equ	0xFEE
  4129                           wreg	equ	0xFE8
  4130                           postdec1	equ	0xFE5
  4131                           fsr1l	equ	0xFE1
  4132                           postinc2	equ	0xFDE
  4133                           postdec2	equ	0xFDD
  4134                           fsr2h	equ	0xFDA
  4135                           fsr2l	equ	0xFD9
  4136                           status	equ	0xFD8
  4137                           
  4138 ;; *************** function _Wait_One_Sec *****************
  4139 ;; Defined at:
  4140 ;;		line 101 in file "Lab10p1.c"
  4141 ;; Parameters:    Size  Location     Type
  4142 ;;		None
  4143 ;; Auto vars:     Size  Location     Type
  4144 ;;  I               2   16[COMRAM] int 
  4145 ;; Return value:  Size  Location     Type
  4146 ;;		None               void
  4147 ;; Registers used:
  4148 ;;		wreg, status,2, status,0
  4149 ;; Tracked objects:
  4150 ;;		On entry : 0/0
  4151 ;;		On exit  : 0/0
  4152 ;;		Unchanged: 0/0
  4153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4154 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4155 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4156 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4157 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4158 ;;Total ram usage:        2 bytes
  4159 ;; Hardware stack levels used:    1
  4160 ;; Hardware stack levels required when called:    3
  4161 ;; This function calls:
  4162 ;;		Nothing
  4163 ;; This function is called by:
  4164 ;;		_main
  4165 ;; This function uses a non-reentrant model
  4166 ;;
  4167                           
  4168                           	psect	text10
  4169  001B62                     __ptext10:
  4170                           	opt stack 0
  4171  001B62                     _Wait_One_Sec:
  4172                           	opt stack 27
  4173                           
  4174                           ;Lab10p1.c: 103: for (int I = 0; I < 25000; I++);
  4175                           
  4176                           ;incstack = 0
  4177  001B62  0E00               	movlw	0
  4178  001B64  6E12               	movwf	Wait_One_Sec@I+1,c
  4179  001B66  0E00               	movlw	0
  4180  001B68  6E11               	movwf	Wait_One_Sec@I,c
  4181  001B6A                     l5015:
  4182  001B6A  BE12               	btfsc	Wait_One_Sec@I+1,7,c
  4183  001B6C  D008               	goto	l5019
  4184  001B6E  0EA8               	movlw	168
  4185  001B70  5C11               	subwf	Wait_One_Sec@I,w,c
  4186  001B72  0E61               	movlw	97
  4187  001B74  5812               	subwfb	Wait_One_Sec@I+1,w,c
  4188  001B76  B0D8               	btfsc	status,0,c
  4189  001B78  D005               	goto	l156
  4190  001B7A  D001               	goto	l5019
  4191  001B7C  D003               	goto	l156
  4192  001B7E                     l5019:
  4193  001B7E  4A11               	infsnz	Wait_One_Sec@I,f,c
  4194  001B80  2A12               	incf	Wait_One_Sec@I+1,f,c
  4195  001B82  D7F3               	goto	l5015
  4196  001B84                     l156:
  4197  001B84  0012               	return		;funcret
  4198  001B86                     __end_of_Wait_One_Sec:
  4199                           	opt stack 0
  4200                           tblptru	equ	0xFF8
  4201                           tblptrh	equ	0xFF7
  4202                           tblptrl	equ	0xFF6
  4203                           tablat	equ	0xFF5
  4204                           prodh	equ	0xFF4
  4205                           prodl	equ	0xFF3
  4206                           intcon	equ	0xFF2
  4207                           intcon2	equ	0xFF1
  4208                           postinc0	equ	0xFEE
  4209                           wreg	equ	0xFE8
  4210                           postdec1	equ	0xFE5
  4211                           fsr1l	equ	0xFE1
  4212                           postinc2	equ	0xFDE
  4213                           postdec2	equ	0xFDD
  4214                           fsr2h	equ	0xFDA
  4215                           fsr2l	equ	0xFD9
  4216                           status	equ	0xFD8
  4217                           
  4218 ;; *************** function _Initialize_Screen *****************
  4219 ;; Defined at:
  4220 ;;		line 210 in file "Lab10p1.c"
  4221 ;; Parameters:    Size  Location     Type
  4222 ;;		None
  4223 ;; Auto vars:     Size  Location     Type
  4224 ;;		None
  4225 ;; Return value:  Size  Location     Type
  4226 ;;		None               void
  4227 ;; Registers used:
  4228 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4229 ;; Tracked objects:
  4230 ;;		On entry : 0/0
  4231 ;;		On exit  : 0/0
  4232 ;;		Unchanged: 0/0
  4233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4234 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4235 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4236 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4237 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4238 ;;Total ram usage:        0 bytes
  4239 ;; Hardware stack levels used:    1
  4240 ;; Hardware stack levels required when called:   10
  4241 ;; This function calls:
  4242 ;;		_LCD_Reset
  4243 ;;		_TFT_GreenTab_Initialize
  4244 ;;		_drawtext
  4245 ;;		_fillScreen
  4246 ;;		_strcpy
  4247 ;; This function is called by:
  4248 ;;		_main
  4249 ;; This function uses a non-reentrant model
  4250 ;;
  4251                           
  4252                           	psect	text11
  4253  0012F2                     __ptext11:
  4254                           	opt stack 0
  4255  0012F2                     _Initialize_Screen:
  4256                           	opt stack 20
  4257                           
  4258                           ;Lab10p1.c: 212: LCD_Reset();
  4259                           
  4260                           ;incstack = 0
  4261  0012F2  EC2D  F00E         	call	_LCD_Reset	;wreg free
  4262                           
  4263                           ;Lab10p1.c: 213: TFT_GreenTab_Initialize();
  4264  0012F6  EC88  F00D         	call	_TFT_GreenTab_Initialize	;wreg free
  4265                           
  4266                           ;Lab10p1.c: 214: fillScreen(0x0000);
  4267  0012FA  0E00               	movlw	0
  4268  0012FC  6E25               	movwf	fillScreen@color+1,c
  4269  0012FE  0E00               	movlw	0
  4270  001300  6E24               	movwf	fillScreen@color,c
  4271  001302  ECF3  F00D         	call	_fillScreen	;wreg free
  4272                           
  4273                           ;Lab10p1.c: 217: txt = buffer;
  4274  001306  0EBF               	movlw	low _buffer
  4275  001308  6E50               	movwf	_txt,c
  4276  00130A  0E00               	movlw	high _buffer
  4277  00130C  6E51               	movwf	_txt+1,c
  4278                           
  4279                           ;Lab10p1.c: 218: strcpy(txt, "ECE3301L Fall 21-S2");
  4280  00130E  C050  F011         	movff	_txt,strcpy@to
  4281  001312  C051  F012         	movff	_txt+1,strcpy@to+1
  4282  001316  0EC2               	movlw	low STR_5
  4283  001318  6E13               	movwf	strcpy@from,c
  4284  00131A  0EFF               	movlw	high STR_5
  4285  00131C  6E14               	movwf	strcpy@from+1,c
  4286  00131E  EC3F  F00D         	call	_strcpy	;wreg free
  4287                           
  4288                           ;Lab10p1.c: 219: drawtext(2, 2, txt, 0xFFFF, 0x0000, 1);
  4289  001322  0E02               	movlw	2
  4290  001324  6E39               	movwf	drawtext@y,c
  4291  001326  C050  F03A         	movff	_txt,drawtext@_text
  4292  00132A  C051  F03B         	movff	_txt+1,drawtext@_text+1
  4293  00132E  0EFF               	movlw	255
  4294  001330  6E3D               	movwf	drawtext@color+1,c
  4295  001332  683C               	setf	drawtext@color,c
  4296  001334  0E00               	movlw	0
  4297  001336  6E3F               	movwf	drawtext@bg+1,c
  4298  001338  0E00               	movlw	0
  4299  00133A  6E3E               	movwf	drawtext@bg,c
  4300  00133C  0E01               	movlw	1
  4301  00133E  6E40               	movwf	drawtext@size,c
  4302  001340  0E02               	movlw	2
  4303  001342  EC40  F007         	call	_drawtext
  4304                           
  4305                           ;Lab10p1.c: 221: strcpy(txt, "LAB 10 ");
  4306  001346  C050  F011         	movff	_txt,strcpy@to
  4307  00134A  C051  F012         	movff	_txt+1,strcpy@to+1
  4308  00134E  0EF6               	movlw	low STR_6
  4309  001350  6E13               	movwf	strcpy@from,c
  4310  001352  0EFF               	movlw	high STR_6
  4311  001354  6E14               	movwf	strcpy@from+1,c
  4312  001356  EC3F  F00D         	call	_strcpy	;wreg free
  4313                           
  4314                           ;Lab10p1.c: 222: drawtext(50, 10, txt, 0xFFFF, 0x0000, 1);
  4315  00135A  0E0A               	movlw	10
  4316  00135C  6E39               	movwf	drawtext@y,c
  4317  00135E  C050  F03A         	movff	_txt,drawtext@_text
  4318  001362  C051  F03B         	movff	_txt+1,drawtext@_text+1
  4319  001366  0EFF               	movlw	255
  4320  001368  6E3D               	movwf	drawtext@color+1,c
  4321  00136A  683C               	setf	drawtext@color,c
  4322  00136C  0E00               	movlw	0
  4323  00136E  6E3F               	movwf	drawtext@bg+1,c
  4324  001370  0E00               	movlw	0
  4325  001372  6E3E               	movwf	drawtext@bg,c
  4326  001374  0E01               	movlw	1
  4327  001376  6E40               	movwf	drawtext@size,c
  4328  001378  0E32               	movlw	50
  4329  00137A  EC40  F007         	call	_drawtext
  4330  00137E  0012               	return		;funcret
  4331  001380                     __end_of_Initialize_Screen:
  4332                           	opt stack 0
  4333                           tblptru	equ	0xFF8
  4334                           tblptrh	equ	0xFF7
  4335                           tblptrl	equ	0xFF6
  4336                           tablat	equ	0xFF5
  4337                           prodh	equ	0xFF4
  4338                           prodl	equ	0xFF3
  4339                           intcon	equ	0xFF2
  4340                           intcon2	equ	0xFF1
  4341                           postinc0	equ	0xFEE
  4342                           wreg	equ	0xFE8
  4343                           postdec1	equ	0xFE5
  4344                           fsr1l	equ	0xFE1
  4345                           postinc2	equ	0xFDE
  4346                           postdec2	equ	0xFDD
  4347                           fsr2h	equ	0xFDA
  4348                           fsr2l	equ	0xFD9
  4349                           status	equ	0xFD8
  4350                           
  4351 ;; *************** function _strcpy *****************
  4352 ;; Defined at:
  4353 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strcpy.c"
  4354 ;; Parameters:    Size  Location     Type
  4355 ;;  to              2   16[COMRAM] PTR unsigned char 
  4356 ;;		 -> NULL(0), buffer(31), 
  4357 ;;  from            2   18[COMRAM] PTR const unsigned char 
  4358 ;;		 -> STR_6(8), STR_5(20), 
  4359 ;; Auto vars:     Size  Location     Type
  4360 ;;  cp              2   20[COMRAM] PTR unsigned char 
  4361 ;;		 -> NULL(0), buffer(31), 
  4362 ;; Return value:  Size  Location     Type
  4363 ;;                  2   16[COMRAM] PTR unsigned char 
  4364 ;; Registers used:
  4365 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  4366 ;; Tracked objects:
  4367 ;;		On entry : 0/0
  4368 ;;		On exit  : 0/0
  4369 ;;		Unchanged: 0/0
  4370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4371 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4372 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4373 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4374 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4375 ;;Total ram usage:        6 bytes
  4376 ;; Hardware stack levels used:    1
  4377 ;; Hardware stack levels required when called:    3
  4378 ;; This function calls:
  4379 ;;		Nothing
  4380 ;; This function is called by:
  4381 ;;		_Initialize_Screen
  4382 ;; This function uses a non-reentrant model
  4383 ;;
  4384                           
  4385                           	psect	text12
  4386  001A7E                     __ptext12:
  4387                           	opt stack 0
  4388  001A7E                     _strcpy:
  4389                           	opt stack 26
  4390                           
  4391                           ;incstack = 0
  4392  001A7E  C011  F015         	movff	strcpy@to,strcpy@cp
  4393  001A82  C012  F016         	movff	strcpy@to+1,strcpy@cp+1
  4394  001A86  D005               	goto	l4885
  4395  001A88                     l4883:
  4396  001A88  4A15               	infsnz	strcpy@cp,f,c
  4397  001A8A  2A16               	incf	strcpy@cp+1,f,c
  4398  001A8C  4A13               	infsnz	strcpy@from,f,c
  4399  001A8E  2A14               	incf	strcpy@from+1,f,c
  4400  001A90  D000               	goto	l4885
  4401  001A92                     l4885:
  4402  001A92  C013  FFF6         	movff	strcpy@from,tblptrl
  4403  001A96  C014  FFF7         	movff	strcpy@from+1,tblptrh
  4404  001A9A                     	if	0	;tblptru may be non-zero
  4405  001A9A                     	endif
  4406  001A9A                     	if	0	;tblptru may be non-zero
  4407  001A9A                     	endif
  4408  001A9A  C015  FFD9         	movff	strcpy@cp,fsr2l
  4409  001A9E  C016  FFDA         	movff	strcpy@cp+1,fsr2h
  4410  001AA2  0008               	tblrd		*
  4411  001AA4  CFF5 FFDF          	movff	tablat,indf2
  4412  001AA8  50DF               	movf	indf2,w,c
  4413  001AAA  A4D8               	btfss	status,2,c
  4414  001AAC  D7ED               	goto	l4883
  4415                           
  4416                           ;	Return value of _strcpy is never used
  4417  001AAE  0012               	return		;funcret
  4418  001AB0                     __end_of_strcpy:
  4419                           	opt stack 0
  4420                           tblptru	equ	0xFF8
  4421                           tblptrh	equ	0xFF7
  4422                           tblptrl	equ	0xFF6
  4423                           tablat	equ	0xFF5
  4424                           prodh	equ	0xFF4
  4425                           prodl	equ	0xFF3
  4426                           intcon	equ	0xFF2
  4427                           intcon2	equ	0xFF1
  4428                           postinc0	equ	0xFEE
  4429                           wreg	equ	0xFE8
  4430                           postdec1	equ	0xFE5
  4431                           fsr1l	equ	0xFE1
  4432                           indf2	equ	0xFDF
  4433                           postinc2	equ	0xFDE
  4434                           postdec2	equ	0xFDD
  4435                           fsr2h	equ	0xFDA
  4436                           fsr2l	equ	0xFD9
  4437                           status	equ	0xFD8
  4438                           
  4439 ;; *************** function _fillScreen *****************
  4440 ;; Defined at:
  4441 ;;		line 619 in file "ST7735_TFT.c"
  4442 ;; Parameters:    Size  Location     Type
  4443 ;;  color           2   35[COMRAM] unsigned int 
  4444 ;; Auto vars:     Size  Location     Type
  4445 ;;		None
  4446 ;; Return value:  Size  Location     Type
  4447 ;;		None               void
  4448 ;; Registers used:
  4449 ;;		wreg, status,2, status,0, cstack
  4450 ;; Tracked objects:
  4451 ;;		On entry : 0/0
  4452 ;;		On exit  : 0/0
  4453 ;;		Unchanged: 0/0
  4454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4455 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4456 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4457 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4458 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4459 ;;Total ram usage:        2 bytes
  4460 ;; Hardware stack levels used:    1
  4461 ;; Hardware stack levels required when called:    7
  4462 ;; This function calls:
  4463 ;;		_fillRectangle
  4464 ;; This function is called by:
  4465 ;;		_Initialize_Screen
  4466 ;; This function uses a non-reentrant model
  4467 ;;
  4468                           
  4469                           	psect	text13
  4470  001BE6                     __ptext13:
  4471                           	opt stack 0
  4472  001BE6                     _fillScreen:
  4473                           	opt stack 22
  4474                           
  4475                           ;ST7735_TFT.c: 621: fillRectangle(0, 0, 128, 160, color);
  4476                           
  4477                           ;incstack = 0
  4478  001BE6  0E00               	movlw	0
  4479  001BE8  6E18               	movwf	fillRectangle@y,c
  4480  001BEA  0E80               	movlw	128
  4481  001BEC  6E19               	movwf	fillRectangle@w,c
  4482  001BEE  0EA0               	movlw	160
  4483  001BF0  6E1A               	movwf	fillRectangle@h,c
  4484  001BF2  C024  F01B         	movff	fillScreen@color,fillRectangle@color
  4485  001BF6  C025  F01C         	movff	fillScreen@color+1,fillRectangle@color+1
  4486  001BFA  0E00               	movlw	0
  4487  001BFC  ECC0  F008         	call	_fillRectangle
  4488  001C00  0012               	return		;funcret
  4489  001C02                     __end_of_fillScreen:
  4490                           	opt stack 0
  4491                           tblptru	equ	0xFF8
  4492                           tblptrh	equ	0xFF7
  4493                           tblptrl	equ	0xFF6
  4494                           tablat	equ	0xFF5
  4495                           prodh	equ	0xFF4
  4496                           prodl	equ	0xFF3
  4497                           intcon	equ	0xFF2
  4498                           intcon2	equ	0xFF1
  4499                           postinc0	equ	0xFEE
  4500                           wreg	equ	0xFE8
  4501                           postdec1	equ	0xFE5
  4502                           fsr1l	equ	0xFE1
  4503                           indf2	equ	0xFDF
  4504                           postinc2	equ	0xFDE
  4505                           postdec2	equ	0xFDD
  4506                           fsr2h	equ	0xFDA
  4507                           fsr2l	equ	0xFD9
  4508                           status	equ	0xFD8
  4509                           
  4510 ;; *************** function _fillRectangle *****************
  4511 ;; Defined at:
  4512 ;;		line 503 in file "ST7735_TFT.c"
  4513 ;; Parameters:    Size  Location     Type
  4514 ;;  x               1    wreg     unsigned char 
  4515 ;;  y               1   23[COMRAM] unsigned char 
  4516 ;;  w               1   24[COMRAM] unsigned char 
  4517 ;;  h               1   25[COMRAM] unsigned char 
  4518 ;;  color           2   26[COMRAM] unsigned int 
  4519 ;; Auto vars:     Size  Location     Type
  4520 ;;  x               1   34[COMRAM] unsigned char 
  4521 ;;  lo              1   33[COMRAM] unsigned char 
  4522 ;;  hi              1   32[COMRAM] unsigned char 
  4523 ;; Return value:  Size  Location     Type
  4524 ;;		None               void
  4525 ;; Registers used:
  4526 ;;		wreg, status,2, status,0, cstack
  4527 ;; Tracked objects:
  4528 ;;		On entry : 0/0
  4529 ;;		On exit  : 0/0
  4530 ;;		Unchanged: 0/0
  4531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4532 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4533 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4534 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4535 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4536 ;;Total ram usage:       12 bytes
  4537 ;; Hardware stack levels used:    1
  4538 ;; Hardware stack levels required when called:    6
  4539 ;; This function calls:
  4540 ;;		_setAddrWindow
  4541 ;;		_spiwrite
  4542 ;; This function is called by:
  4543 ;;		_fillScreen
  4544 ;; This function uses a non-reentrant model
  4545 ;;
  4546                           
  4547                           	psect	text14
  4548  001180                     __ptext14:
  4549                           	opt stack 0
  4550  001180                     _fillRectangle:
  4551                           	opt stack 22
  4552                           
  4553                           ;incstack = 0
  4554                           ;fillRectangle@x stored from wreg
  4555  001180  6E23               	movwf	fillRectangle@x,c
  4556                           
  4557                           ;ST7735_TFT.c: 505: unsigned char hi, lo;
  4558                           ;ST7735_TFT.c: 506: if((x >= 128) || (y >= 160))
  4559  001182  0E80               	movlw	128
  4560  001184  6023               	cpfslt	fillRectangle@x,c
  4561  001186  D069               	goto	l531
  4562  001188  0E9F               	movlw	159
  4563  00118A  6418               	cpfsgt	fillRectangle@y,c
  4564  00118C  D001               	goto	l4755
  4565                           
  4566                           ;ST7735_TFT.c: 507: return;
  4567  00118E  D065               	goto	l531
  4568  001190                     l4755:
  4569                           
  4570                           ;ST7735_TFT.c: 508: if((x + w - 1) >= 128)
  4571  001190  0EFF               	movlw	255
  4572  001192  6E1D               	movwf	??_fillRectangle& (0+255),c
  4573  001194  0EFF               	movlw	255
  4574  001196  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  4575  001198  5019               	movf	fillRectangle@w,w,c
  4576  00119A  C023  F01F         	movff	fillRectangle@x,??_fillRectangle+2
  4577  00119E  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  4578  0011A0  261F               	addwf	??_fillRectangle+2,f,c
  4579  0011A2  0E00               	movlw	0
  4580  0011A4  2220               	addwfc	??_fillRectangle+3,f,c
  4581  0011A6  501D               	movf	??_fillRectangle,w,c
  4582  0011A8  261F               	addwf	??_fillRectangle+2,f,c
  4583  0011AA  501E               	movf	??_fillRectangle+1,w,c
  4584  0011AC  2220               	addwfc	??_fillRectangle+3,f,c
  4585  0011AE  BE20               	btfsc	??_fillRectangle+3,7,c
  4586  0011B0  D00A               	goto	l532
  4587  0011B2  5020               	movf	??_fillRectangle+3,w,c
  4588  0011B4  E104               	bnz	u3590
  4589  0011B6  0E80               	movlw	128
  4590  0011B8  5C1F               	subwf	??_fillRectangle+2,w,c
  4591  0011BA  A0D8               	btfss	status,0,c
  4592  0011BC  D004               	goto	l532
  4593  0011BE                     u3590:
  4594                           
  4595                           ;ST7735_TFT.c: 509: w = 128 - x;
  4596  0011BE  5023               	movf	fillRectangle@x,w,c
  4597  0011C0  0800               	sublw	0
  4598  0011C2  0F80               	addlw	128
  4599  0011C4  6E19               	movwf	fillRectangle@w,c
  4600  0011C6                     l532:
  4601                           
  4602                           ;ST7735_TFT.c: 510: if((y + h - 1) >= 160)
  4603  0011C6  0EFF               	movlw	255
  4604  0011C8  6E1D               	movwf	??_fillRectangle& (0+255),c
  4605  0011CA  0EFF               	movlw	255
  4606  0011CC  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  4607  0011CE  501A               	movf	fillRectangle@h,w,c
  4608  0011D0  C018  F01F         	movff	fillRectangle@y,??_fillRectangle+2
  4609  0011D4  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  4610  0011D6  261F               	addwf	??_fillRectangle+2,f,c
  4611  0011D8  0E00               	movlw	0
  4612  0011DA  2220               	addwfc	??_fillRectangle+3,f,c
  4613  0011DC  501D               	movf	??_fillRectangle,w,c
  4614  0011DE  261F               	addwf	??_fillRectangle+2,f,c
  4615  0011E0  501E               	movf	??_fillRectangle+1,w,c
  4616  0011E2  2220               	addwfc	??_fillRectangle+3,f,c
  4617  0011E4  BE20               	btfsc	??_fillRectangle+3,7,c
  4618  0011E6  D00B               	goto	l4761
  4619  0011E8  5020               	movf	??_fillRectangle+3,w,c
  4620  0011EA  E104               	bnz	u3600
  4621  0011EC  0EA0               	movlw	160
  4622  0011EE  5C1F               	subwf	??_fillRectangle+2,w,c
  4623  0011F0  A0D8               	btfss	status,0,c
  4624  0011F2  D005               	goto	l4761
  4625  0011F4                     u3600:
  4626                           
  4627                           ;ST7735_TFT.c: 511: h = 160 - y;
  4628  0011F4  5018               	movf	fillRectangle@y,w,c
  4629  0011F6  0800               	sublw	0
  4630  0011F8  0FA0               	addlw	160
  4631  0011FA  6E1A               	movwf	fillRectangle@h,c
  4632  0011FC  D000               	goto	l4761
  4633  0011FE                     l4761:
  4634                           
  4635                           ;ST7735_TFT.c: 512: setAddrWindow(x, y, x+w-1, y+h-1);
  4636  0011FE  C018  F014         	movff	fillRectangle@y,setAddrWindow@y0
  4637  001202  5023               	movf	fillRectangle@x,w,c
  4638  001204  2419               	addwf	fillRectangle@w,w,c
  4639  001206  6E1D               	movwf	??_fillRectangle& (0+255),c
  4640  001208  041D               	decf	??_fillRectangle,w,c
  4641  00120A  6E15               	movwf	setAddrWindow@x1,c
  4642  00120C  5018               	movf	fillRectangle@y,w,c
  4643  00120E  241A               	addwf	fillRectangle@h,w,c
  4644  001210  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  4645  001212  041E               	decf	??_fillRectangle+1,w,c
  4646  001214  6E16               	movwf	setAddrWindow@y1,c
  4647  001216  5023               	movf	fillRectangle@x,w,c
  4648  001218  EC16  F00C         	call	_setAddrWindow
  4649                           
  4650                           ;ST7735_TFT.c: 513: hi = color >> 8; lo = color;
  4651  00121C  501C               	movf	fillRectangle@color+1,w,c
  4652  00121E  6E21               	movwf	fillRectangle@hi,c
  4653  001220  C01B  F022         	movff	fillRectangle@color,fillRectangle@lo
  4654                           
  4655                           ;ST7735_TFT.c: 514: PORTCbits.RC0 = 1;
  4656  001224  8082               	bsf	3970,0,c	;volatile
  4657                           
  4658                           ;ST7735_TFT.c: 515: PORTCbits.RC1 = 0;
  4659  001226  9282               	bcf	3970,1,c	;volatile
  4660                           
  4661                           ;ST7735_TFT.c: 517: for(y=h; y>0; y--) {
  4662  001228  C01A  F018         	movff	fillRectangle@h,fillRectangle@y
  4663  00122C                     l4773:
  4664  00122C  5018               	movf	fillRectangle@y,w,c
  4665  00122E  B4D8               	btfsc	status,2,c
  4666  001230  D013               	goto	l535
  4667  001232  D001               	goto	l534
  4668  001234  D011               	goto	l535
  4669  001236                     l534:
  4670                           
  4671                           ;ST7735_TFT.c: 518: for(x = w; x > 0; x--) {
  4672  001236  C019  F023         	movff	fillRectangle@w,fillRectangle@x
  4673  00123A                     l4777:
  4674  00123A  5023               	movf	fillRectangle@x,w,c
  4675  00123C  B4D8               	btfsc	status,2,c
  4676  00123E  D00A               	goto	l4787
  4677  001240  D001               	goto	l4781
  4678  001242  D008               	goto	l4787
  4679  001244                     l4781:
  4680                           
  4681                           ;ST7735_TFT.c: 519: spiwrite(hi);
  4682  001244  5021               	movf	fillRectangle@hi,w,c
  4683  001246  EC19  F00E         	call	_spiwrite
  4684                           
  4685                           ;ST7735_TFT.c: 520: spiwrite(lo);
  4686  00124A  5022               	movf	fillRectangle@lo,w,c
  4687  00124C  EC19  F00E         	call	_spiwrite
  4688  001250  0623               	decf	fillRectangle@x,f,c
  4689  001252  D7F3               	goto	l4777
  4690  001254                     l4787:
  4691  001254  0618               	decf	fillRectangle@y,f,c
  4692  001256  D7EA               	goto	l4773
  4693  001258                     l535:
  4694                           
  4695                           ;ST7735_TFT.c: 521: }
  4696                           ;ST7735_TFT.c: 522: }
  4697                           ;ST7735_TFT.c: 523: PORTCbits.RC1 = 1;
  4698  001258  8282               	bsf	3970,1,c	;volatile
  4699  00125A                     l531:
  4700  00125A  0012               	return		;funcret
  4701  00125C                     __end_of_fillRectangle:
  4702                           	opt stack 0
  4703                           tblptru	equ	0xFF8
  4704                           tblptrh	equ	0xFF7
  4705                           tblptrl	equ	0xFF6
  4706                           tablat	equ	0xFF5
  4707                           prodh	equ	0xFF4
  4708                           prodl	equ	0xFF3
  4709                           intcon	equ	0xFF2
  4710                           intcon2	equ	0xFF1
  4711                           postinc0	equ	0xFEE
  4712                           wreg	equ	0xFE8
  4713                           postdec1	equ	0xFE5
  4714                           fsr1l	equ	0xFE1
  4715                           indf2	equ	0xFDF
  4716                           postinc2	equ	0xFDE
  4717                           postdec2	equ	0xFDD
  4718                           fsr2h	equ	0xFDA
  4719                           fsr2l	equ	0xFD9
  4720                           status	equ	0xFD8
  4721                           
  4722 ;; *************** function _drawtext *****************
  4723 ;; Defined at:
  4724 ;;		line 474 in file "ST7735_TFT.c"
  4725 ;; Parameters:    Size  Location     Type
  4726 ;;  x               1    wreg     unsigned char 
  4727 ;;  y               1   56[COMRAM] unsigned char 
  4728 ;;  _text           2   57[COMRAM] PTR unsigned char 
  4729 ;;		 -> NULL(0), buffer(31), txt1(84), 
  4730 ;;  color           2   59[COMRAM] unsigned int 
  4731 ;;  bg              2   61[COMRAM] unsigned int 
  4732 ;;  size            1   63[COMRAM] unsigned char 
  4733 ;; Auto vars:     Size  Location     Type
  4734 ;;  x               1    0[BANK0 ] unsigned char 
  4735 ;;  i               2    3[BANK0 ] unsigned int 
  4736 ;;  textsize        2    1[BANK0 ] unsigned int 
  4737 ;;  cursor_x        1    6[BANK0 ] unsigned char 
  4738 ;;  cursor_y        1    5[BANK0 ] unsigned char 
  4739 ;; Return value:  Size  Location     Type
  4740 ;;		None               void
  4741 ;; Registers used:
  4742 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4743 ;; Tracked objects:
  4744 ;;		On entry : 0/0
  4745 ;;		On exit  : 0/0
  4746 ;;		Unchanged: 0/0
  4747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4748 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4749 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4750 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4751 ;;      Totals:        10       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4752 ;;Total ram usage:       17 bytes
  4753 ;; Hardware stack levels used:    1
  4754 ;; Hardware stack levels required when called:    9
  4755 ;; This function calls:
  4756 ;;		_drawChar
  4757 ;;		_strlen
  4758 ;; This function is called by:
  4759 ;;		_main
  4760 ;;		_Initialize_Screen
  4761 ;; This function uses a non-reentrant model
  4762 ;;
  4763                           
  4764                           	psect	text15
  4765  000E80                     __ptext15:
  4766                           	opt stack 0
  4767  000E80                     _drawtext:
  4768                           	opt stack 21
  4769                           
  4770                           ;incstack = 0
  4771                           ;drawtext@x stored from wreg
  4772  000E80  0100               	movlb	0	; () banked
  4773  000E82  6FDE               	movwf	drawtext@x& (0+255),b
  4774                           
  4775                           ; BSR set to: 0
  4776                           ;ST7735_TFT.c: 476: unsigned char cursor_x, cursor_y;
  4777                           ;ST7735_TFT.c: 477: unsigned int textsize, i;
  4778                           ;ST7735_TFT.c: 478: cursor_x = x, cursor_y = y;
  4779  000E84  C0DE  F0E4         	movff	drawtext@x,drawtext@cursor_x
  4780                           
  4781                           ; BSR set to: 0
  4782  000E88  C039  F0E3         	movff	drawtext@y,drawtext@cursor_y
  4783                           
  4784                           ; BSR set to: 0
  4785                           ;ST7735_TFT.c: 479: textsize = strlen(_text);
  4786  000E8C  C03A  F011         	movff	drawtext@_text,strlen@s
  4787  000E90  C03B  F012         	movff	drawtext@_text+1,strlen@s+1
  4788  000E94  ECA6  F00C         	call	_strlen	;wreg free
  4789  000E98  C011  F0DF         	movff	?_strlen,drawtext@textsize
  4790  000E9C  C012  F0E0         	movff	?_strlen+1,drawtext@textsize+1
  4791                           
  4792                           ;ST7735_TFT.c: 480: for(i = 0; i < textsize; i++){
  4793  000EA0  0E00               	movlw	0
  4794  000EA2  0100               	movlb	0	; () banked
  4795  000EA4  6FE2               	movwf	(drawtext@i+1)& (0+255),b
  4796  000EA6  0E00               	movlw	0
  4797  000EA8  6FE1               	movwf	drawtext@i& (0+255),b
  4798  000EAA  D064               	goto	l4855
  4799  000EAC                     l4829:
  4800                           
  4801                           ; BSR set to: 0
  4802                           ;ST7735_TFT.c: 481: if(wrap && ((cursor_x + size * 5) > 128)){
  4803  000EAC  506F               	movf	_wrap,w,c
  4804  000EAE  B4D8               	btfsc	status,2,c
  4805  000EB0  D034               	goto	l4845
  4806                           
  4807                           ; BSR set to: 0
  4808  000EB2  5040               	movf	drawtext@size,w,c
  4809  000EB4  0D05               	mullw	5
  4810  000EB6  0100               	movlb	0	; () banked
  4811  000EB8  51E4               	movf	drawtext@cursor_x& (0+255),w,b
  4812  000EBA  6E41               	movwf	??_drawtext& (0+255),c
  4813  000EBC  6A42               	clrf	(??_drawtext+1)& (0+255),c
  4814  000EBE  50F3               	movf	prodl,w,c
  4815  000EC0  2641               	addwf	??_drawtext,f,c
  4816  000EC2  50F4               	movf	prodh,w,c
  4817  000EC4  2242               	addwfc	??_drawtext+1,f,c
  4818  000EC6  BE42               	btfsc	??_drawtext+1,7,c
  4819  000EC8  D028               	goto	l4845
  4820  000ECA  5042               	movf	??_drawtext+1,w,c
  4821  000ECC  E104               	bnz	u3670
  4822  000ECE  0E81               	movlw	129
  4823  000ED0  5C41               	subwf	??_drawtext,w,c
  4824  000ED2  A0D8               	btfss	status,0,c
  4825  000ED4  D022               	goto	l4845
  4826  000ED6                     u3670:
  4827                           
  4828                           ; BSR set to: 0
  4829                           ;ST7735_TFT.c: 482: cursor_x = 0;
  4830  000ED6  0E00               	movlw	0
  4831  000ED8  0100               	movlb	0	; () banked
  4832  000EDA  6FE4               	movwf	drawtext@cursor_x& (0+255),b
  4833                           
  4834                           ; BSR set to: 0
  4835                           ;ST7735_TFT.c: 483: cursor_y = cursor_y + size * 7 + 3 ;
  4836  000EDC  5040               	movf	drawtext@size,w,c
  4837  000EDE  0D07               	mullw	7
  4838  000EE0  50F3               	movf	prodl,w,c
  4839  000EE2  0100               	movlb	0	; () banked
  4840  000EE4  25E3               	addwf	drawtext@cursor_y& (0+255),w,b
  4841  000EE6  0F03               	addlw	3
  4842  000EE8  0100               	movlb	0	; () banked
  4843  000EEA  6FE3               	movwf	drawtext@cursor_y& (0+255),b
  4844                           
  4845                           ; BSR set to: 0
  4846                           ;ST7735_TFT.c: 484: if(cursor_y > 160) cursor_y = 160;
  4847  000EEC  0EA0               	movlw	160
  4848  000EEE  0100               	movlb	0	; () banked
  4849  000EF0  65E3               	cpfsgt	drawtext@cursor_y& (0+255),b
  4850  000EF2  D004               	goto	l4841
  4851                           
  4852                           ; BSR set to: 0
  4853  000EF4  0EA0               	movlw	160
  4854  000EF6  0100               	movlb	0	; () banked
  4855  000EF8  6FE3               	movwf	drawtext@cursor_y& (0+255),b
  4856  000EFA  D000               	goto	l4841
  4857  000EFC                     l4841:
  4858                           
  4859                           ; BSR set to: 0
  4860                           ;ST7735_TFT.c: 485: if(_text[i] == 0x20) goto _skip; }
  4861  000EFC  0100               	movlb	0	; () banked
  4862  000EFE  51E1               	movf	drawtext@i& (0+255),w,b
  4863  000F00  243A               	addwf	drawtext@_text,w,c
  4864  000F02  6ED9               	movwf	fsr2l,c
  4865  000F04  0100               	movlb	0	; () banked
  4866  000F06  51E2               	movf	(drawtext@i+1)& (0+255),w,b
  4867  000F08  203B               	addwfc	drawtext@_text+1,w,c
  4868  000F0A  6EDA               	movwf	fsr2h,c
  4869  000F0C  0E20               	movlw	32
  4870  000F0E  18DE               	xorwf	postinc2,w,c
  4871  000F10  B4D8               	btfsc	status,2,c
  4872  000F12  D02C               	goto	l4853
  4873  000F14  D002               	goto	l4845
  4874                           
  4875                           ; BSR set to: 0
  4876  000F16  D02A               	goto	l4853
  4877                           
  4878                           ; BSR set to: 0
  4879  000F18  D000               	goto	l4845
  4880  000F1A                     l4845:
  4881                           
  4882                           ; BSR set to: 0
  4883                           ;ST7735_TFT.c: 486: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
  4884  000F1A  C0E3  F02E         	movff	drawtext@cursor_y,drawChar@y
  4885  000F1E  0100               	movlb	0	; () banked
  4886  000F20  51E1               	movf	drawtext@i& (0+255),w,b
  4887  000F22  243A               	addwf	drawtext@_text,w,c
  4888  000F24  6ED9               	movwf	fsr2l,c
  4889  000F26  0100               	movlb	0	; () banked
  4890  000F28  51E2               	movf	(drawtext@i+1)& (0+255),w,b
  4891  000F2A  203B               	addwfc	drawtext@_text+1,w,c
  4892  000F2C  6EDA               	movwf	fsr2h,c
  4893  000F2E  50DF               	movf	indf2,w,c
  4894  000F30  6E2F               	movwf	drawChar@c,c
  4895  000F32  C03C  F030         	movff	drawtext@color,drawChar@color
  4896  000F36  C03D  F031         	movff	drawtext@color+1,drawChar@color+1
  4897  000F3A  C03E  F032         	movff	drawtext@bg,drawChar@bg
  4898  000F3E  C03F  F033         	movff	drawtext@bg+1,drawChar@bg+1
  4899  000F42  C040  F034         	movff	drawtext@size,drawChar@size
  4900  000F46  0100               	movlb	0	; () banked
  4901  000F48  51E4               	movf	drawtext@cursor_x& (0+255),w,b
  4902  000F4A  EC71  F005         	call	_drawChar
  4903                           
  4904                           ;ST7735_TFT.c: 487: cursor_x = cursor_x + size * 6;
  4905  000F4E  5040               	movf	drawtext@size,w,c
  4906  000F50  0D06               	mullw	6
  4907  000F52  50F3               	movf	prodl,w,c
  4908  000F54  0100               	movlb	0	; () banked
  4909  000F56  25E4               	addwf	drawtext@cursor_x& (0+255),w,b
  4910  000F58  0100               	movlb	0	; () banked
  4911  000F5A  6FE4               	movwf	drawtext@cursor_x& (0+255),b
  4912                           
  4913                           ; BSR set to: 0
  4914                           ;ST7735_TFT.c: 488: if(cursor_x > 128) cursor_x = 128;
  4915  000F5C  0E80               	movlw	128
  4916  000F5E  0100               	movlb	0	; () banked
  4917  000F60  65E4               	cpfsgt	drawtext@cursor_x& (0+255),b
  4918  000F62  D004               	goto	l4853
  4919                           
  4920                           ; BSR set to: 0
  4921  000F64  0E80               	movlw	128
  4922  000F66  0100               	movlb	0	; () banked
  4923  000F68  6FE4               	movwf	drawtext@cursor_x& (0+255),b
  4924                           
  4925                           ; BSR set to: 0
  4926  000F6A  D000               	goto	l4853
  4927  000F6C                     l4853:
  4928                           
  4929                           ; BSR set to: 0
  4930  000F6C  0100               	movlb	0	; () banked
  4931  000F6E  4BE1               	infsnz	drawtext@i& (0+255),f,b
  4932  000F70  2BE2               	incf	(drawtext@i+1)& (0+255),f,b
  4933  000F72  D000               	goto	l4855
  4934  000F74                     l4855:
  4935                           
  4936                           ; BSR set to: 0
  4937  000F74  0100               	movlb	0	; () banked
  4938  000F76  51DF               	movf	drawtext@textsize& (0+255),w,b
  4939  000F78  0100               	movlb	0	; () banked
  4940  000F7A  5DE1               	subwf	drawtext@i& (0+255),w,b
  4941  000F7C  0100               	movlb	0	; () banked
  4942  000F7E  51E0               	movf	(drawtext@textsize+1)& (0+255),w,b
  4943  000F80  0100               	movlb	0	; () banked
  4944  000F82  59E2               	subwfb	(drawtext@i+1)& (0+255),w,b
  4945  000F84  A0D8               	btfss	status,0,c
  4946  000F86  D792               	goto	l4829
  4947                           
  4948                           ; BSR set to: 0
  4949                           
  4950                           ; BSR set to: 0
  4951  000F88  0012               	return		;funcret
  4952  000F8A                     __end_of_drawtext:
  4953                           	opt stack 0
  4954                           tblptru	equ	0xFF8
  4955                           tblptrh	equ	0xFF7
  4956                           tblptrl	equ	0xFF6
  4957                           tablat	equ	0xFF5
  4958                           prodh	equ	0xFF4
  4959                           prodl	equ	0xFF3
  4960                           intcon	equ	0xFF2
  4961                           intcon2	equ	0xFF1
  4962                           postinc0	equ	0xFEE
  4963                           wreg	equ	0xFE8
  4964                           postdec1	equ	0xFE5
  4965                           fsr1l	equ	0xFE1
  4966                           indf2	equ	0xFDF
  4967                           postinc2	equ	0xFDE
  4968                           postdec2	equ	0xFDD
  4969                           fsr2h	equ	0xFDA
  4970                           fsr2l	equ	0xFD9
  4971                           status	equ	0xFD8
  4972                           
  4973 ;; *************** function _strlen *****************
  4974 ;; Defined at:
  4975 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strlen.c"
  4976 ;; Parameters:    Size  Location     Type
  4977 ;;  s               2   16[COMRAM] PTR const unsigned char 
  4978 ;;		 -> NULL(0), buffer(31), txt1(84), 
  4979 ;; Auto vars:     Size  Location     Type
  4980 ;;  cp              2   20[COMRAM] PTR const unsigned char 
  4981 ;;		 -> NULL(0), buffer(31), txt1(84), 
  4982 ;; Return value:  Size  Location     Type
  4983 ;;                  2   16[COMRAM] unsigned int 
  4984 ;; Registers used:
  4985 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4986 ;; Tracked objects:
  4987 ;;		On entry : 0/0
  4988 ;;		On exit  : 0/0
  4989 ;;		Unchanged: 0/0
  4990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4991 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4992 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4993 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4994 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4995 ;;Total ram usage:        6 bytes
  4996 ;; Hardware stack levels used:    1
  4997 ;; Hardware stack levels required when called:    3
  4998 ;; This function calls:
  4999 ;;		Nothing
  5000 ;; This function is called by:
  5001 ;;		_drawtext
  5002 ;; This function uses a non-reentrant model
  5003 ;;
  5004                           
  5005                           	psect	text16
  5006  00194C                     __ptext16:
  5007                           	opt stack 0
  5008  00194C                     _strlen:
  5009                           	opt stack 26
  5010                           
  5011                           ; BSR set to: 0
  5012                           ;incstack = 0
  5013  00194C  C011  F015         	movff	strlen@s,strlen@cp
  5014  001950  C012  F016         	movff	strlen@s+1,strlen@cp+1
  5015  001954  D003               	goto	l4745
  5016  001956                     l4743:
  5017  001956  4A15               	infsnz	strlen@cp,f,c
  5018  001958  2A16               	incf	strlen@cp+1,f,c
  5019  00195A  D000               	goto	l4745
  5020  00195C                     l4745:
  5021  00195C  C015  FFD9         	movff	strlen@cp,fsr2l
  5022  001960  C016  FFDA         	movff	strlen@cp+1,fsr2h
  5023  001964  50DF               	movf	indf2,w,c
  5024  001966  A4D8               	btfss	status,2,c
  5025  001968  D7F6               	goto	l4743
  5026  00196A  C011  F013         	movff	strlen@s,??_strlen
  5027  00196E  C012  F014         	movff	strlen@s+1,??_strlen+1
  5028  001972  1E13               	comf	??_strlen,f,c
  5029  001974  1E14               	comf	??_strlen+1,f,c
  5030  001976  4A13               	infsnz	??_strlen,f,c
  5031  001978  2A14               	incf	??_strlen+1,f,c
  5032  00197A  5015               	movf	strlen@cp,w,c
  5033  00197C  2413               	addwf	??_strlen,w,c
  5034  00197E  6E11               	movwf	?_strlen,c
  5035  001980  5016               	movf	strlen@cp+1,w,c
  5036  001982  2014               	addwfc	??_strlen+1,w,c
  5037  001984  6E12               	movwf	?_strlen+1,c
  5038  001986  D000               	goto	l1265
  5039  001988                     l1265:
  5040  001988  0012               	return		;funcret
  5041  00198A                     __end_of_strlen:
  5042                           	opt stack 0
  5043                           tblptru	equ	0xFF8
  5044                           tblptrh	equ	0xFF7
  5045                           tblptrl	equ	0xFF6
  5046                           tablat	equ	0xFF5
  5047                           prodh	equ	0xFF4
  5048                           prodl	equ	0xFF3
  5049                           intcon	equ	0xFF2
  5050                           intcon2	equ	0xFF1
  5051                           postinc0	equ	0xFEE
  5052                           wreg	equ	0xFE8
  5053                           postdec1	equ	0xFE5
  5054                           fsr1l	equ	0xFE1
  5055                           indf2	equ	0xFDF
  5056                           postinc2	equ	0xFDE
  5057                           postdec2	equ	0xFDD
  5058                           fsr2h	equ	0xFDA
  5059                           fsr2l	equ	0xFD9
  5060                           status	equ	0xFD8
  5061                           
  5062 ;; *************** function _drawChar *****************
  5063 ;; Defined at:
  5064 ;;		line 447 in file "ST7735_TFT.c"
  5065 ;; Parameters:    Size  Location     Type
  5066 ;;  x               1    wreg     unsigned char 
  5067 ;;  y               1   45[COMRAM] unsigned char 
  5068 ;;  c               1   46[COMRAM] unsigned char 
  5069 ;;  color           2   47[COMRAM] unsigned int 
  5070 ;;  bg              2   49[COMRAM] unsigned int 
  5071 ;;  size            1   51[COMRAM] unsigned char 
  5072 ;; Auto vars:     Size  Location     Type
  5073 ;;  x               1   53[COMRAM] unsigned char 
  5074 ;;  line            1   52[COMRAM] unsigned char 
  5075 ;;  i               1   55[COMRAM] unsigned char 
  5076 ;;  j               1   54[COMRAM] unsigned char 
  5077 ;; Return value:  Size  Location     Type
  5078 ;;		None               void
  5079 ;; Registers used:
  5080 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5081 ;; Tracked objects:
  5082 ;;		On entry : 0/0
  5083 ;;		On exit  : 0/0
  5084 ;;		Unchanged: 0/0
  5085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5086 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5087 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5088 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5089 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5090 ;;Total ram usage:       11 bytes
  5091 ;; Hardware stack levels used:    1
  5092 ;; Hardware stack levels required when called:    8
  5093 ;; This function calls:
  5094 ;;		___wmul
  5095 ;;		_drawPixel
  5096 ;;		_fillRect
  5097 ;; This function is called by:
  5098 ;;		_drawtext
  5099 ;; This function uses a non-reentrant model
  5100 ;;
  5101                           
  5102                           	psect	text17
  5103  000AE2                     __ptext17:
  5104                           	opt stack 0
  5105  000AE2                     _drawChar:
  5106                           	opt stack 21
  5107                           
  5108                           ;incstack = 0
  5109                           ;drawChar@x stored from wreg
  5110  000AE2  6E36               	movwf	drawChar@x,c
  5111                           
  5112                           ;ST7735_TFT.c: 449: char i, j;
  5113                           ;ST7735_TFT.c: 450: if((x >= 128) || (y >= 160))
  5114  000AE4  0E80               	movlw	128
  5115  000AE6  6036               	cpfslt	drawChar@x,c
  5116  000AE8  D0A6               	goto	l494
  5117  000AEA  0E9F               	movlw	159
  5118  000AEC  642E               	cpfsgt	drawChar@y,c
  5119  000AEE  D001               	goto	l4691
  5120                           
  5121                           ;ST7735_TFT.c: 451: return;
  5122  000AF0  D0A2               	goto	l494
  5123  000AF2                     l4691:
  5124                           
  5125                           ;ST7735_TFT.c: 452: if(size < 1) size = 1;
  5126  000AF2  5034               	movf	drawChar@size,w,c
  5127  000AF4  A4D8               	btfss	status,2,c
  5128  000AF6  D003               	goto	l4695
  5129  000AF8  0E01               	movlw	1
  5130  000AFA  6E34               	movwf	drawChar@size,c
  5131  000AFC  D000               	goto	l4695
  5132  000AFE                     l4695:
  5133                           
  5134                           ;ST7735_TFT.c: 453: if((c < ' ') || (c > '~'))
  5135  000AFE  0E1F               	movlw	31
  5136  000B00  642F               	cpfsgt	drawChar@c,c
  5137  000B02  D004               	goto	l4699
  5138  000B04  0E7E               	movlw	126
  5139  000B06  642F               	cpfsgt	drawChar@c,c
  5140  000B08  D003               	goto	l496
  5141  000B0A  D000               	goto	l4699
  5142  000B0C                     l4699:
  5143                           
  5144                           ;ST7735_TFT.c: 454: c = '?';
  5145  000B0C  0E3F               	movlw	63
  5146  000B0E  6E2F               	movwf	drawChar@c,c
  5147  000B10                     l496:
  5148                           
  5149                           ;ST7735_TFT.c: 455: for(i=0; i<5; i++ ) {
  5150  000B10  0E00               	movlw	0
  5151  000B12  6E38               	movwf	drawChar@i,c
  5152  000B14                     l4701:
  5153  000B14  0E04               	movlw	4
  5154  000B16  6438               	cpfsgt	drawChar@i,c
  5155  000B18  D001               	goto	l4705
  5156  000B1A  D08D               	goto	l494
  5157  000B1C                     l4705:
  5158                           
  5159                           ;ST7735_TFT.c: 456: unsigned char line;
  5160                           ;ST7735_TFT.c: 457: if(c < 'S')
  5161  000B1C  0E53               	movlw	83
  5162  000B1E  602F               	cpfslt	drawChar@c,c
  5163  000B20  D015               	goto	l4709
  5164                           
  5165                           ;ST7735_TFT.c: 458: line = font[(c - 32)*5 + i];
  5166  000B22  0EE0               	movlw	224
  5167  000B24  242F               	addwf	drawChar@c,w,c
  5168  000B26  6E11               	movwf	___wmul@multiplier,c
  5169  000B28  6A12               	clrf	___wmul@multiplier+1,c
  5170  000B2A  0EFF               	movlw	255
  5171  000B2C  2212               	addwfc	___wmul@multiplier+1,f,c
  5172  000B2E  0E00               	movlw	0
  5173  000B30  6E14               	movwf	___wmul@multiplicand+1,c
  5174  000B32  0E05               	movlw	5
  5175  000B34  6E13               	movwf	___wmul@multiplicand,c
  5176  000B36  EC9D  F00D         	call	___wmul	;wreg free
  5177  000B3A  5038               	movf	drawChar@i,w,c
  5178  000B3C  2611               	addwf	?___wmul,f,c
  5179  000B3E  0E00               	movlw	0
  5180  000B40  2212               	addwfc	?___wmul+1,f,c
  5181  000B42  0E3B               	movlw	low _font
  5182  000B44  2411               	addwf	?___wmul,w,c
  5183  000B46  6EF6               	movwf	tblptrl,c
  5184  000B48  0EFD               	movlw	high _font
  5185  000B4A  D014               	goto	L3
  5186  000B4C                     l4709:
  5187                           
  5188                           ;ST7735_TFT.c: 459: else
  5189                           ;ST7735_TFT.c: 460: line = font2[(c - 'S')*5 + i];
  5190  000B4C  0EAD               	movlw	173
  5191  000B4E  242F               	addwf	drawChar@c,w,c
  5192  000B50  6E11               	movwf	___wmul@multiplier,c
  5193  000B52  6A12               	clrf	___wmul@multiplier+1,c
  5194  000B54  0EFF               	movlw	255
  5195  000B56  2212               	addwfc	___wmul@multiplier+1,f,c
  5196  000B58  0E00               	movlw	0
  5197  000B5A  6E14               	movwf	___wmul@multiplicand+1,c
  5198  000B5C  0E05               	movlw	5
  5199  000B5E  6E13               	movwf	___wmul@multiplicand,c
  5200  000B60  EC9D  F00D         	call	___wmul	;wreg free
  5201  000B64  5038               	movf	drawChar@i,w,c
  5202  000B66  2611               	addwf	?___wmul,f,c
  5203  000B68  0E00               	movlw	0
  5204  000B6A  2212               	addwfc	?___wmul+1,f,c
  5205  000B6C  0E3A               	movlw	low _font2
  5206  000B6E  2411               	addwf	?___wmul,w,c
  5207  000B70  6EF6               	movwf	tblptrl,c
  5208  000B72  0EFE               	movlw	high _font2
  5209  000B74                     L3:
  5210  000B74  2012               	addwfc	?___wmul+1,w,c
  5211  000B76  6EF7               	movwf	tblptrh,c
  5212  000B78                     	if	0	;There are less than 3 active tblptr bytes
  5213  000B78                     	endif
  5214  000B78  0008               	tblrd		*
  5215  000B7A  CFF5 F035          	movff	tablat,drawChar@line
  5216  000B7E  D000               	goto	l4711
  5217  000B80                     l4711:
  5218                           
  5219                           ;ST7735_TFT.c: 461: for(j=0; j<7; j++, line >>= 1) {
  5220  000B80  0E00               	movlw	0
  5221  000B82  6E37               	movwf	drawChar@j,c
  5222  000B84                     l4713:
  5223  000B84  0E06               	movlw	6
  5224  000B86  6437               	cpfsgt	drawChar@j,c
  5225  000B88  D001               	goto	l503
  5226  000B8A  D053               	goto	l4737
  5227  000B8C                     l503:
  5228                           
  5229                           ;ST7735_TFT.c: 462: if(line & 0x01) {
  5230  000B8C  A035               	btfss	drawChar@line,0,c
  5231  000B8E  D023               	goto	l4723
  5232                           
  5233                           ;ST7735_TFT.c: 463: if(size == 1) drawPixel(x+i, y+j, color);
  5234  000B90  0434               	decf	drawChar@size,w,c
  5235  000B92  A4D8               	btfss	status,2,c
  5236  000B94  D00C               	goto	l4721
  5237  000B96  502E               	movf	drawChar@y,w,c
  5238  000B98  2437               	addwf	drawChar@j,w,c
  5239  000B9A  6E18               	movwf	drawPixel@y,c
  5240  000B9C  C030  F019         	movff	drawChar@color,drawPixel@color
  5241  000BA0  C031  F01A         	movff	drawChar@color+1,drawPixel@color+1
  5242  000BA4  5036               	movf	drawChar@x,w,c
  5243  000BA6  2438               	addwf	drawChar@i,w,c
  5244  000BA8  EC58  F00D         	call	_drawPixel
  5245  000BAC  D03E               	goto	l4731
  5246  000BAE                     l4721:
  5247                           
  5248                           ;ST7735_TFT.c: 464: else fillRect(x+(i*size), y+(j*size), size, size, color);
  5249  000BAE  5037               	movf	drawChar@j,w,c
  5250  000BB0  0234               	mulwf	drawChar@size,c
  5251  000BB2  50F3               	movf	prodl,w,c
  5252  000BB4  242E               	addwf	drawChar@y,w,c
  5253  000BB6  6E23               	movwf	fillRect@y,c
  5254  000BB8  C034  F024         	movff	drawChar@size,fillRect@w
  5255  000BBC  C034  F025         	movff	drawChar@size,fillRect@h
  5256  000BC0  C030  F026         	movff	drawChar@color,fillRect@color
  5257  000BC4  C031  F027         	movff	drawChar@color+1,fillRect@color+1
  5258  000BC8  5038               	movf	drawChar@i,w,c
  5259  000BCA  0234               	mulwf	drawChar@size,c
  5260  000BCC  50F3               	movf	prodl,w,c
  5261  000BCE  2436               	addwf	drawChar@x,w,c
  5262  000BD0  EC3D  F00C         	call	_fillRect
  5263                           
  5264                           ;ST7735_TFT.c: 465: }
  5265  000BD4  D02A               	goto	l4731
  5266  000BD6                     l4723:
  5267                           
  5268                           ;ST7735_TFT.c: 466: else if(bg != color) {
  5269  000BD6  5030               	movf	drawChar@color,w,c
  5270  000BD8  1832               	xorwf	drawChar@bg,w,c
  5271  000BDA  E104               	bnz	u3520
  5272  000BDC  5031               	movf	drawChar@color+1,w,c
  5273  000BDE  1833               	xorwf	drawChar@bg+1,w,c
  5274  000BE0  B4D8               	btfsc	status,2,c
  5275  000BE2  D023               	goto	l4731
  5276  000BE4                     u3520:
  5277                           
  5278                           ;ST7735_TFT.c: 467: if(size == 1) drawPixel(x+i, y+j, bg);
  5279  000BE4  0434               	decf	drawChar@size,w,c
  5280  000BE6  A4D8               	btfss	status,2,c
  5281  000BE8  D00C               	goto	l4729
  5282  000BEA  502E               	movf	drawChar@y,w,c
  5283  000BEC  2437               	addwf	drawChar@j,w,c
  5284  000BEE  6E18               	movwf	drawPixel@y,c
  5285  000BF0  C032  F019         	movff	drawChar@bg,drawPixel@color
  5286  000BF4  C033  F01A         	movff	drawChar@bg+1,drawPixel@color+1
  5287  000BF8  5036               	movf	drawChar@x,w,c
  5288  000BFA  2438               	addwf	drawChar@i,w,c
  5289  000BFC  EC58  F00D         	call	_drawPixel
  5290  000C00  D014               	goto	l4731
  5291  000C02                     l4729:
  5292                           
  5293                           ;ST7735_TFT.c: 468: else fillRect(x+i*size, y+j*size, size, size, bg);
  5294  000C02  5037               	movf	drawChar@j,w,c
  5295  000C04  0234               	mulwf	drawChar@size,c
  5296  000C06  50F3               	movf	prodl,w,c
  5297  000C08  242E               	addwf	drawChar@y,w,c
  5298  000C0A  6E23               	movwf	fillRect@y,c
  5299  000C0C  C034  F024         	movff	drawChar@size,fillRect@w
  5300  000C10  C034  F025         	movff	drawChar@size,fillRect@h
  5301  000C14  C032  F026         	movff	drawChar@bg,fillRect@color
  5302  000C18  C033  F027         	movff	drawChar@bg+1,fillRect@color+1
  5303  000C1C  5038               	movf	drawChar@i,w,c
  5304  000C1E  0234               	mulwf	drawChar@size,c
  5305  000C20  50F3               	movf	prodl,w,c
  5306  000C22  2436               	addwf	drawChar@x,w,c
  5307  000C24  EC3D  F00C         	call	_fillRect
  5308  000C28  D000               	goto	l4731
  5309  000C2A                     l4731:
  5310  000C2A  2A37               	incf	drawChar@j,f,c
  5311  000C2C  90D8               	bcf	status,0,c
  5312  000C2E  3235               	rrcf	drawChar@line,f,c
  5313  000C30  D7A9               	goto	l4713
  5314  000C32                     l4737:
  5315  000C32  2A38               	incf	drawChar@i,f,c
  5316  000C34  D76F               	goto	l4701
  5317  000C36                     l494:
  5318  000C36  0012               	return		;funcret
  5319  000C38                     __end_of_drawChar:
  5320                           	opt stack 0
  5321                           tblptru	equ	0xFF8
  5322                           tblptrh	equ	0xFF7
  5323                           tblptrl	equ	0xFF6
  5324                           tablat	equ	0xFF5
  5325                           prodh	equ	0xFF4
  5326                           prodl	equ	0xFF3
  5327                           intcon	equ	0xFF2
  5328                           intcon2	equ	0xFF1
  5329                           postinc0	equ	0xFEE
  5330                           wreg	equ	0xFE8
  5331                           postdec1	equ	0xFE5
  5332                           fsr1l	equ	0xFE1
  5333                           indf2	equ	0xFDF
  5334                           postinc2	equ	0xFDE
  5335                           postdec2	equ	0xFDD
  5336                           fsr2h	equ	0xFDA
  5337                           fsr2l	equ	0xFD9
  5338                           status	equ	0xFD8
  5339                           
  5340 ;; *************** function _fillRect *****************
  5341 ;; Defined at:
  5342 ;;		line 437 in file "ST7735_TFT.c"
  5343 ;; Parameters:    Size  Location     Type
  5344 ;;  x               1    wreg     unsigned char 
  5345 ;;  y               1   34[COMRAM] unsigned char 
  5346 ;;  w               1   35[COMRAM] unsigned char 
  5347 ;;  h               1   36[COMRAM] unsigned char 
  5348 ;;  color           2   37[COMRAM] unsigned int 
  5349 ;; Auto vars:     Size  Location     Type
  5350 ;;  x               1   42[COMRAM] unsigned char 
  5351 ;;  i               2   43[COMRAM] int 
  5352 ;; Return value:  Size  Location     Type
  5353 ;;		None               void
  5354 ;; Registers used:
  5355 ;;		wreg, status,2, status,0, cstack
  5356 ;; Tracked objects:
  5357 ;;		On entry : 0/0
  5358 ;;		On exit  : 0/0
  5359 ;;		Unchanged: 0/0
  5360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5361 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5362 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5363 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5364 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5365 ;;Total ram usage:       11 bytes
  5366 ;; Hardware stack levels used:    1
  5367 ;; Hardware stack levels required when called:    7
  5368 ;; This function calls:
  5369 ;;		_drawFastVLine
  5370 ;; This function is called by:
  5371 ;;		_drawChar
  5372 ;; This function uses a non-reentrant model
  5373 ;;
  5374                           
  5375                           	psect	text18
  5376  00187A                     __ptext18:
  5377                           	opt stack 0
  5378  00187A                     _fillRect:
  5379                           	opt stack 21
  5380                           
  5381                           ;incstack = 0
  5382                           ;fillRect@x stored from wreg
  5383  00187A  6E2B               	movwf	fillRect@x,c
  5384                           
  5385                           ;ST7735_TFT.c: 439: signed int i;
  5386                           ;ST7735_TFT.c: 441: for (i = x; i < x + w; i++)
  5387  00187C  C02B  F02C         	movff	fillRect@x,fillRect@i
  5388  001880  6A2D               	clrf	fillRect@i+1,c
  5389  001882  D00E               	goto	l4515
  5390  001884                     l4511:
  5391                           
  5392                           ;ST7735_TFT.c: 442: {
  5393                           ;ST7735_TFT.c: 443: drawFastVLine(i, y, h, color);
  5394  001884  C023  F018         	movff	fillRect@y,drawFastVLine@y
  5395  001888  C025  F019         	movff	fillRect@h,drawFastVLine@h
  5396  00188C  C026  F01A         	movff	fillRect@color,drawFastVLine@color
  5397  001890  C027  F01B         	movff	fillRect@color+1,drawFastVLine@color+1
  5398  001894  502C               	movf	fillRect@i,w,c
  5399  001896  EC06  F00A         	call	_drawFastVLine
  5400  00189A  4A2C               	infsnz	fillRect@i,f,c
  5401  00189C  2A2D               	incf	fillRect@i+1,f,c
  5402  00189E  D000               	goto	l4515
  5403  0018A0                     l4515:
  5404  0018A0  5024               	movf	fillRect@w,w,c
  5405  0018A2  C02B  F028         	movff	fillRect@x,??_fillRect
  5406  0018A6  6A29               	clrf	(??_fillRect+1)& (0+255),c
  5407  0018A8  2628               	addwf	??_fillRect,f,c
  5408  0018AA  0E00               	movlw	0
  5409  0018AC  2229               	addwfc	??_fillRect+1,f,c
  5410  0018AE  5028               	movf	??_fillRect,w,c
  5411  0018B0  5C2C               	subwf	fillRect@i,w,c
  5412  0018B2  502D               	movf	fillRect@i+1,w,c
  5413  0018B4  0A80               	xorlw	128
  5414  0018B6  6E2A               	movwf	(??_fillRect+2)& (0+255),c
  5415  0018B8  5029               	movf	??_fillRect+1,w,c
  5416  0018BA  0A80               	xorlw	128
  5417  0018BC  582A               	subwfb	(??_fillRect+2)& (0+255),w,c
  5418  0018BE  A0D8               	btfss	status,0,c
  5419  0018C0  D7E1               	goto	l4511
  5420  0018C2  0012               	return		;funcret
  5421  0018C4                     __end_of_fillRect:
  5422                           	opt stack 0
  5423                           tblptru	equ	0xFF8
  5424                           tblptrh	equ	0xFF7
  5425                           tblptrl	equ	0xFF6
  5426                           tablat	equ	0xFF5
  5427                           prodh	equ	0xFF4
  5428                           prodl	equ	0xFF3
  5429                           intcon	equ	0xFF2
  5430                           intcon2	equ	0xFF1
  5431                           postinc0	equ	0xFEE
  5432                           wreg	equ	0xFE8
  5433                           postdec1	equ	0xFE5
  5434                           fsr1l	equ	0xFE1
  5435                           indf2	equ	0xFDF
  5436                           postinc2	equ	0xFDE
  5437                           postdec2	equ	0xFDD
  5438                           fsr2h	equ	0xFDA
  5439                           fsr2l	equ	0xFD9
  5440                           status	equ	0xFD8
  5441                           
  5442 ;; *************** function _drawFastVLine *****************
  5443 ;; Defined at:
  5444 ;;		line 416 in file "ST7735_TFT.c"
  5445 ;; Parameters:    Size  Location     Type
  5446 ;;  x               1    wreg     unsigned char 
  5447 ;;  y               1   23[COMRAM] unsigned char 
  5448 ;;  h               1   24[COMRAM] unsigned char 
  5449 ;;  color           2   25[COMRAM] unsigned int 
  5450 ;; Auto vars:     Size  Location     Type
  5451 ;;  x               1   33[COMRAM] unsigned char 
  5452 ;;  lo              1   32[COMRAM] unsigned char 
  5453 ;;  hi              1   31[COMRAM] unsigned char 
  5454 ;; Return value:  Size  Location     Type
  5455 ;;		None               void
  5456 ;; Registers used:
  5457 ;;		wreg, status,2, status,0, cstack
  5458 ;; Tracked objects:
  5459 ;;		On entry : 0/0
  5460 ;;		On exit  : 0/0
  5461 ;;		Unchanged: 0/0
  5462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5463 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5464 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5465 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5466 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5467 ;;Total ram usage:       11 bytes
  5468 ;; Hardware stack levels used:    1
  5469 ;; Hardware stack levels required when called:    6
  5470 ;; This function calls:
  5471 ;;		_setAddrWindow
  5472 ;;		_spiwrite
  5473 ;; This function is called by:
  5474 ;;		_fillRect
  5475 ;;		_fillCircleHelper
  5476 ;;		_fillCircle
  5477 ;;		_drawRect
  5478 ;; This function uses a non-reentrant model
  5479 ;;
  5480                           
  5481                           	psect	text19
  5482  00140C                     __ptext19:
  5483                           	opt stack 0
  5484  00140C                     _drawFastVLine:
  5485                           	opt stack 22
  5486                           
  5487                           ;incstack = 0
  5488                           ;drawFastVLine@x stored from wreg
  5489  00140C  6E22               	movwf	drawFastVLine@x,c
  5490                           
  5491                           ;ST7735_TFT.c: 418: unsigned char hi, lo;
  5492                           ;ST7735_TFT.c: 419: if((x >= 128) || (y >= 160))
  5493  00140E  0E80               	movlw	128
  5494  001410  6022               	cpfslt	drawFastVLine@x,c
  5495  001412  D03F               	goto	l478
  5496  001414  0E9F               	movlw	159
  5497  001416  6418               	cpfsgt	drawFastVLine@y,c
  5498  001418  D001               	goto	l4421
  5499                           
  5500                           ;ST7735_TFT.c: 420: return;
  5501  00141A  D03B               	goto	l478
  5502  00141C                     l4421:
  5503                           
  5504                           ;ST7735_TFT.c: 421: if((y + h - 1) >= 160)
  5505  00141C  0EFF               	movlw	255
  5506  00141E  6E1C               	movwf	??_drawFastVLine& (0+255),c
  5507  001420  0EFF               	movlw	255
  5508  001422  6E1D               	movwf	(??_drawFastVLine+1)& (0+255),c
  5509  001424  5019               	movf	drawFastVLine@h,w,c
  5510  001426  C018  F01E         	movff	drawFastVLine@y,??_drawFastVLine+2
  5511  00142A  6A1F               	clrf	(??_drawFastVLine+3)& (0+255),c
  5512  00142C  261E               	addwf	??_drawFastVLine+2,f,c
  5513  00142E  0E00               	movlw	0
  5514  001430  221F               	addwfc	??_drawFastVLine+3,f,c
  5515  001432  501C               	movf	??_drawFastVLine,w,c
  5516  001434  261E               	addwf	??_drawFastVLine+2,f,c
  5517  001436  501D               	movf	??_drawFastVLine+1,w,c
  5518  001438  221F               	addwfc	??_drawFastVLine+3,f,c
  5519  00143A  BE1F               	btfsc	??_drawFastVLine+3,7,c
  5520  00143C  D00B               	goto	l4425
  5521  00143E  501F               	movf	??_drawFastVLine+3,w,c
  5522  001440  E104               	bnz	u3230
  5523  001442  0EA0               	movlw	160
  5524  001444  5C1E               	subwf	??_drawFastVLine+2,w,c
  5525  001446  A0D8               	btfss	status,0,c
  5526  001448  D005               	goto	l4425
  5527  00144A                     u3230:
  5528                           
  5529                           ;ST7735_TFT.c: 422: h = 160 - y;
  5530  00144A  5018               	movf	drawFastVLine@y,w,c
  5531  00144C  0800               	sublw	0
  5532  00144E  0FA0               	addlw	160
  5533  001450  6E19               	movwf	drawFastVLine@h,c
  5534  001452  D000               	goto	l4425
  5535  001454                     l4425:
  5536                           
  5537                           ;ST7735_TFT.c: 423: hi = color >> 8; lo = color;
  5538  001454  501B               	movf	drawFastVLine@color+1,w,c
  5539  001456  6E20               	movwf	drawFastVLine@hi,c
  5540  001458  C01A  F021         	movff	drawFastVLine@color,drawFastVLine@lo
  5541                           
  5542                           ;ST7735_TFT.c: 424: setAddrWindow(x, y, x, y + h - 1);
  5543  00145C  C018  F014         	movff	drawFastVLine@y,setAddrWindow@y0
  5544  001460  C022  F015         	movff	drawFastVLine@x,setAddrWindow@x1
  5545  001464  5018               	movf	drawFastVLine@y,w,c
  5546  001466  2419               	addwf	drawFastVLine@h,w,c
  5547  001468  6E1C               	movwf	??_drawFastVLine& (0+255),c
  5548  00146A  041C               	decf	??_drawFastVLine,w,c
  5549  00146C  6E16               	movwf	setAddrWindow@y1,c
  5550  00146E  5022               	movf	drawFastVLine@x,w,c
  5551  001470  EC16  F00C         	call	_setAddrWindow
  5552                           
  5553                           ;ST7735_TFT.c: 425: PORTCbits.RC0 = 1;
  5554  001474  8082               	bsf	3970,0,c	;volatile
  5555                           
  5556                           ;ST7735_TFT.c: 426: PORTCbits.RC1 = 0;
  5557  001476  9282               	bcf	3970,1,c	;volatile
  5558                           
  5559                           ;ST7735_TFT.c: 428: while (h--) {
  5560  001478  D007               	goto	l4437
  5561  00147A                     l4435:
  5562                           
  5563                           ;ST7735_TFT.c: 429: spiwrite(hi);
  5564  00147A  5020               	movf	drawFastVLine@hi,w,c
  5565  00147C  EC19  F00E         	call	_spiwrite
  5566                           
  5567                           ;ST7735_TFT.c: 430: spiwrite(lo);
  5568  001480  5021               	movf	drawFastVLine@lo,w,c
  5569  001482  EC19  F00E         	call	_spiwrite
  5570  001486  D000               	goto	l4437
  5571  001488                     l4437:
  5572  001488  0619               	decf	drawFastVLine@h,f,c
  5573  00148A  2819               	incf	drawFastVLine@h,w,c
  5574  00148C  A4D8               	btfss	status,2,c
  5575  00148E  D7F5               	goto	l4435
  5576                           
  5577                           ;ST7735_TFT.c: 431: }
  5578                           ;ST7735_TFT.c: 432: PORTCbits.RC1 = 1;
  5579  001490  8282               	bsf	3970,1,c	;volatile
  5580  001492                     l478:
  5581  001492  0012               	return		;funcret
  5582  001494                     __end_of_drawFastVLine:
  5583                           	opt stack 0
  5584                           tblptru	equ	0xFF8
  5585                           tblptrh	equ	0xFF7
  5586                           tblptrl	equ	0xFF6
  5587                           tablat	equ	0xFF5
  5588                           prodh	equ	0xFF4
  5589                           prodl	equ	0xFF3
  5590                           intcon	equ	0xFF2
  5591                           intcon2	equ	0xFF1
  5592                           postinc0	equ	0xFEE
  5593                           wreg	equ	0xFE8
  5594                           postdec1	equ	0xFE5
  5595                           fsr1l	equ	0xFE1
  5596                           indf2	equ	0xFDF
  5597                           postinc2	equ	0xFDE
  5598                           postdec2	equ	0xFDD
  5599                           fsr2h	equ	0xFDA
  5600                           fsr2l	equ	0xFD9
  5601                           status	equ	0xFD8
  5602                           
  5603 ;; *************** function _drawPixel *****************
  5604 ;; Defined at:
  5605 ;;		line 407 in file "ST7735_TFT.c"
  5606 ;; Parameters:    Size  Location     Type
  5607 ;;  x               1    wreg     unsigned char 
  5608 ;;  y               1   23[COMRAM] unsigned char 
  5609 ;;  color           2   24[COMRAM] unsigned int 
  5610 ;; Auto vars:     Size  Location     Type
  5611 ;;  x               1   26[COMRAM] unsigned char 
  5612 ;; Return value:  Size  Location     Type
  5613 ;;		None               void
  5614 ;; Registers used:
  5615 ;;		wreg, status,2, status,0, cstack
  5616 ;; Tracked objects:
  5617 ;;		On entry : 0/0
  5618 ;;		On exit  : 0/0
  5619 ;;		Unchanged: 0/0
  5620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5621 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5622 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5623 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5624 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5625 ;;Total ram usage:        4 bytes
  5626 ;; Hardware stack levels used:    1
  5627 ;; Hardware stack levels required when called:    6
  5628 ;; This function calls:
  5629 ;;		_setAddrWindow
  5630 ;;		_write_data
  5631 ;; This function is called by:
  5632 ;;		_drawChar
  5633 ;;		_drawCircle
  5634 ;;		_drawCircleHelper
  5635 ;; This function uses a non-reentrant model
  5636 ;;
  5637                           
  5638                           	psect	text20
  5639  001AB0                     __ptext20:
  5640                           	opt stack 0
  5641  001AB0                     _drawPixel:
  5642                           	opt stack 22
  5643                           
  5644                           ;incstack = 0
  5645                           ;drawPixel@x stored from wreg
  5646  001AB0  6E1B               	movwf	drawPixel@x,c
  5647                           
  5648                           ;ST7735_TFT.c: 409: if((x >= 128) || (y >= 160))
  5649  001AB2  0E80               	movlw	128
  5650  001AB4  601B               	cpfslt	drawPixel@x,c
  5651  001AB6  D013               	goto	l472
  5652  001AB8  0E9F               	movlw	159
  5653  001ABA  6418               	cpfsgt	drawPixel@y,c
  5654  001ABC  D001               	goto	l4503
  5655                           
  5656                           ;ST7735_TFT.c: 410: return;
  5657  001ABE  D00F               	goto	l472
  5658  001AC0                     l4503:
  5659                           
  5660                           ;ST7735_TFT.c: 411: setAddrWindow(x,y,x+1,y+1);
  5661  001AC0  C018  F014         	movff	drawPixel@y,setAddrWindow@y0
  5662  001AC4  281B               	incf	drawPixel@x,w,c
  5663  001AC6  6E15               	movwf	setAddrWindow@x1,c
  5664  001AC8  2818               	incf	drawPixel@y,w,c
  5665  001ACA  6E16               	movwf	setAddrWindow@y1,c
  5666  001ACC  501B               	movf	drawPixel@x,w,c
  5667  001ACE  EC16  F00C         	call	_setAddrWindow
  5668                           
  5669                           ;ST7735_TFT.c: 412: write_data(color >> 8);
  5670  001AD2  501A               	movf	drawPixel@color+1,w,c
  5671  001AD4  EC5A  F00E         	call	_write_data
  5672                           
  5673                           ;ST7735_TFT.c: 413: write_data(color & 0xFF);
  5674  001AD8  5019               	movf	drawPixel@color,w,c
  5675  001ADA  EC5A  F00E         	call	_write_data
  5676  001ADE                     l472:
  5677  001ADE  0012               	return		;funcret
  5678  001AE0                     __end_of_drawPixel:
  5679                           	opt stack 0
  5680                           tblptru	equ	0xFF8
  5681                           tblptrh	equ	0xFF7
  5682                           tblptrl	equ	0xFF6
  5683                           tablat	equ	0xFF5
  5684                           prodh	equ	0xFF4
  5685                           prodl	equ	0xFF3
  5686                           intcon	equ	0xFF2
  5687                           intcon2	equ	0xFF1
  5688                           postinc0	equ	0xFEE
  5689                           wreg	equ	0xFE8
  5690                           postdec1	equ	0xFE5
  5691                           fsr1l	equ	0xFE1
  5692                           indf2	equ	0xFDF
  5693                           postinc2	equ	0xFDE
  5694                           postdec2	equ	0xFDD
  5695                           fsr2h	equ	0xFDA
  5696                           fsr2l	equ	0xFD9
  5697                           status	equ	0xFD8
  5698                           
  5699 ;; *************** function _setAddrWindow *****************
  5700 ;; Defined at:
  5701 ;;		line 392 in file "ST7735_TFT.c"
  5702 ;; Parameters:    Size  Location     Type
  5703 ;;  x0              1    wreg     unsigned char 
  5704 ;;  y0              1   19[COMRAM] unsigned char 
  5705 ;;  x1              1   20[COMRAM] unsigned char 
  5706 ;;  y1              1   21[COMRAM] unsigned char 
  5707 ;; Auto vars:     Size  Location     Type
  5708 ;;  x0              1   22[COMRAM] unsigned char 
  5709 ;; Return value:  Size  Location     Type
  5710 ;;		None               void
  5711 ;; Registers used:
  5712 ;;		wreg, status,2, status,0, cstack
  5713 ;; Tracked objects:
  5714 ;;		On entry : 0/0
  5715 ;;		On exit  : 0/0
  5716 ;;		Unchanged: 0/0
  5717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5718 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5719 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5720 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5721 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5722 ;;Total ram usage:        4 bytes
  5723 ;; Hardware stack levels used:    1
  5724 ;; Hardware stack levels required when called:    5
  5725 ;; This function calls:
  5726 ;;		_write_command
  5727 ;;		_write_data
  5728 ;; This function is called by:
  5729 ;;		_drawPixel
  5730 ;;		_drawFastVLine
  5731 ;;		_fillRectangle
  5732 ;;		_drawFastHLine
  5733 ;; This function uses a non-reentrant model
  5734 ;;
  5735                           
  5736                           	psect	text21
  5737  00182C                     __ptext21:
  5738                           	opt stack 0
  5739  00182C                     _setAddrWindow:
  5740                           	opt stack 22
  5741                           
  5742                           ;incstack = 0
  5743                           ;setAddrWindow@x0 stored from wreg
  5744  00182C  6E17               	movwf	setAddrWindow@x0,c
  5745                           
  5746                           ;ST7735_TFT.c: 394: write_command(0x2A);
  5747  00182E  0E2A               	movlw	42
  5748  001830  EC62  F00E         	call	_write_command
  5749                           
  5750                           ;ST7735_TFT.c: 395: write_data(0);
  5751  001834  0E00               	movlw	0
  5752  001836  EC5A  F00E         	call	_write_data
  5753                           
  5754                           ;ST7735_TFT.c: 396: write_data(x0 + colstart);
  5755  00183A  5017               	movf	setAddrWindow@x0,w,c
  5756  00183C  245B               	addwf	_colstart,w,c
  5757  00183E  EC5A  F00E         	call	_write_data
  5758                           
  5759                           ;ST7735_TFT.c: 397: write_data(0);
  5760  001842  0E00               	movlw	0
  5761  001844  EC5A  F00E         	call	_write_data
  5762                           
  5763                           ;ST7735_TFT.c: 398: write_data(x1 + colstart);
  5764  001848  5015               	movf	setAddrWindow@x1,w,c
  5765  00184A  245B               	addwf	_colstart,w,c
  5766  00184C  EC5A  F00E         	call	_write_data
  5767                           
  5768                           ;ST7735_TFT.c: 399: write_command(0x2B);
  5769  001850  0E2B               	movlw	43
  5770  001852  EC62  F00E         	call	_write_command
  5771                           
  5772                           ;ST7735_TFT.c: 400: write_data(0);
  5773  001856  0E00               	movlw	0
  5774  001858  EC5A  F00E         	call	_write_data
  5775                           
  5776                           ;ST7735_TFT.c: 401: write_data(y0 + rowstart);
  5777  00185C  5014               	movf	setAddrWindow@y0,w,c
  5778  00185E  2462               	addwf	_rowstart,w,c
  5779  001860  EC5A  F00E         	call	_write_data
  5780                           
  5781                           ;ST7735_TFT.c: 402: write_data(0);
  5782  001864  0E00               	movlw	0
  5783  001866  EC5A  F00E         	call	_write_data
  5784                           
  5785                           ;ST7735_TFT.c: 403: write_data(y1 + rowstart);
  5786  00186A  5016               	movf	setAddrWindow@y1,w,c
  5787  00186C  2462               	addwf	_rowstart,w,c
  5788  00186E  EC5A  F00E         	call	_write_data
  5789                           
  5790                           ;ST7735_TFT.c: 404: write_command(0x2C);
  5791  001872  0E2C               	movlw	44
  5792  001874  EC62  F00E         	call	_write_command
  5793  001878  0012               	return		;funcret
  5794  00187A                     __end_of_setAddrWindow:
  5795                           	opt stack 0
  5796                           tblptru	equ	0xFF8
  5797                           tblptrh	equ	0xFF7
  5798                           tblptrl	equ	0xFF6
  5799                           tablat	equ	0xFF5
  5800                           prodh	equ	0xFF4
  5801                           prodl	equ	0xFF3
  5802                           intcon	equ	0xFF2
  5803                           intcon2	equ	0xFF1
  5804                           postinc0	equ	0xFEE
  5805                           wreg	equ	0xFE8
  5806                           postdec1	equ	0xFE5
  5807                           fsr1l	equ	0xFE1
  5808                           indf2	equ	0xFDF
  5809                           postinc2	equ	0xFDE
  5810                           postdec2	equ	0xFDD
  5811                           fsr2h	equ	0xFDA
  5812                           fsr2l	equ	0xFD9
  5813                           status	equ	0xFD8
  5814                           
  5815 ;; *************** function _TFT_GreenTab_Initialize *****************
  5816 ;; Defined at:
  5817 ;;		line 644 in file "ST7735_TFT.c"
  5818 ;; Parameters:    Size  Location     Type
  5819 ;;		None
  5820 ;; Auto vars:     Size  Location     Type
  5821 ;;		None
  5822 ;; Return value:  Size  Location     Type
  5823 ;;		None               void
  5824 ;; Registers used:
  5825 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5826 ;; Tracked objects:
  5827 ;;		On entry : 0/0
  5828 ;;		On exit  : 0/0
  5829 ;;		Unchanged: 0/0
  5830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5831 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5832 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5833 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5834 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5835 ;;Total ram usage:        0 bytes
  5836 ;; Hardware stack levels used:    1
  5837 ;; Hardware stack levels required when called:    6
  5838 ;; This function calls:
  5839 ;;		_Rcmd1
  5840 ;;		_Rcmd2red
  5841 ;;		_Rcmd3
  5842 ;;		_write_command
  5843 ;;		_write_data
  5844 ;; This function is called by:
  5845 ;;		_Initialize_Screen
  5846 ;; This function uses a non-reentrant model
  5847 ;;
  5848                           
  5849                           	psect	text22
  5850  001B10                     __ptext22:
  5851                           	opt stack 0
  5852  001B10                     _TFT_GreenTab_Initialize:
  5853                           	opt stack 23
  5854                           
  5855                           ;ST7735_TFT.c: 646: PORTCbits.RC1 = 1;
  5856                           
  5857                           ;incstack = 0
  5858  001B10  8282               	bsf	3970,1,c	;volatile
  5859                           
  5860                           ;ST7735_TFT.c: 647: PORTCbits.RC0 = 0;
  5861  001B12  9082               	bcf	3970,0,c	;volatile
  5862                           
  5863                           ;ST7735_TFT.c: 649: SSPSTAT=0x80;
  5864  001B14  0E80               	movlw	128
  5865  001B16  6EC7               	movwf	4039,c	;volatile
  5866                           
  5867                           ;ST7735_TFT.c: 650: SSPCON1=0x30;
  5868  001B18  0E30               	movlw	48
  5869  001B1A  6EC6               	movwf	4038,c	;volatile
  5870                           
  5871                           ;ST7735_TFT.c: 653: Rcmd1();
  5872  001B1C  ECB8  F006         	call	_Rcmd1	;wreg free
  5873                           
  5874                           ;ST7735_TFT.c: 654: Rcmd2red();
  5875  001B20  ECC5  F00C         	call	_Rcmd2red	;wreg free
  5876                           
  5877                           ;ST7735_TFT.c: 655: Rcmd3();
  5878  001B24  EC47  F008         	call	_Rcmd3	;wreg free
  5879                           
  5880                           ;ST7735_TFT.c: 656: write_command(0x36);
  5881  001B28  0E36               	movlw	54
  5882  001B2A  EC62  F00E         	call	_write_command
  5883                           
  5884                           ;ST7735_TFT.c: 657: write_data(0xC0);
  5885  001B2E  0EC0               	movlw	192
  5886  001B30  EC5A  F00E         	call	_write_data
  5887                           
  5888                           ;ST7735_TFT.c: 658: _tft_type = 1;
  5889  001B34  0E01               	movlw	1
  5890  001B36  6E55               	movwf	__tft_type,c
  5891  001B38  0012               	return		;funcret
  5892  001B3A                     __end_of_TFT_GreenTab_Initialize:
  5893                           	opt stack 0
  5894                           tblptru	equ	0xFF8
  5895                           tblptrh	equ	0xFF7
  5896                           tblptrl	equ	0xFF6
  5897                           tablat	equ	0xFF5
  5898                           prodh	equ	0xFF4
  5899                           prodl	equ	0xFF3
  5900                           intcon	equ	0xFF2
  5901                           intcon2	equ	0xFF1
  5902                           postinc0	equ	0xFEE
  5903                           wreg	equ	0xFE8
  5904                           postdec1	equ	0xFE5
  5905                           fsr1l	equ	0xFE1
  5906                           indf2	equ	0xFDF
  5907                           postinc2	equ	0xFDE
  5908                           postdec2	equ	0xFDD
  5909                           fsr2h	equ	0xFDA
  5910                           fsr2l	equ	0xFD9
  5911                           status	equ	0xFD8
  5912                           
  5913 ;; *************** function _Rcmd3 *****************
  5914 ;; Defined at:
  5915 ;;		line 338 in file "ST7735_TFT.c"
  5916 ;; Parameters:    Size  Location     Type
  5917 ;;		None
  5918 ;; Auto vars:     Size  Location     Type
  5919 ;;		None
  5920 ;; Return value:  Size  Location     Type
  5921 ;;		None               void
  5922 ;; Registers used:
  5923 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5924 ;; Tracked objects:
  5925 ;;		On entry : 0/0
  5926 ;;		On exit  : 0/0
  5927 ;;		Unchanged: 0/0
  5928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5929 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5930 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5931 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5932 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5933 ;;Total ram usage:        0 bytes
  5934 ;; Hardware stack levels used:    1
  5935 ;; Hardware stack levels required when called:    5
  5936 ;; This function calls:
  5937 ;;		_delay_ms
  5938 ;;		_write_command
  5939 ;;		_write_data
  5940 ;; This function is called by:
  5941 ;;		_TFT_GreenTab_Initialize
  5942 ;;		_TFT_BlackTab_Initialize
  5943 ;; This function uses a non-reentrant model
  5944 ;;
  5945                           
  5946                           	psect	text23
  5947  00108E                     __ptext23:
  5948                           	opt stack 0
  5949  00108E                     _Rcmd3:
  5950                           	opt stack 23
  5951                           
  5952                           ;ST7735_TFT.c: 340: write_command(0xE0);
  5953                           
  5954                           ;incstack = 0
  5955  00108E  0EE0               	movlw	224
  5956  001090  EC62  F00E         	call	_write_command
  5957                           
  5958                           ;ST7735_TFT.c: 341: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
  5959  001094  0E02               	movlw	2
  5960  001096  EC5A  F00E         	call	_write_data
  5961  00109A  0E1C               	movlw	28
  5962  00109C  EC5A  F00E         	call	_write_data
  5963  0010A0  0E07               	movlw	7
  5964  0010A2  EC5A  F00E         	call	_write_data
  5965  0010A6  0E12               	movlw	18
  5966  0010A8  EC5A  F00E         	call	_write_data
  5967                           
  5968                           ;ST7735_TFT.c: 342: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
  5969  0010AC  0E37               	movlw	55
  5970  0010AE  EC5A  F00E         	call	_write_data
  5971  0010B2  0E32               	movlw	50
  5972  0010B4  EC5A  F00E         	call	_write_data
  5973  0010B8  0E29               	movlw	41
  5974  0010BA  EC5A  F00E         	call	_write_data
  5975  0010BE  0E2D               	movlw	45
  5976  0010C0  EC5A  F00E         	call	_write_data
  5977                           
  5978                           ;ST7735_TFT.c: 343: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
  5979  0010C4  0E29               	movlw	41
  5980  0010C6  EC5A  F00E         	call	_write_data
  5981  0010CA  0E25               	movlw	37
  5982  0010CC  EC5A  F00E         	call	_write_data
  5983  0010D0  0E2B               	movlw	43
  5984  0010D2  EC5A  F00E         	call	_write_data
  5985  0010D6  0E39               	movlw	57
  5986  0010D8  EC5A  F00E         	call	_write_data
  5987                           
  5988                           ;ST7735_TFT.c: 344: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
  5989  0010DC  0E00               	movlw	0
  5990  0010DE  EC5A  F00E         	call	_write_data
  5991  0010E2  0E01               	movlw	1
  5992  0010E4  EC5A  F00E         	call	_write_data
  5993  0010E8  0E03               	movlw	3
  5994  0010EA  EC5A  F00E         	call	_write_data
  5995  0010EE  0E10               	movlw	16
  5996  0010F0  EC5A  F00E         	call	_write_data
  5997                           
  5998                           ;ST7735_TFT.c: 345: write_command(0xE1);
  5999  0010F4  0EE1               	movlw	225
  6000  0010F6  EC62  F00E         	call	_write_command
  6001                           
  6002                           ;ST7735_TFT.c: 346: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
  6003  0010FA  0E03               	movlw	3
  6004  0010FC  EC5A  F00E         	call	_write_data
  6005  001100  0E1D               	movlw	29
  6006  001102  EC5A  F00E         	call	_write_data
  6007  001106  0E07               	movlw	7
  6008  001108  EC5A  F00E         	call	_write_data
  6009  00110C  0E06               	movlw	6
  6010  00110E  EC5A  F00E         	call	_write_data
  6011                           
  6012                           ;ST7735_TFT.c: 347: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
  6013  001112  0E2E               	movlw	46
  6014  001114  EC5A  F00E         	call	_write_data
  6015  001118  0E2C               	movlw	44
  6016  00111A  EC5A  F00E         	call	_write_data
  6017  00111E  0E29               	movlw	41
  6018  001120  EC5A  F00E         	call	_write_data
  6019  001124  0E2D               	movlw	45
  6020  001126  EC5A  F00E         	call	_write_data
  6021                           
  6022                           ;ST7735_TFT.c: 348: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
  6023  00112A  0E2E               	movlw	46
  6024  00112C  EC5A  F00E         	call	_write_data
  6025  001130  0E2E               	movlw	46
  6026  001132  EC5A  F00E         	call	_write_data
  6027  001136  0E37               	movlw	55
  6028  001138  EC5A  F00E         	call	_write_data
  6029  00113C  0E3F               	movlw	63
  6030  00113E  EC5A  F00E         	call	_write_data
  6031                           
  6032                           ;ST7735_TFT.c: 349: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
  6033  001142  0E00               	movlw	0
  6034  001144  EC5A  F00E         	call	_write_data
  6035  001148  0E00               	movlw	0
  6036  00114A  EC5A  F00E         	call	_write_data
  6037  00114E  0E02               	movlw	2
  6038  001150  EC5A  F00E         	call	_write_data
  6039  001154  0E10               	movlw	16
  6040  001156  EC5A  F00E         	call	_write_data
  6041                           
  6042                           ;ST7735_TFT.c: 350: write_command(0x13);
  6043  00115A  0E13               	movlw	19
  6044  00115C  EC62  F00E         	call	_write_command
  6045                           
  6046                           ;ST7735_TFT.c: 351: delay_ms(10);
  6047  001160  0E00               	movlw	0
  6048  001162  6E18               	movwf	delay_ms@ms+1,c
  6049  001164  0E0A               	movlw	10
  6050  001166  6E17               	movwf	delay_ms@ms,c
  6051  001168  ECED  F00B         	call	_delay_ms	;wreg free
  6052                           
  6053                           ;ST7735_TFT.c: 352: write_command(0x29);
  6054  00116C  0E29               	movlw	41
  6055  00116E  EC62  F00E         	call	_write_command
  6056                           
  6057                           ;ST7735_TFT.c: 353: delay_ms(100);
  6058  001172  0E00               	movlw	0
  6059  001174  6E18               	movwf	delay_ms@ms+1,c
  6060  001176  0E64               	movlw	100
  6061  001178  6E17               	movwf	delay_ms@ms,c
  6062  00117A  ECED  F00B         	call	_delay_ms	;wreg free
  6063  00117E  0012               	return		;funcret
  6064  001180                     __end_of_Rcmd3:
  6065                           	opt stack 0
  6066                           tblptru	equ	0xFF8
  6067                           tblptrh	equ	0xFF7
  6068                           tblptrl	equ	0xFF6
  6069                           tablat	equ	0xFF5
  6070                           prodh	equ	0xFF4
  6071                           prodl	equ	0xFF3
  6072                           intcon	equ	0xFF2
  6073                           intcon2	equ	0xFF1
  6074                           postinc0	equ	0xFEE
  6075                           wreg	equ	0xFE8
  6076                           postdec1	equ	0xFE5
  6077                           fsr1l	equ	0xFE1
  6078                           indf2	equ	0xFDF
  6079                           postinc2	equ	0xFDE
  6080                           postdec2	equ	0xFDD
  6081                           fsr2h	equ	0xFDA
  6082                           fsr2l	equ	0xFD9
  6083                           status	equ	0xFD8
  6084                           
  6085 ;; *************** function _Rcmd2red *****************
  6086 ;; Defined at:
  6087 ;;		line 328 in file "ST7735_TFT.c"
  6088 ;; Parameters:    Size  Location     Type
  6089 ;;		None
  6090 ;; Auto vars:     Size  Location     Type
  6091 ;;		None
  6092 ;; Return value:  Size  Location     Type
  6093 ;;		None               void
  6094 ;; Registers used:
  6095 ;;		wreg, status,2, cstack
  6096 ;; Tracked objects:
  6097 ;;		On entry : 0/0
  6098 ;;		On exit  : 0/0
  6099 ;;		Unchanged: 0/0
  6100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6101 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6102 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6103 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6104 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6105 ;;Total ram usage:        0 bytes
  6106 ;; Hardware stack levels used:    1
  6107 ;; Hardware stack levels required when called:    5
  6108 ;; This function calls:
  6109 ;;		_write_command
  6110 ;;		_write_data
  6111 ;; This function is called by:
  6112 ;;		_TFT_GreenTab_Initialize
  6113 ;; This function uses a non-reentrant model
  6114 ;;
  6115                           
  6116                           	psect	text24
  6117  00198A                     __ptext24:
  6118                           	opt stack 0
  6119  00198A                     _Rcmd2red:
  6120                           	opt stack 23
  6121                           
  6122                           ;ST7735_TFT.c: 330: write_command(0x2A);
  6123                           
  6124                           ;incstack = 0
  6125  00198A  0E2A               	movlw	42
  6126  00198C  EC62  F00E         	call	_write_command
  6127                           
  6128                           ;ST7735_TFT.c: 331: write_data(0x00); write_data(0x00);
  6129  001990  0E00               	movlw	0
  6130  001992  EC5A  F00E         	call	_write_data
  6131  001996  0E00               	movlw	0
  6132  001998  EC5A  F00E         	call	_write_data
  6133                           
  6134                           ;ST7735_TFT.c: 332: write_data(0x00); write_data(0x7F);
  6135  00199C  0E00               	movlw	0
  6136  00199E  EC5A  F00E         	call	_write_data
  6137  0019A2  0E7F               	movlw	127
  6138  0019A4  EC5A  F00E         	call	_write_data
  6139                           
  6140                           ;ST7735_TFT.c: 333: write_command(0x2B);
  6141  0019A8  0E2B               	movlw	43
  6142  0019AA  EC62  F00E         	call	_write_command
  6143                           
  6144                           ;ST7735_TFT.c: 334: write_data(0x00); write_data(0x00);
  6145  0019AE  0E00               	movlw	0
  6146  0019B0  EC5A  F00E         	call	_write_data
  6147  0019B4  0E00               	movlw	0
  6148  0019B6  EC5A  F00E         	call	_write_data
  6149                           
  6150                           ;ST7735_TFT.c: 335: write_data(0x00); write_data(0x9F);
  6151  0019BA  0E00               	movlw	0
  6152  0019BC  EC5A  F00E         	call	_write_data
  6153  0019C0  0E9F               	movlw	159
  6154  0019C2  EC5A  F00E         	call	_write_data
  6155  0019C6  0012               	return		;funcret
  6156  0019C8                     __end_of_Rcmd2red:
  6157                           	opt stack 0
  6158                           tblptru	equ	0xFF8
  6159                           tblptrh	equ	0xFF7
  6160                           tblptrl	equ	0xFF6
  6161                           tablat	equ	0xFF5
  6162                           prodh	equ	0xFF4
  6163                           prodl	equ	0xFF3
  6164                           intcon	equ	0xFF2
  6165                           intcon2	equ	0xFF1
  6166                           postinc0	equ	0xFEE
  6167                           wreg	equ	0xFE8
  6168                           postdec1	equ	0xFE5
  6169                           fsr1l	equ	0xFE1
  6170                           indf2	equ	0xFDF
  6171                           postinc2	equ	0xFDE
  6172                           postdec2	equ	0xFDD
  6173                           fsr2h	equ	0xFDA
  6174                           fsr2l	equ	0xFD9
  6175                           status	equ	0xFD8
  6176                           
  6177 ;; *************** function _Rcmd1 *****************
  6178 ;; Defined at:
  6179 ;;		line 281 in file "ST7735_TFT.c"
  6180 ;; Parameters:    Size  Location     Type
  6181 ;;		None
  6182 ;; Auto vars:     Size  Location     Type
  6183 ;;		None
  6184 ;; Return value:  Size  Location     Type
  6185 ;;		None               void
  6186 ;; Registers used:
  6187 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6188 ;; Tracked objects:
  6189 ;;		On entry : 0/0
  6190 ;;		On exit  : 0/0
  6191 ;;		Unchanged: 0/0
  6192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6193 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6194 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6195 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6196 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6197 ;;Total ram usage:        0 bytes
  6198 ;; Hardware stack levels used:    1
  6199 ;; Hardware stack levels required when called:    5
  6200 ;; This function calls:
  6201 ;;		_delay_ms
  6202 ;;		_write_command
  6203 ;;		_write_data
  6204 ;; This function is called by:
  6205 ;;		_TFT_GreenTab_Initialize
  6206 ;;		_TFT_BlackTab_Initialize
  6207 ;; This function uses a non-reentrant model
  6208 ;;
  6209                           
  6210                           	psect	text25
  6211  000D70                     __ptext25:
  6212                           	opt stack 0
  6213  000D70                     _Rcmd1:
  6214                           	opt stack 23
  6215                           
  6216                           ;ST7735_TFT.c: 283: write_command(0x01);
  6217                           
  6218                           ;incstack = 0
  6219  000D70  0E01               	movlw	1
  6220  000D72  EC62  F00E         	call	_write_command
  6221                           
  6222                           ;ST7735_TFT.c: 284: delay_ms(150);
  6223  000D76  0E00               	movlw	0
  6224  000D78  6E18               	movwf	delay_ms@ms+1,c
  6225  000D7A  0E96               	movlw	150
  6226  000D7C  6E17               	movwf	delay_ms@ms,c
  6227  000D7E  ECED  F00B         	call	_delay_ms	;wreg free
  6228                           
  6229                           ;ST7735_TFT.c: 285: write_command(0x11);
  6230  000D82  0E11               	movlw	17
  6231  000D84  EC62  F00E         	call	_write_command
  6232                           
  6233                           ;ST7735_TFT.c: 286: delay_ms(500);
  6234  000D88  0E01               	movlw	1
  6235  000D8A  6E18               	movwf	delay_ms@ms+1,c
  6236  000D8C  0EF4               	movlw	244
  6237  000D8E  6E17               	movwf	delay_ms@ms,c
  6238  000D90  ECED  F00B         	call	_delay_ms	;wreg free
  6239                           
  6240                           ;ST7735_TFT.c: 287: write_command(0xB1);
  6241  000D94  0EB1               	movlw	177
  6242  000D96  EC62  F00E         	call	_write_command
  6243                           
  6244                           ;ST7735_TFT.c: 288: write_data(0x01);
  6245  000D9A  0E01               	movlw	1
  6246  000D9C  EC5A  F00E         	call	_write_data
  6247                           
  6248                           ;ST7735_TFT.c: 289: write_data(0x2C);
  6249  000DA0  0E2C               	movlw	44
  6250  000DA2  EC5A  F00E         	call	_write_data
  6251                           
  6252                           ;ST7735_TFT.c: 290: write_data(0x2D);
  6253  000DA6  0E2D               	movlw	45
  6254  000DA8  EC5A  F00E         	call	_write_data
  6255                           
  6256                           ;ST7735_TFT.c: 291: write_command(0xB2);
  6257  000DAC  0EB2               	movlw	178
  6258  000DAE  EC62  F00E         	call	_write_command
  6259                           
  6260                           ;ST7735_TFT.c: 292: write_data(0x01);
  6261  000DB2  0E01               	movlw	1
  6262  000DB4  EC5A  F00E         	call	_write_data
  6263                           
  6264                           ;ST7735_TFT.c: 293: write_data(0x2C);
  6265  000DB8  0E2C               	movlw	44
  6266  000DBA  EC5A  F00E         	call	_write_data
  6267                           
  6268                           ;ST7735_TFT.c: 294: write_data(0x2D);
  6269  000DBE  0E2D               	movlw	45
  6270  000DC0  EC5A  F00E         	call	_write_data
  6271                           
  6272                           ;ST7735_TFT.c: 295: write_command(0xB3);
  6273  000DC4  0EB3               	movlw	179
  6274  000DC6  EC62  F00E         	call	_write_command
  6275                           
  6276                           ;ST7735_TFT.c: 296: write_data(0x01);
  6277  000DCA  0E01               	movlw	1
  6278  000DCC  EC5A  F00E         	call	_write_data
  6279                           
  6280                           ;ST7735_TFT.c: 297: write_data(0x2C);
  6281  000DD0  0E2C               	movlw	44
  6282  000DD2  EC5A  F00E         	call	_write_data
  6283                           
  6284                           ;ST7735_TFT.c: 298: write_data(0x2D);
  6285  000DD6  0E2D               	movlw	45
  6286  000DD8  EC5A  F00E         	call	_write_data
  6287                           
  6288                           ;ST7735_TFT.c: 299: write_data(0x01);
  6289  000DDC  0E01               	movlw	1
  6290  000DDE  EC5A  F00E         	call	_write_data
  6291                           
  6292                           ;ST7735_TFT.c: 300: write_data(0x2C);
  6293  000DE2  0E2C               	movlw	44
  6294  000DE4  EC5A  F00E         	call	_write_data
  6295                           
  6296                           ;ST7735_TFT.c: 301: write_data(0x2D);
  6297  000DE8  0E2D               	movlw	45
  6298  000DEA  EC5A  F00E         	call	_write_data
  6299                           
  6300                           ;ST7735_TFT.c: 302: write_command(0xB4);
  6301  000DEE  0EB4               	movlw	180
  6302  000DF0  EC62  F00E         	call	_write_command
  6303                           
  6304                           ;ST7735_TFT.c: 303: write_data(0x07);
  6305  000DF4  0E07               	movlw	7
  6306  000DF6  EC5A  F00E         	call	_write_data
  6307                           
  6308                           ;ST7735_TFT.c: 304: write_command(0xC0);
  6309  000DFA  0EC0               	movlw	192
  6310  000DFC  EC62  F00E         	call	_write_command
  6311                           
  6312                           ;ST7735_TFT.c: 305: write_data(0xA2);
  6313  000E00  0EA2               	movlw	162
  6314  000E02  EC5A  F00E         	call	_write_data
  6315                           
  6316                           ;ST7735_TFT.c: 306: write_data(0x02);
  6317  000E06  0E02               	movlw	2
  6318  000E08  EC5A  F00E         	call	_write_data
  6319                           
  6320                           ;ST7735_TFT.c: 307: write_data(0x84);
  6321  000E0C  0E84               	movlw	132
  6322  000E0E  EC5A  F00E         	call	_write_data
  6323                           
  6324                           ;ST7735_TFT.c: 308: write_command(0xC1);
  6325  000E12  0EC1               	movlw	193
  6326  000E14  EC62  F00E         	call	_write_command
  6327                           
  6328                           ;ST7735_TFT.c: 309: write_data(0xC5);
  6329  000E18  0EC5               	movlw	197
  6330  000E1A  EC5A  F00E         	call	_write_data
  6331                           
  6332                           ;ST7735_TFT.c: 310: write_command(0xC2);
  6333  000E1E  0EC2               	movlw	194
  6334  000E20  EC62  F00E         	call	_write_command
  6335                           
  6336                           ;ST7735_TFT.c: 311: write_data(0x0A);
  6337  000E24  0E0A               	movlw	10
  6338  000E26  EC5A  F00E         	call	_write_data
  6339                           
  6340                           ;ST7735_TFT.c: 312: write_data(0x00);
  6341  000E2A  0E00               	movlw	0
  6342  000E2C  EC5A  F00E         	call	_write_data
  6343                           
  6344                           ;ST7735_TFT.c: 313: write_command(0xC3);
  6345  000E30  0EC3               	movlw	195
  6346  000E32  EC62  F00E         	call	_write_command
  6347                           
  6348                           ;ST7735_TFT.c: 314: write_data(0x8A);
  6349  000E36  0E8A               	movlw	138
  6350  000E38  EC5A  F00E         	call	_write_data
  6351                           
  6352                           ;ST7735_TFT.c: 315: write_data(0x2A);
  6353  000E3C  0E2A               	movlw	42
  6354  000E3E  EC5A  F00E         	call	_write_data
  6355                           
  6356                           ;ST7735_TFT.c: 316: write_command(0xC4);
  6357  000E42  0EC4               	movlw	196
  6358  000E44  EC62  F00E         	call	_write_command
  6359                           
  6360                           ;ST7735_TFT.c: 317: write_data(0x8A);
  6361  000E48  0E8A               	movlw	138
  6362  000E4A  EC5A  F00E         	call	_write_data
  6363                           
  6364                           ;ST7735_TFT.c: 318: write_data(0xEE);
  6365  000E4E  0EEE               	movlw	238
  6366  000E50  EC5A  F00E         	call	_write_data
  6367                           
  6368                           ;ST7735_TFT.c: 319: write_command(0xC5);
  6369  000E54  0EC5               	movlw	197
  6370  000E56  EC62  F00E         	call	_write_command
  6371                           
  6372                           ;ST7735_TFT.c: 320: write_data(0x0E);
  6373  000E5A  0E0E               	movlw	14
  6374  000E5C  EC5A  F00E         	call	_write_data
  6375                           
  6376                           ;ST7735_TFT.c: 321: write_command(0x20);
  6377  000E60  0E20               	movlw	32
  6378  000E62  EC62  F00E         	call	_write_command
  6379                           
  6380                           ;ST7735_TFT.c: 322: write_command(0x36);
  6381  000E66  0E36               	movlw	54
  6382  000E68  EC62  F00E         	call	_write_command
  6383                           
  6384                           ;ST7735_TFT.c: 323: write_data(0xC8);
  6385  000E6C  0EC8               	movlw	200
  6386  000E6E  EC5A  F00E         	call	_write_data
  6387                           
  6388                           ;ST7735_TFT.c: 324: write_command(0x3A);
  6389  000E72  0E3A               	movlw	58
  6390  000E74  EC62  F00E         	call	_write_command
  6391                           
  6392                           ;ST7735_TFT.c: 325: write_data(0x05);
  6393  000E78  0E05               	movlw	5
  6394  000E7A  EC5A  F00E         	call	_write_data
  6395  000E7E  0012               	return		;funcret
  6396  000E80                     __end_of_Rcmd1:
  6397                           	opt stack 0
  6398                           tblptru	equ	0xFF8
  6399                           tblptrh	equ	0xFF7
  6400                           tblptrl	equ	0xFF6
  6401                           tablat	equ	0xFF5
  6402                           prodh	equ	0xFF4
  6403                           prodl	equ	0xFF3
  6404                           intcon	equ	0xFF2
  6405                           intcon2	equ	0xFF1
  6406                           postinc0	equ	0xFEE
  6407                           wreg	equ	0xFE8
  6408                           postdec1	equ	0xFE5
  6409                           fsr1l	equ	0xFE1
  6410                           indf2	equ	0xFDF
  6411                           postinc2	equ	0xFDE
  6412                           postdec2	equ	0xFDD
  6413                           fsr2h	equ	0xFDA
  6414                           fsr2l	equ	0xFD9
  6415                           status	equ	0xFD8
  6416                           
  6417 ;; *************** function _write_data *****************
  6418 ;; Defined at:
  6419 ;;		line 209 in file "ST7735_TFT.c"
  6420 ;; Parameters:    Size  Location     Type
  6421 ;;  data_           1    wreg     unsigned char 
  6422 ;; Auto vars:     Size  Location     Type
  6423 ;;  data_           1   18[COMRAM] unsigned char 
  6424 ;; Return value:  Size  Location     Type
  6425 ;;		None               void
  6426 ;; Registers used:
  6427 ;;		wreg, status,2, cstack
  6428 ;; Tracked objects:
  6429 ;;		On entry : 0/0
  6430 ;;		On exit  : 0/0
  6431 ;;		Unchanged: 0/0
  6432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6433 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6434 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6435 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6436 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6437 ;;Total ram usage:        1 bytes
  6438 ;; Hardware stack levels used:    1
  6439 ;; Hardware stack levels required when called:    4
  6440 ;; This function calls:
  6441 ;;		_spiwrite
  6442 ;; This function is called by:
  6443 ;;		_Rcmd1
  6444 ;;		_Rcmd2red
  6445 ;;		_Rcmd3
  6446 ;;		_setAddrWindow
  6447 ;;		_drawPixel
  6448 ;;		_TFT_GreenTab_Initialize
  6449 ;;		_Bcmd
  6450 ;;		_setScrollDefinition
  6451 ;;		_Rcmd2green
  6452 ;;		_VerticalScroll
  6453 ;; This function uses a non-reentrant model
  6454 ;;
  6455                           
  6456                           	psect	text26
  6457  001CB4                     __ptext26:
  6458                           	opt stack 0
  6459  001CB4                     _write_data:
  6460                           	opt stack 22
  6461                           
  6462                           ;incstack = 0
  6463                           ;write_data@data_ stored from wreg
  6464  001CB4  6E13               	movwf	write_data@data_,c
  6465                           
  6466                           ;ST7735_TFT.c: 211: PORTCbits.RC1 = 0;
  6467  001CB6  9282               	bcf	3970,1,c	;volatile
  6468                           
  6469                           ;ST7735_TFT.c: 212: PORTCbits.RC0 = 1;
  6470  001CB8  8082               	bsf	3970,0,c	;volatile
  6471                           
  6472                           ;ST7735_TFT.c: 213: spiwrite(data_);
  6473  001CBA  5013               	movf	write_data@data_,w,c
  6474  001CBC  EC19  F00E         	call	_spiwrite
  6475                           
  6476                           ;ST7735_TFT.c: 214: PORTCbits.RC1 = 1;
  6477  001CC0  8282               	bsf	3970,1,c	;volatile
  6478  001CC2  0012               	return		;funcret
  6479  001CC4                     __end_of_write_data:
  6480                           	opt stack 0
  6481                           tblptru	equ	0xFF8
  6482                           tblptrh	equ	0xFF7
  6483                           tblptrl	equ	0xFF6
  6484                           tablat	equ	0xFF5
  6485                           prodh	equ	0xFF4
  6486                           prodl	equ	0xFF3
  6487                           intcon	equ	0xFF2
  6488                           intcon2	equ	0xFF1
  6489                           postinc0	equ	0xFEE
  6490                           wreg	equ	0xFE8
  6491                           postdec1	equ	0xFE5
  6492                           fsr1l	equ	0xFE1
  6493                           indf2	equ	0xFDF
  6494                           postinc2	equ	0xFDE
  6495                           postdec2	equ	0xFDD
  6496                           fsr2h	equ	0xFDA
  6497                           fsr2l	equ	0xFD9
  6498                           status	equ	0xFD8
  6499                           
  6500 ;; *************** function _write_command *****************
  6501 ;; Defined at:
  6502 ;;		line 198 in file "ST7735_TFT.c"
  6503 ;; Parameters:    Size  Location     Type
  6504 ;;  cmd_            1    wreg     unsigned char 
  6505 ;; Auto vars:     Size  Location     Type
  6506 ;;  cmd_            1   18[COMRAM] unsigned char 
  6507 ;; Return value:  Size  Location     Type
  6508 ;;		None               void
  6509 ;; Registers used:
  6510 ;;		wreg, status,2, cstack
  6511 ;; Tracked objects:
  6512 ;;		On entry : 0/0
  6513 ;;		On exit  : 0/0
  6514 ;;		Unchanged: 0/0
  6515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6516 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6517 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6518 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6519 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6520 ;;Total ram usage:        1 bytes
  6521 ;; Hardware stack levels used:    1
  6522 ;; Hardware stack levels required when called:    4
  6523 ;; This function calls:
  6524 ;;		_spiwrite
  6525 ;; This function is called by:
  6526 ;;		_Rcmd1
  6527 ;;		_Rcmd2red
  6528 ;;		_Rcmd3
  6529 ;;		_setAddrWindow
  6530 ;;		_TFT_GreenTab_Initialize
  6531 ;;		_Bcmd
  6532 ;;		_setScrollDefinition
  6533 ;;		_Rcmd2green
  6534 ;;		_VerticalScroll
  6535 ;; This function uses a non-reentrant model
  6536 ;;
  6537                           
  6538                           	psect	text27
  6539  001CC4                     __ptext27:
  6540                           	opt stack 0
  6541  001CC4                     _write_command:
  6542                           	opt stack 22
  6543                           
  6544                           ;incstack = 0
  6545                           ;write_command@cmd_ stored from wreg
  6546  001CC4  6E13               	movwf	write_command@cmd_,c
  6547                           
  6548                           ;ST7735_TFT.c: 200: PORTCbits.RC1 = 0;
  6549  001CC6  9282               	bcf	3970,1,c	;volatile
  6550                           
  6551                           ;ST7735_TFT.c: 202: PORTCbits.RC0 = 0;
  6552  001CC8  9082               	bcf	3970,0,c	;volatile
  6553                           
  6554                           ;ST7735_TFT.c: 203: spiwrite(cmd_);
  6555  001CCA  5013               	movf	write_command@cmd_,w,c
  6556  001CCC  EC19  F00E         	call	_spiwrite
  6557                           
  6558                           ;ST7735_TFT.c: 205: PORTCbits.RC1 = 1;
  6559  001CD0  8282               	bsf	3970,1,c	;volatile
  6560  001CD2  0012               	return		;funcret
  6561  001CD4                     __end_of_write_command:
  6562                           	opt stack 0
  6563                           tblptru	equ	0xFF8
  6564                           tblptrh	equ	0xFF7
  6565                           tblptrl	equ	0xFF6
  6566                           tablat	equ	0xFF5
  6567                           prodh	equ	0xFF4
  6568                           prodl	equ	0xFF3
  6569                           intcon	equ	0xFF2
  6570                           intcon2	equ	0xFF1
  6571                           postinc0	equ	0xFEE
  6572                           wreg	equ	0xFE8
  6573                           postdec1	equ	0xFE5
  6574                           fsr1l	equ	0xFE1
  6575                           indf2	equ	0xFDF
  6576                           postinc2	equ	0xFDE
  6577                           postdec2	equ	0xFDD
  6578                           fsr2h	equ	0xFDA
  6579                           fsr2l	equ	0xFD9
  6580                           status	equ	0xFD8
  6581                           
  6582 ;; *************** function _spiwrite *****************
  6583 ;; Defined at:
  6584 ;;		line 189 in file "ST7735_TFT.c"
  6585 ;; Parameters:    Size  Location     Type
  6586 ;;  spidata         1    wreg     unsigned char 
  6587 ;; Auto vars:     Size  Location     Type
  6588 ;;  spidata         1   17[COMRAM] unsigned char 
  6589 ;;  x               1   16[COMRAM] unsigned char 
  6590 ;; Return value:  Size  Location     Type
  6591 ;;		None               void
  6592 ;; Registers used:
  6593 ;;		wreg
  6594 ;; Tracked objects:
  6595 ;;		On entry : 0/0
  6596 ;;		On exit  : 0/0
  6597 ;;		Unchanged: 0/0
  6598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6599 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6600 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6601 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6602 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6603 ;;Total ram usage:        2 bytes
  6604 ;; Hardware stack levels used:    1
  6605 ;; Hardware stack levels required when called:    3
  6606 ;; This function calls:
  6607 ;;		Nothing
  6608 ;; This function is called by:
  6609 ;;		_write_command
  6610 ;;		_write_data
  6611 ;;		_drawFastVLine
  6612 ;;		_fillRectangle
  6613 ;;		_drawFastHLine
  6614 ;; This function uses a non-reentrant model
  6615 ;;
  6616                           
  6617                           	psect	text28
  6618  001C32                     __ptext28:
  6619                           	opt stack 0
  6620  001C32                     _spiwrite:
  6621                           	opt stack 24
  6622                           
  6623                           ;incstack = 0
  6624                           ;spiwrite@spidata stored from wreg
  6625  001C32  6E12               	movwf	spiwrite@spidata,c
  6626                           
  6627                           ;ST7735_TFT.c: 191: char x;
  6628                           ;ST7735_TFT.c: 192: PIR1bits.SSPIF = 0;
  6629  001C34  969E               	bcf	3998,3,c	;volatile
  6630                           
  6631                           ;ST7735_TFT.c: 193: x = SSPBUF;
  6632  001C36  CFC9 F011          	movff	4041,spiwrite@x	;volatile
  6633                           
  6634                           ;ST7735_TFT.c: 194: SSPBUF = spidata;
  6635  001C3A  C012  FFC9         	movff	spiwrite@spidata,4041	;volatile
  6636                           
  6637                           ;ST7735_TFT.c: 195: while (!SSPSTATbits.BF);
  6638  001C3E  D000               	goto	l428
  6639  001C40                     l428:
  6640  001C40  A0C7               	btfss	4039,0,c	;volatile
  6641  001C42  D7FE               	goto	l428
  6642  001C44  0012               	return		;funcret
  6643  001C46                     __end_of_spiwrite:
  6644                           	opt stack 0
  6645                           tblptru	equ	0xFF8
  6646                           tblptrh	equ	0xFF7
  6647                           tblptrl	equ	0xFF6
  6648                           tablat	equ	0xFF5
  6649                           prodh	equ	0xFF4
  6650                           prodl	equ	0xFF3
  6651                           intcon	equ	0xFF2
  6652                           intcon2	equ	0xFF1
  6653                           postinc0	equ	0xFEE
  6654                           wreg	equ	0xFE8
  6655                           postdec1	equ	0xFE5
  6656                           fsr1l	equ	0xFE1
  6657                           indf2	equ	0xFDF
  6658                           postinc2	equ	0xFDE
  6659                           postdec2	equ	0xFDD
  6660                           fsr2h	equ	0xFDA
  6661                           fsr2l	equ	0xFD9
  6662                           status	equ	0xFD8
  6663                           
  6664 ;; *************** function _LCD_Reset *****************
  6665 ;; Defined at:
  6666 ;;		line 217 in file "ST7735_TFT.c"
  6667 ;; Parameters:    Size  Location     Type
  6668 ;;		None
  6669 ;; Auto vars:     Size  Location     Type
  6670 ;;		None
  6671 ;; Return value:  Size  Location     Type
  6672 ;;		None               void
  6673 ;; Registers used:
  6674 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6675 ;; Tracked objects:
  6676 ;;		On entry : 0/0
  6677 ;;		On exit  : 0/0
  6678 ;;		Unchanged: 0/0
  6679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6680 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6681 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6682 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6683 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6684 ;;Total ram usage:        0 bytes
  6685 ;; Hardware stack levels used:    1
  6686 ;; Hardware stack levels required when called:    5
  6687 ;; This function calls:
  6688 ;;		_delay_ms
  6689 ;; This function is called by:
  6690 ;;		_Initialize_Screen
  6691 ;; This function uses a non-reentrant model
  6692 ;;
  6693                           
  6694                           	psect	text29
  6695  001C5A                     __ptext29:
  6696                           	opt stack 0
  6697  001C5A                     _LCD_Reset:
  6698                           	opt stack 24
  6699                           
  6700                           ;ST7735_TFT.c: 219: PORTCbits.RC2 = 0;
  6701                           
  6702                           ;incstack = 0
  6703  001C5A  9482               	bcf	3970,2,c	;volatile
  6704                           
  6705                           ;ST7735_TFT.c: 220: delay_ms(100);
  6706  001C5C  0E00               	movlw	0
  6707  001C5E  6E18               	movwf	delay_ms@ms+1,c
  6708  001C60  0E64               	movlw	100
  6709  001C62  6E17               	movwf	delay_ms@ms,c
  6710  001C64  ECED  F00B         	call	_delay_ms	;wreg free
  6711                           
  6712                           ;ST7735_TFT.c: 221: PORTCbits.RC2 = 1;
  6713  001C68  8482               	bsf	3970,2,c	;volatile
  6714  001C6A  0012               	return		;funcret
  6715  001C6C                     __end_of_LCD_Reset:
  6716                           	opt stack 0
  6717                           tblptru	equ	0xFF8
  6718                           tblptrh	equ	0xFF7
  6719                           tblptrl	equ	0xFF6
  6720                           tablat	equ	0xFF5
  6721                           prodh	equ	0xFF4
  6722                           prodl	equ	0xFF3
  6723                           intcon	equ	0xFF2
  6724                           intcon2	equ	0xFF1
  6725                           postinc0	equ	0xFEE
  6726                           wreg	equ	0xFE8
  6727                           postdec1	equ	0xFE5
  6728                           fsr1l	equ	0xFE1
  6729                           indf2	equ	0xFDF
  6730                           postinc2	equ	0xFDE
  6731                           postdec2	equ	0xFDD
  6732                           fsr2h	equ	0xFDA
  6733                           fsr2l	equ	0xFD9
  6734                           status	equ	0xFD8
  6735                           
  6736 ;; *************** function _delay_ms *****************
  6737 ;; Defined at:
  6738 ;;		line 64 in file "ST7735_TFT.c"
  6739 ;; Parameters:    Size  Location     Type
  6740 ;;  ms              2   22[COMRAM] int 
  6741 ;; Auto vars:     Size  Location     Type
  6742 ;;  count           2   26[COMRAM] int 
  6743 ;; Return value:  Size  Location     Type
  6744 ;;		None               void
  6745 ;; Registers used:
  6746 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6747 ;; Tracked objects:
  6748 ;;		On entry : 0/0
  6749 ;;		On exit  : 0/0
  6750 ;;		Unchanged: 0/0
  6751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6752 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6753 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6754 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6755 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6756 ;;Total ram usage:        6 bytes
  6757 ;; Hardware stack levels used:    1
  6758 ;; Hardware stack levels required when called:    4
  6759 ;; This function calls:
  6760 ;;		___wmul
  6761 ;; This function is called by:
  6762 ;;		_LCD_Reset
  6763 ;;		_Rcmd1
  6764 ;;		_Rcmd3
  6765 ;;		_Bcmd
  6766 ;; This function uses a non-reentrant model
  6767 ;;
  6768                           
  6769                           	psect	text30
  6770  0017DA                     __ptext30:
  6771                           	opt stack 0
  6772  0017DA                     _delay_ms:
  6773                           	opt stack 23
  6774                           
  6775                           ;ST7735_TFT.c: 70: int count;
  6776                           ;ST7735_TFT.c: 71: count = 8000000/4000/8 * ms;
  6777                           
  6778                           ;incstack = 0
  6779  0017DA  C017  F011         	movff	delay_ms@ms,___wmul@multiplier
  6780  0017DE  C018  F012         	movff	delay_ms@ms+1,___wmul@multiplier+1
  6781  0017E2  0E00               	movlw	0
  6782  0017E4  6E14               	movwf	___wmul@multiplicand+1,c
  6783  0017E6  0EFA               	movlw	250
  6784  0017E8  6E13               	movwf	___wmul@multiplicand,c
  6785  0017EA  EC9D  F00D         	call	___wmul	;wreg free
  6786  0017EE  C011  F01B         	movff	?___wmul,delay_ms@count
  6787  0017F2  C012  F01C         	movff	?___wmul+1,delay_ms@count+1
  6788                           
  6789                           ;ST7735_TFT.c: 72: count = (0xffff - count);
  6790  0017F6  C01B  F019         	movff	delay_ms@count,??_delay_ms
  6791  0017FA  C01C  F01A         	movff	delay_ms@count+1,??_delay_ms+1
  6792  0017FE  1E19               	comf	??_delay_ms,f,c
  6793  001800  1E1A               	comf	??_delay_ms+1,f,c
  6794  001802  4A19               	infsnz	??_delay_ms,f,c
  6795  001804  2A1A               	incf	??_delay_ms+1,f,c
  6796  001806  0EFF               	movlw	255
  6797  001808  2419               	addwf	??_delay_ms,w,c
  6798  00180A  6E1B               	movwf	delay_ms@count,c
  6799  00180C  0EFF               	movlw	255
  6800  00180E  201A               	addwfc	??_delay_ms+1,w,c
  6801  001810  6E1C               	movwf	delay_ms@count+1,c
  6802                           
  6803                           ;ST7735_TFT.c: 74: T3CON = 0xb8;
  6804  001812  0EB8               	movlw	184
  6805  001814  6EB1               	movwf	4017,c	;volatile
  6806                           
  6807                           ;ST7735_TFT.c: 76: TMR3L = count & 0x00ff;
  6808  001816  C01B  FFB2         	movff	delay_ms@count,4018	;volatile
  6809                           
  6810                           ;ST7735_TFT.c: 77: TMR3H = count >> 8;
  6811  00181A  501C               	movf	delay_ms@count+1,w,c
  6812  00181C  6EB3               	movwf	4019,c	;volatile
  6813                           
  6814                           ;ST7735_TFT.c: 79: PIR2bits.TMR3IF = 0;
  6815  00181E  92A1               	bcf	4001,1,c	;volatile
  6816                           
  6817                           ;ST7735_TFT.c: 80: T3CONbits.TMR3ON = 1;
  6818  001820  80B1               	bsf	4017,0,c	;volatile
  6819                           
  6820                           ;ST7735_TFT.c: 82: while (PIR2bits.TMR3IF == 0);
  6821  001822  D000               	goto	l418
  6822  001824                     l418:
  6823  001824  A2A1               	btfss	4001,1,c	;volatile
  6824  001826  D7FE               	goto	l418
  6825                           
  6826                           ;ST7735_TFT.c: 83: T3CONbits.TMR3ON = 0;
  6827  001828  90B1               	bcf	4017,0,c	;volatile
  6828  00182A  0012               	return		;funcret
  6829  00182C                     __end_of_delay_ms:
  6830                           	opt stack 0
  6831                           tblptru	equ	0xFF8
  6832                           tblptrh	equ	0xFF7
  6833                           tblptrl	equ	0xFF6
  6834                           tablat	equ	0xFF5
  6835                           prodh	equ	0xFF4
  6836                           prodl	equ	0xFF3
  6837                           intcon	equ	0xFF2
  6838                           intcon2	equ	0xFF1
  6839                           postinc0	equ	0xFEE
  6840                           wreg	equ	0xFE8
  6841                           postdec1	equ	0xFE5
  6842                           fsr1l	equ	0xFE1
  6843                           indf2	equ	0xFDF
  6844                           postinc2	equ	0xFDE
  6845                           postdec2	equ	0xFDD
  6846                           fsr2h	equ	0xFDA
  6847                           fsr2l	equ	0xFD9
  6848                           status	equ	0xFD8
  6849                           
  6850 ;; *************** function ___wmul *****************
  6851 ;; Defined at:
  6852 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  6853 ;; Parameters:    Size  Location     Type
  6854 ;;  multiplier      2   16[COMRAM] unsigned int 
  6855 ;;  multiplicand    2   18[COMRAM] unsigned int 
  6856 ;; Auto vars:     Size  Location     Type
  6857 ;;  product         2   20[COMRAM] unsigned int 
  6858 ;; Return value:  Size  Location     Type
  6859 ;;                  2   16[COMRAM] unsigned int 
  6860 ;; Registers used:
  6861 ;;		wreg, status,2, status,0, prodl, prodh
  6862 ;; Tracked objects:
  6863 ;;		On entry : 0/0
  6864 ;;		On exit  : 0/0
  6865 ;;		Unchanged: 0/0
  6866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6867 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6868 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6869 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6870 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6871 ;;Total ram usage:        6 bytes
  6872 ;; Hardware stack levels used:    1
  6873 ;; Hardware stack levels required when called:    3
  6874 ;; This function calls:
  6875 ;;		Nothing
  6876 ;; This function is called by:
  6877 ;;		_main
  6878 ;;		_delay_ms
  6879 ;;		_drawChar
  6880 ;;		_printf
  6881 ;; This function uses a non-reentrant model
  6882 ;;
  6883                           
  6884                           	psect	text31
  6885  001B3A                     __ptext31:
  6886                           	opt stack 0
  6887  001B3A                     ___wmul:
  6888                           	opt stack 26
  6889                           
  6890                           ;incstack = 0
  6891  001B3A  5011               	movf	___wmul@multiplier,w,c
  6892  001B3C  0213               	mulwf	___wmul@multiplicand,c
  6893  001B3E  CFF3 F015          	movff	prodl,___wmul@product
  6894  001B42  CFF4 F016          	movff	prodh,___wmul@product+1
  6895  001B46  5011               	movf	___wmul@multiplier,w,c
  6896  001B48  0214               	mulwf	___wmul@multiplicand+1,c
  6897  001B4A  50F3               	movf	prodl,w,c
  6898  001B4C  2616               	addwf	___wmul@product+1,f,c
  6899  001B4E  5012               	movf	___wmul@multiplier+1,w,c
  6900  001B50  0213               	mulwf	___wmul@multiplicand,c
  6901  001B52  50F3               	movf	prodl,w,c
  6902  001B54  2616               	addwf	___wmul@product+1,f,c
  6903  001B56  C015  F011         	movff	___wmul@product,?___wmul
  6904  001B5A  C016  F012         	movff	___wmul@product+1,?___wmul+1
  6905  001B5E  D000               	goto	l703
  6906  001B60                     l703:
  6907  001B60  0012               	return		;funcret
  6908  001B62                     __end_of___wmul:
  6909                           	opt stack 0
  6910                           tblptru	equ	0xFF8
  6911                           tblptrh	equ	0xFF7
  6912                           tblptrl	equ	0xFF6
  6913                           tablat	equ	0xFF5
  6914                           prodh	equ	0xFF4
  6915                           prodl	equ	0xFF3
  6916                           intcon	equ	0xFF2
  6917                           intcon2	equ	0xFF1
  6918                           postinc0	equ	0xFEE
  6919                           wreg	equ	0xFE8
  6920                           postdec1	equ	0xFE5
  6921                           fsr1l	equ	0xFE1
  6922                           indf2	equ	0xFDF
  6923                           postinc2	equ	0xFDE
  6924                           postdec2	equ	0xFDD
  6925                           fsr2h	equ	0xFDA
  6926                           fsr2l	equ	0xFD9
  6927                           status	equ	0xFD8
  6928                           
  6929 ;; *************** function _INT0_isr *****************
  6930 ;; Defined at:
  6931 ;;		line 48 in file "Interrupt.c"
  6932 ;; Parameters:    Size  Location     Type
  6933 ;;		None
  6934 ;; Auto vars:     Size  Location     Type
  6935 ;;		None
  6936 ;; Return value:  Size  Location     Type
  6937 ;;		None               void
  6938 ;; Registers used:
  6939 ;;		wreg, status,2, status,0, cstack
  6940 ;; Tracked objects:
  6941 ;;		On entry : 0/0
  6942 ;;		On exit  : 0/0
  6943 ;;		Unchanged: 0/0
  6944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6945 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6946 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6947 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6948 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6949 ;;Total ram usage:        2 bytes
  6950 ;; Hardware stack levels used:    1
  6951 ;; Hardware stack levels required when called:    4
  6952 ;; This function calls:
  6953 ;;		_force_nec_state0
  6954 ;; This function is called by:
  6955 ;;		_main
  6956 ;; This function uses a non-reentrant model
  6957 ;;
  6958                           
  6959                           	psect	text32
  6960  000822                     __ptext32:
  6961                           	opt stack 0
  6962  000822                     _INT0_isr:
  6963                           	opt stack 26
  6964                           
  6965                           ;Interrupt.c: 50: INTCONbits.INT0IF = 0;
  6966                           
  6967                           ;incstack = 0
  6968  000822  92F2               	bcf	intcon,1,c	;volatile
  6969                           
  6970                           ;Interrupt.c: 51: if (Nec_state != 0)
  6971  000824  5053               	movf	_Nec_state,w,c
  6972  000826  B4D8               	btfsc	status,2,c
  6973  000828  D09A               	goto	l5389
  6974                           
  6975                           ;Interrupt.c: 52: {
  6976                           ;Interrupt.c: 53: Time_Elapsed = (TMR1H << 8) | TMR1L;
  6977  00082A  50CE               	movf	4046,w,c	;volatile
  6978  00082C  CFCF F011          	movff	4047,??_INT0_isr	;volatile
  6979  000830  6A12               	clrf	(??_INT0_isr+1)& (0+255),c
  6980  000832  C011  F012         	movff	??_INT0_isr,??_INT0_isr+1
  6981  000836  6A11               	clrf	??_INT0_isr,c
  6982  000838  1011               	iorwf	??_INT0_isr,w,c
  6983  00083A  6E4A               	movwf	_Time_Elapsed,c
  6984  00083C  5012               	movf	??_INT0_isr+1,w,c
  6985  00083E  6E4B               	movwf	_Time_Elapsed+1,c
  6986                           
  6987                           ;Interrupt.c: 54: TMR1H = 0;
  6988  000840  0E00               	movlw	0
  6989  000842  6ECF               	movwf	4047,c	;volatile
  6990                           
  6991                           ;Interrupt.c: 55: TMR1L = 0;
  6992  000844  0E00               	movlw	0
  6993  000846  6ECE               	movwf	4046,c	;volatile
  6994                           
  6995                           ;Interrupt.c: 56: }
  6996                           ;Interrupt.c: 58: switch (Nec_state)
  6997  000848  D08A               	goto	l5389
  6998  00084A                     l5323:
  6999                           
  7000                           ;Interrupt.c: 61: {
  7001                           ;Interrupt.c: 63: TMR1H = 0;
  7002  00084A  0E00               	movlw	0
  7003  00084C  6ECF               	movwf	4047,c	;volatile
  7004                           
  7005                           ;Interrupt.c: 64: TMR1L = 0;
  7006  00084E  0E00               	movlw	0
  7007  000850  6ECE               	movwf	4046,c	;volatile
  7008                           
  7009                           ;Interrupt.c: 65: PIR1bits.TMR1IF = 0;
  7010  000852  909E               	bcf	3998,0,c	;volatile
  7011                           
  7012                           ;Interrupt.c: 66: T1CON = 0x90;
  7013  000854  0E90               	movlw	144
  7014  000856  6ECD               	movwf	4045,c	;volatile
  7015                           
  7016                           ;Interrupt.c: 67: T1CONbits.TMR1ON = 1;
  7017  000858  80CD               	bsf	4045,0,c	;volatile
  7018                           
  7019                           ;Interrupt.c: 68: bit_count = 0;
  7020  00085A  0E00               	movlw	0
  7021  00085C  6E5A               	movwf	_bit_count,c
  7022                           
  7023                           ;Interrupt.c: 69: Nec_code = 0;
  7024  00085E  0E00               	movlw	0
  7025  000860  6E46               	movwf	_Nec_code,c
  7026  000862  0E00               	movlw	0
  7027  000864  6E47               	movwf	_Nec_code+1,c
  7028  000866  0E00               	movlw	0
  7029  000868  6E48               	movwf	_Nec_code+2,c
  7030  00086A  0E00               	movlw	0
  7031  00086C  6E49               	movwf	_Nec_code+3,c
  7032                           
  7033                           ;Interrupt.c: 70: Nec_state = 1;
  7034  00086E  0E01               	movlw	1
  7035  000870  6E53               	movwf	_Nec_state,c
  7036  000872  D073               	goto	l5383
  7037                           
  7038                           ;Interrupt.c: 72: return;
  7039                           
  7040                           ;Interrupt.c: 71: INTCON2bits.INTEDG0 = 1;
  7041  000874  D085               	goto	l368
  7042  000876                     l5333:
  7043                           
  7044                           ;Interrupt.c: 76: {
  7045                           ;Interrupt.c: 77: if (Time_Elapsed > 8500 && Time_Elapsed < 9500)
  7046  000876  0E35               	movlw	53
  7047  000878  5C4A               	subwf	_Time_Elapsed,w,c
  7048  00087A  0E21               	movlw	33
  7049  00087C  584B               	subwfb	_Time_Elapsed+1,w,c
  7050  00087E  A0D8               	btfss	status,0,c
  7051  000880  D009               	goto	l5339
  7052  000882  0E1C               	movlw	28
  7053  000884  5C4A               	subwf	_Time_Elapsed,w,c
  7054  000886  0E25               	movlw	37
  7055  000888  584B               	subwfb	_Time_Elapsed+1,w,c
  7056  00088A  B0D8               	btfsc	status,0,c
  7057  00088C  D003               	goto	l5339
  7058                           
  7059                           ;Interrupt.c: 78: {
  7060                           ;Interrupt.c: 79: Nec_state = 2;
  7061  00088E  0E02               	movlw	2
  7062  000890  6E53               	movwf	_Nec_state,c
  7063                           
  7064                           ;Interrupt.c: 80: }
  7065  000892  D02A               	goto	l5365
  7066  000894                     l5339:
  7067                           
  7068                           ;Interrupt.c: 81: else
  7069                           ;Interrupt.c: 82: {
  7070                           ;Interrupt.c: 83: force_nec_state0();
  7071  000894  EC8C  F00E         	call	_force_nec_state0	;wreg free
  7072  000898  D027               	goto	l5365
  7073  00089A  D026               	goto	l5365
  7074                           
  7075                           ;Interrupt.c: 86: return;
  7076                           
  7077                           ;Interrupt.c: 84: }
  7078                           ;Interrupt.c: 85: INTCON2bits.INTEDG0 = 0;
  7079  00089C  D071               	goto	l368
  7080  00089E                     l5345:
  7081                           
  7082                           ;Interrupt.c: 90: {
  7083                           ;Interrupt.c: 91: if (Time_Elapsed > 4000 && Time_Elapsed < 5000)
  7084  00089E  0EA1               	movlw	161
  7085  0008A0  5C4A               	subwf	_Time_Elapsed,w,c
  7086  0008A2  0E0F               	movlw	15
  7087  0008A4  584B               	subwfb	_Time_Elapsed+1,w,c
  7088  0008A6  A0D8               	btfss	status,0,c
  7089  0008A8  D009               	goto	l5351
  7090  0008AA  0E88               	movlw	136
  7091  0008AC  5C4A               	subwf	_Time_Elapsed,w,c
  7092  0008AE  0E13               	movlw	19
  7093  0008B0  584B               	subwfb	_Time_Elapsed+1,w,c
  7094  0008B2  B0D8               	btfsc	status,0,c
  7095  0008B4  D003               	goto	l5351
  7096  0008B6                     
  7097                           ;Interrupt.c: 92: {
  7098                           ;Interrupt.c: 93: Nec_state = 3;
  7099  0008B6  0E03               	movlw	3
  7100  0008B8  6E53               	movwf	_Nec_state,c
  7101                           
  7102                           ;Interrupt.c: 94: }
  7103  0008BA  D04F               	goto	l5383
  7104  0008BC                     l5351:
  7105                           
  7106                           ;Interrupt.c: 95: else
  7107                           ;Interrupt.c: 96: {
  7108                           ;Interrupt.c: 97: force_nec_state0();
  7109  0008BC  EC8C  F00E         	call	_force_nec_state0	;wreg free
  7110  0008C0  D04C               	goto	l5383
  7111  0008C2  D04B               	goto	l5383
  7112                           
  7113                           ;Interrupt.c: 100: return;
  7114                           
  7115                           ;Interrupt.c: 98: }
  7116                           ;Interrupt.c: 99: INTCON2bits.INTEDG0 = 1;
  7117  0008C4  D05D               	goto	l368
  7118  0008C6                     l5357:
  7119                           
  7120                           ;Interrupt.c: 104: {
  7121                           ;Interrupt.c: 105: if (Time_Elapsed > 400 && Time_Elapsed < 700)
  7122  0008C6  0E91               	movlw	145
  7123  0008C8  5C4A               	subwf	_Time_Elapsed,w,c
  7124  0008CA  0E01               	movlw	1
  7125  0008CC  584B               	subwfb	_Time_Elapsed+1,w,c
  7126  0008CE  A0D8               	btfss	status,0,c
  7127  0008D0  D008               	goto	l5363
  7128  0008D2  0EBC               	movlw	188
  7129  0008D4  5C4A               	subwf	_Time_Elapsed,w,c
  7130  0008D6  0E02               	movlw	2
  7131  0008D8  584B               	subwfb	_Time_Elapsed+1,w,c
  7132  0008DA  B0D8               	btfsc	status,0,c
  7133  0008DC  D002               	goto	l5363
  7134                           
  7135                           ;Interrupt.c: 106: {
  7136                           ;Interrupt.c: 107: Nec_state = 4;
  7137  0008DE  0E04               	movlw	4
  7138  0008E0  D7D7               	goto	L4
  7139  0008E2                     l5363:
  7140                           
  7141                           ;Interrupt.c: 109: else
  7142                           ;Interrupt.c: 110: {
  7143                           ;Interrupt.c: 111: force_nec_state0();
  7144  0008E2  EC8C  F00E         	call	_force_nec_state0	;wreg free
  7145  0008E6  D000               	goto	l5365
  7146  0008E8                     l5365:
  7147                           
  7148                           ;Interrupt.c: 112: }
  7149                           ;Interrupt.c: 113: INTCON2bits.INTEDG0 = 0;
  7150  0008E8  9CF1               	bcf	intcon2,6,c	;volatile
  7151                           
  7152                           ;Interrupt.c: 114: return;
  7153  0008EA  D04A               	goto	l368
  7154  0008EC                     l5369:
  7155                           
  7156                           ;Interrupt.c: 118: {
  7157                           ;Interrupt.c: 119: if (Time_Elapsed > 400 && Time_Elapsed < 1800)
  7158  0008EC  0E91               	movlw	145
  7159  0008EE  5C4A               	subwf	_Time_Elapsed,w,c
  7160  0008F0  0E01               	movlw	1
  7161  0008F2  584B               	subwfb	_Time_Elapsed+1,w,c
  7162  0008F4  A0D8               	btfss	status,0,c
  7163  0008F6  D02E               	goto	l5381
  7164  0008F8  0E08               	movlw	8
  7165  0008FA  5C4A               	subwf	_Time_Elapsed,w,c
  7166  0008FC  0E07               	movlw	7
  7167  0008FE  584B               	subwfb	_Time_Elapsed+1,w,c
  7168  000900  B0D8               	btfsc	status,0,c
  7169  000902  D028               	goto	l5381
  7170                           
  7171                           ;Interrupt.c: 120: {
  7172                           ;Interrupt.c: 121: Nec_code = Nec_code << 1;
  7173  000904  90D8               	bcf	status,0,c
  7174  000906  3446               	rlcf	_Nec_code,w,c
  7175  000908  6E46               	movwf	_Nec_code,c
  7176  00090A  3447               	rlcf	_Nec_code+1,w,c
  7177  00090C  6E47               	movwf	_Nec_code+1,c
  7178  00090E  3448               	rlcf	_Nec_code+2,w,c
  7179  000910  6E48               	movwf	_Nec_code+2,c
  7180  000912  3449               	rlcf	_Nec_code+3,w,c
  7181  000914  6E49               	movwf	_Nec_code+3,c
  7182                           
  7183                           ;Interrupt.c: 123: if (Time_Elapsed > 1000)
  7184  000916  0EE9               	movlw	233
  7185  000918  5C4A               	subwf	_Time_Elapsed,w,c
  7186  00091A  0E03               	movlw	3
  7187  00091C  584B               	subwfb	_Time_Elapsed+1,w,c
  7188  00091E  A0D8               	btfss	status,0,c
  7189  000920  D00C               	goto	l380
  7190                           
  7191                           ;Interrupt.c: 124: {
  7192                           ;Interrupt.c: 125: Nec_code = Nec_code + 1;
  7193  000922  0E01               	movlw	1
  7194  000924  2446               	addwf	_Nec_code,w,c
  7195  000926  6E46               	movwf	_Nec_code,c
  7196  000928  0E00               	movlw	0
  7197  00092A  2047               	addwfc	_Nec_code+1,w,c
  7198  00092C  6E47               	movwf	_Nec_code+1,c
  7199  00092E  0E00               	movlw	0
  7200  000930  2048               	addwfc	_Nec_code+2,w,c
  7201  000932  6E48               	movwf	_Nec_code+2,c
  7202  000934  0E00               	movlw	0
  7203  000936  2049               	addwfc	_Nec_code+3,w,c
  7204  000938  6E49               	movwf	_Nec_code+3,c
  7205  00093A                     l380:
  7206                           
  7207                           ;Interrupt.c: 126: }
  7208                           ;Interrupt.c: 128: bit_count = bit_count + 1;
  7209  00093A  285A               	incf	_bit_count,w,c
  7210  00093C  6E5A               	movwf	_bit_count,c
  7211                           
  7212                           ;Interrupt.c: 130: if (bit_count > 31)
  7213  00093E  0E1F               	movlw	31
  7214  000940  645A               	cpfsgt	_bit_count,c
  7215  000942  D7B9               	goto	L5
  7216                           
  7217                           ;Interrupt.c: 131: {
  7218                           ;Interrupt.c: 132: nec_ok = 1;
  7219  000944  0E00               	movlw	0
  7220  000946  6E4F               	movwf	_nec_ok+1,c
  7221  000948  0E01               	movlw	1
  7222  00094A  6E4E               	movwf	_nec_ok,c
  7223                           
  7224                           ;Interrupt.c: 133: INTCONbits.INT0IE = 0;
  7225  00094C  98F2               	bcf	intcon,4,c	;volatile
  7226                           
  7227                           ;Interrupt.c: 134: Nec_state = 0;
  7228  00094E  0E00               	movlw	0
  7229  000950  6E53               	movwf	_Nec_state,c
  7230  000952  D7B1               	goto	L5
  7231  000954                     l5381:
  7232                           
  7233                           ;Interrupt.c: 139: else
  7234                           ;Interrupt.c: 140: {
  7235                           ;Interrupt.c: 141: force_nec_state0();
  7236  000954  EC8C  F00E         	call	_force_nec_state0	;wreg free
  7237  000958  D000               	goto	l5383
  7238  00095A                     l5383:
  7239                           
  7240                           ;Interrupt.c: 142: }
  7241                           ;Interrupt.c: 144: INTCON2bits.INTEDG0 = 1;
  7242  00095A  8CF1               	bsf	intcon2,6,c	;volatile
  7243                           
  7244                           ;Interrupt.c: 146: }
  7245                           ;Interrupt.c: 147: }
  7246                           
  7247                           ;Interrupt.c: 145: return;
  7248  00095C  D011               	goto	l368
  7249  00095E                     l5389:
  7250  00095E  5053               	movf	_Nec_state,w,c
  7251                           
  7252                           ; Switch size 1, requested type "space"
  7253                           ; Number of cases is 5, Range of values is 0 to 4
  7254                           ; switch strategies available:
  7255                           ; Name         Instructions Cycles
  7256                           ; simple_byte           16     9 (average)
  7257                           ;	Chosen strategy is simple_byte
  7258  000960  0A00               	xorlw	0	; case 0
  7259  000962  B4D8               	btfsc	status,2,c
  7260  000964  D772               	goto	l5323
  7261  000966  0A01               	xorlw	1	; case 1
  7262  000968  B4D8               	btfsc	status,2,c
  7263  00096A  D785               	goto	l5333
  7264  00096C  0A03               	xorlw	3	; case 2
  7265  00096E  B4D8               	btfsc	status,2,c
  7266  000970  D796               	goto	l5345
  7267  000972  0A01               	xorlw	1	; case 3
  7268  000974  B4D8               	btfsc	status,2,c
  7269  000976  D7A7               	goto	l5357
  7270  000978  0A07               	xorlw	7	; case 4
  7271  00097A  B4D8               	btfsc	status,2,c
  7272  00097C  D7B7               	goto	l5369
  7273  00097E  D000               	goto	l368
  7274  000980                     l368:
  7275  000980  0012               	return		;funcret
  7276  000982                     __end_of_INT0_isr:
  7277                           	opt stack 0
  7278                           tblptru	equ	0xFF8
  7279                           tblptrh	equ	0xFF7
  7280                           tblptrl	equ	0xFF6
  7281                           tablat	equ	0xFF5
  7282                           prodh	equ	0xFF4
  7283                           prodl	equ	0xFF3
  7284                           intcon	equ	0xFF2
  7285                           intcon2	equ	0xFF1
  7286                           postinc0	equ	0xFEE
  7287                           wreg	equ	0xFE8
  7288                           postdec1	equ	0xFE5
  7289                           fsr1l	equ	0xFE1
  7290                           indf2	equ	0xFDF
  7291                           postinc2	equ	0xFDE
  7292                           postdec2	equ	0xFDD
  7293                           fsr2h	equ	0xFDA
  7294                           fsr2l	equ	0xFD9
  7295                           status	equ	0xFD8
  7296                           
  7297 ;; *************** function _force_nec_state0 *****************
  7298 ;; Defined at:
  7299 ;;		line 42 in file "Interrupt.c"
  7300 ;; Parameters:    Size  Location     Type
  7301 ;;		None
  7302 ;; Auto vars:     Size  Location     Type
  7303 ;;		None
  7304 ;; Return value:  Size  Location     Type
  7305 ;;		None               void
  7306 ;; Registers used:
  7307 ;;		wreg, status,2
  7308 ;; Tracked objects:
  7309 ;;		On entry : 0/0
  7310 ;;		On exit  : 0/0
  7311 ;;		Unchanged: 0/0
  7312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7313 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7314 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7315 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7316 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7317 ;;Total ram usage:        0 bytes
  7318 ;; Hardware stack levels used:    1
  7319 ;; Hardware stack levels required when called:    3
  7320 ;; This function calls:
  7321 ;;		Nothing
  7322 ;; This function is called by:
  7323 ;;		_INT0_isr
  7324 ;; This function uses a non-reentrant model
  7325 ;;
  7326                           
  7327                           	psect	text33
  7328  001D18                     __ptext33:
  7329                           	opt stack 0
  7330  001D18                     _force_nec_state0:
  7331                           	opt stack 26
  7332                           
  7333                           ;Interrupt.c: 44: Nec_state = 0;
  7334                           
  7335                           ;incstack = 0
  7336  001D18  0E00               	movlw	0
  7337  001D1A  6E53               	movwf	_Nec_state,c
  7338                           
  7339                           ;Interrupt.c: 45: T1CONbits.TMR1ON = 0;
  7340  001D1C  90CD               	bcf	4045,0,c	;volatile
  7341  001D1E  0012               	return		;funcret
  7342  001D20                     __end_of_force_nec_state0:
  7343                           	opt stack 0
  7344                           tblptru	equ	0xFF8
  7345                           tblptrh	equ	0xFF7
  7346                           tblptrl	equ	0xFF6
  7347                           tablat	equ	0xFF5
  7348                           prodh	equ	0xFF4
  7349                           prodl	equ	0xFF3
  7350                           intcon	equ	0xFF2
  7351                           intcon2	equ	0xFF1
  7352                           postinc0	equ	0xFEE
  7353                           wreg	equ	0xFE8
  7354                           postdec1	equ	0xFE5
  7355                           fsr1l	equ	0xFE1
  7356                           indf2	equ	0xFDF
  7357                           postinc2	equ	0xFDE
  7358                           postdec2	equ	0xFDD
  7359                           fsr2h	equ	0xFDA
  7360                           fsr2l	equ	0xFD9
  7361                           status	equ	0xFD8
  7362                           
  7363 ;; *************** function _Do_Init *****************
  7364 ;; Defined at:
  7365 ;;		line 107 in file "Lab10p1.c"
  7366 ;; Parameters:    Size  Location     Type
  7367 ;;		None
  7368 ;; Auto vars:     Size  Location     Type
  7369 ;;		None
  7370 ;; Return value:  Size  Location     Type
  7371 ;;		None               void
  7372 ;; Registers used:
  7373 ;;		wreg, status,2, status,0, cstack
  7374 ;; Tracked objects:
  7375 ;;		On entry : 0/0
  7376 ;;		On exit  : 0/0
  7377 ;;		Unchanged: 0/0
  7378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7379 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7380 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7381 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7382 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7383 ;;Total ram usage:        0 bytes
  7384 ;; Hardware stack levels used:    1
  7385 ;; Hardware stack levels required when called:    7
  7386 ;; This function calls:
  7387 ;;		_DS1621_Init
  7388 ;;		_I2C_Init
  7389 ;;		_init_INTERRUPT
  7390 ;;		_init_UART
  7391 ;; This function is called by:
  7392 ;;		_main
  7393 ;; This function uses a non-reentrant model
  7394 ;;
  7395                           
  7396                           	psect	text34
  7397  001A06                     __ptext34:
  7398                           	opt stack 0
  7399  001A06                     _Do_Init:
  7400                           	opt stack 23
  7401                           
  7402                           ;Lab10p1.c: 109: init_UART();
  7403                           
  7404                           ;incstack = 0
  7405  001A06  EC23  F00E         	call	_init_UART	;wreg free
  7406                           
  7407                           ;Lab10p1.c: 110: OSCCON=0x70;
  7408  001A0A  0E70               	movlw	112
  7409  001A0C  6ED3               	movwf	4051,c	;volatile
  7410                           
  7411                           ;Lab10p1.c: 111: ADCON1=0x0F;
  7412  001A0E  0E0F               	movlw	15
  7413  001A10  6EC1               	movwf	4033,c	;volatile
  7414                           
  7415                           ;Lab10p1.c: 112: TRISB = 0x01;
  7416  001A12  0E01               	movlw	1
  7417  001A14  6E93               	movwf	3987,c	;volatile
  7418                           
  7419                           ;Lab10p1.c: 113: TRISC = 0x00;
  7420  001A16  0E00               	movlw	0
  7421  001A18  6E94               	movwf	3988,c	;volatile
  7422                           
  7423                           ;Lab10p1.c: 114: TRISD = 0x0C;
  7424  001A1A  0E0C               	movlw	12
  7425  001A1C  6E95               	movwf	3989,c	;volatile
  7426                           
  7427                           ;Lab10p1.c: 115: TRISE = 0x00;
  7428  001A1E  0E00               	movlw	0
  7429  001A20  6E96               	movwf	3990,c	;volatile
  7430                           
  7431                           ;Lab10p1.c: 116: RBPU=0;
  7432  001A22  9EF1               	bcf	intcon2,7,c	;volatile
  7433                           
  7434                           ;Lab10p1.c: 117: init_INTERRUPT();
  7435  001A24  EC70  F00D         	call	_init_INTERRUPT	;wreg free
  7436                           
  7437                           ;Lab10p1.c: 118: I2C_Init(100000);
  7438  001A28  0EA0               	movlw	160
  7439  001A2A  6E11               	movwf	I2C_Init@c,c
  7440  001A2C  0E86               	movlw	134
  7441  001A2E  6E12               	movwf	I2C_Init@c+1,c
  7442  001A30  0E01               	movlw	1
  7443  001A32  6E13               	movwf	I2C_Init@c+2,c
  7444  001A34  0E00               	movlw	0
  7445  001A36  6E14               	movwf	I2C_Init@c+3,c
  7446  001A38  EC7D  F00E         	call	_I2C_Init	;wreg free
  7447                           
  7448                           ;Lab10p1.c: 119: DS1621_Init();
  7449  001A3C  ECE4  F00D         	call	_DS1621_Init	;wreg free
  7450  001A40  0012               	return		;funcret
  7451  001A42                     __end_of_Do_Init:
  7452                           	opt stack 0
  7453                           tblptru	equ	0xFF8
  7454                           tblptrh	equ	0xFF7
  7455                           tblptrl	equ	0xFF6
  7456                           tablat	equ	0xFF5
  7457                           prodh	equ	0xFF4
  7458                           prodl	equ	0xFF3
  7459                           intcon	equ	0xFF2
  7460                           intcon2	equ	0xFF1
  7461                           postinc0	equ	0xFEE
  7462                           wreg	equ	0xFE8
  7463                           postdec1	equ	0xFE5
  7464                           fsr1l	equ	0xFE1
  7465                           indf2	equ	0xFDF
  7466                           postinc2	equ	0xFDE
  7467                           postdec2	equ	0xFDD
  7468                           fsr2h	equ	0xFDA
  7469                           fsr2l	equ	0xFD9
  7470                           status	equ	0xFD8
  7471                           
  7472 ;; *************** function _init_UART *****************
  7473 ;; Defined at:
  7474 ;;		line 94 in file "Lab10p1.c"
  7475 ;; Parameters:    Size  Location     Type
  7476 ;;		None
  7477 ;; Auto vars:     Size  Location     Type
  7478 ;;		None
  7479 ;; Return value:  Size  Location     Type
  7480 ;;		None               void
  7481 ;; Registers used:
  7482 ;;		wreg, status,2, cstack
  7483 ;; Tracked objects:
  7484 ;;		On entry : 0/0
  7485 ;;		On exit  : 0/0
  7486 ;;		Unchanged: 0/0
  7487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7488 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7489 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7490 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7491 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7492 ;;Total ram usage:        0 bytes
  7493 ;; Hardware stack levels used:    1
  7494 ;; Hardware stack levels required when called:    4
  7495 ;; This function calls:
  7496 ;;		_OpenUSART
  7497 ;; This function is called by:
  7498 ;;		_Do_Init
  7499 ;; This function uses a non-reentrant model
  7500 ;;
  7501                           
  7502                           	psect	text35
  7503  001C46                     __ptext35:
  7504                           	opt stack 0
  7505  001C46                     _init_UART:
  7506                           	opt stack 25
  7507                           
  7508                           ;Lab10p1.c: 96: OpenUSART (0b01111111 & 0b10111111 & 0b11111110 & 0b11111101 & 0b1111111
      +                          1 & 0b11111111, 25);
  7509                           
  7510                           ;incstack = 0
  7511  001C46  0E00               	movlw	0
  7512  001C48  6E12               	movwf	OpenUSART@spbrg+1,c
  7513  001C4A  0E19               	movlw	25
  7514  001C4C  6E11               	movwf	OpenUSART@spbrg,c
  7515  001C4E  0E3C               	movlw	60
  7516  001C50  ECFD  F00A         	call	_OpenUSART
  7517                           
  7518                           ;Lab10p1.c: 97: OSCCON = 0x70;
  7519  001C54  0E70               	movlw	112
  7520  001C56  6ED3               	movwf	4051,c	;volatile
  7521  001C58  0012               	return		;funcret
  7522  001C5A                     __end_of_init_UART:
  7523                           	opt stack 0
  7524                           tblptru	equ	0xFF8
  7525                           tblptrh	equ	0xFF7
  7526                           tblptrl	equ	0xFF6
  7527                           tablat	equ	0xFF5
  7528                           prodh	equ	0xFF4
  7529                           prodl	equ	0xFF3
  7530                           intcon	equ	0xFF2
  7531                           intcon2	equ	0xFF1
  7532                           postinc0	equ	0xFEE
  7533                           wreg	equ	0xFE8
  7534                           postdec1	equ	0xFE5
  7535                           fsr1l	equ	0xFE1
  7536                           indf2	equ	0xFDF
  7537                           postinc2	equ	0xFDE
  7538                           postdec2	equ	0xFDD
  7539                           fsr2h	equ	0xFDA
  7540                           fsr2l	equ	0xFD9
  7541                           status	equ	0xFD8
  7542                           
  7543 ;; *************** function _OpenUSART *****************
  7544 ;; Defined at:
  7545 ;;		line 73 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
  7546 ;; Parameters:    Size  Location     Type
  7547 ;;  config          1    wreg     unsigned char 
  7548 ;;  spbrg           2   16[COMRAM] unsigned int 
  7549 ;; Auto vars:     Size  Location     Type
  7550 ;;  config          1   18[COMRAM] unsigned char 
  7551 ;; Return value:  Size  Location     Type
  7552 ;;		None               void
  7553 ;; Registers used:
  7554 ;;		wreg, status,2
  7555 ;; Tracked objects:
  7556 ;;		On entry : 0/0
  7557 ;;		On exit  : 0/0
  7558 ;;		Unchanged: 0/0
  7559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7560 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7561 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7562 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7563 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7564 ;;Total ram usage:        3 bytes
  7565 ;; Hardware stack levels used:    1
  7566 ;; Hardware stack levels required when called:    3
  7567 ;; This function calls:
  7568 ;;		Nothing
  7569 ;; This function is called by:
  7570 ;;		_init_UART
  7571 ;; This function uses a non-reentrant model
  7572 ;;
  7573                           
  7574                           	psect	text36
  7575  0015FA                     __ptext36:
  7576                           	opt stack 0
  7577  0015FA                     _OpenUSART:
  7578                           	opt stack 25
  7579                           
  7580                           ;incstack = 0
  7581                           ;OpenUSART@config stored from wreg
  7582  0015FA  6E13               	movwf	OpenUSART@config,c
  7583  0015FC  0E00               	movlw	0
  7584  0015FE  6EAC               	movwf	4012,c	;volatile
  7585  001600  0E00               	movlw	0
  7586  001602  6EAB               	movwf	4011,c	;volatile
  7587  001604  A013               	btfss	OpenUSART@config,0,c
  7588  001606  D002               	goto	l4523
  7589  001608  88AC               	bsf	4012,4,c	;volatile
  7590  00160A  D000               	goto	l4523
  7591  00160C                     l4523:
  7592  00160C  A213               	btfss	OpenUSART@config,1,c
  7593  00160E  D003               	goto	l4527
  7594  001610  8CAC               	bsf	4012,6,c	;volatile
  7595  001612  8CAB               	bsf	4011,6,c	;volatile
  7596  001614  D000               	goto	l4527
  7597  001616                     l4527:
  7598  001616  A413               	btfss	OpenUSART@config,2,c
  7599  001618  D002               	goto	l4531
  7600  00161A  8EAC               	bsf	4012,7,c	;volatile
  7601  00161C  D000               	goto	l4531
  7602  00161E                     l4531:
  7603  00161E  A613               	btfss	OpenUSART@config,3,c
  7604  001620  D002               	goto	l691
  7605  001622  88AB               	bsf	4011,4,c	;volatile
  7606  001624  D002               	goto	l4535
  7607  001626                     l691:
  7608  001626  8AAB               	bsf	4011,5,c	;volatile
  7609  001628  D000               	goto	l4535
  7610  00162A                     l4535:
  7611  00162A  B813               	btfsc	OpenUSART@config,4,c
  7612  00162C  84AC               	bsf	4012,2,c	;volatile
  7613  00162E  989E               	bcf	3998,4,c	;volatile
  7614  001630  AA13               	btfss	OpenUSART@config,5,c
  7615  001632  D002               	goto	l4543
  7616  001634  86AB               	bsf	4011,3,c	;volatile
  7617  001636  D000               	goto	l4543
  7618  001638                     l4543:
  7619  001638  AC13               	btfss	OpenUSART@config,6,c
  7620  00163A  D002               	goto	l695
  7621  00163C  8A9D               	bsf	3997,5,c	;volatile
  7622  00163E  D001               	goto	l696
  7623  001640                     l695:
  7624  001640  9A9D               	bcf	3997,5,c	;volatile
  7625  001642                     l696:
  7626  001642  9A9E               	bcf	3998,5,c	;volatile
  7627  001644  AE13               	btfss	OpenUSART@config,7,c
  7628  001646  D002               	goto	l697
  7629  001648  889D               	bsf	3997,4,c	;volatile
  7630  00164A  D001               	goto	l698
  7631  00164C                     l697:
  7632  00164C  989D               	bcf	3997,4,c	;volatile
  7633  00164E                     l698:
  7634  00164E  C011  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  7635  001652  5012               	movf	OpenUSART@spbrg+1,w,c
  7636  001654  6EB0               	movwf	4016,c	;volatile
  7637  001656  8AAC               	bsf	4012,5,c	;volatile
  7638  001658  8EAB               	bsf	4011,7,c	;volatile
  7639  00165A  9C94               	bcf	3988,6,c	;volatile
  7640  00165C  8E94               	bsf	3988,7,c	;volatile
  7641  00165E  B8AC               	btfsc	4012,4,c	;volatile
  7642  001660  BEAC               	btfsc	4012,7,c	;volatile
  7643  001662  D002               	goto	l700
  7644  001664  8C94               	bsf	3988,6,c	;volatile
  7645  001666  D000               	goto	l700
  7646  001668                     l700:
  7647  001668  0012               	return		;funcret
  7648  00166A                     __end_of_OpenUSART:
  7649                           	opt stack 0
  7650                           tblptru	equ	0xFF8
  7651                           tblptrh	equ	0xFF7
  7652                           tblptrl	equ	0xFF6
  7653                           tablat	equ	0xFF5
  7654                           prodh	equ	0xFF4
  7655                           prodl	equ	0xFF3
  7656                           intcon	equ	0xFF2
  7657                           intcon2	equ	0xFF1
  7658                           postinc0	equ	0xFEE
  7659                           wreg	equ	0xFE8
  7660                           postdec1	equ	0xFE5
  7661                           fsr1l	equ	0xFE1
  7662                           indf2	equ	0xFDF
  7663                           postinc2	equ	0xFDE
  7664                           postdec2	equ	0xFDD
  7665                           fsr2h	equ	0xFDA
  7666                           fsr2l	equ	0xFD9
  7667                           status	equ	0xFD8
  7668                           
  7669 ;; *************** function _init_INTERRUPT *****************
  7670 ;; Defined at:
  7671 ;;		line 13 in file "Interrupt.c"
  7672 ;; Parameters:    Size  Location     Type
  7673 ;;		None
  7674 ;; Auto vars:     Size  Location     Type
  7675 ;;		None
  7676 ;; Return value:  Size  Location     Type
  7677 ;;		None               void
  7678 ;; Registers used:
  7679 ;;		wreg, status,2
  7680 ;; Tracked objects:
  7681 ;;		On entry : 0/0
  7682 ;;		On exit  : 0/0
  7683 ;;		Unchanged: 0/0
  7684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7685 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7686 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7687 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7688 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7689 ;;Total ram usage:        0 bytes
  7690 ;; Hardware stack levels used:    1
  7691 ;; Hardware stack levels required when called:    3
  7692 ;; This function calls:
  7693 ;;		Nothing
  7694 ;; This function is called by:
  7695 ;;		_Do_Init
  7696 ;; This function uses a non-reentrant model
  7697 ;;
  7698                           
  7699                           	psect	text37
  7700  001AE0                     __ptext37:
  7701                           	opt stack 0
  7702  001AE0                     _init_INTERRUPT:
  7703                           	opt stack 26
  7704                           
  7705                           ;Interrupt.c: 15: INTCONbits.INT0IF = 0;
  7706                           
  7707                           ;incstack = 0
  7708  001AE0  92F2               	bcf	intcon,1,c	;volatile
  7709                           
  7710                           ;Interrupt.c: 16: INTCON2bits.INTEDG0 = 0;
  7711  001AE2  9CF1               	bcf	intcon2,6,c	;volatile
  7712                           
  7713                           ;Interrupt.c: 17: INTCONbits.INT0IE = 1;
  7714  001AE4  88F2               	bsf	intcon,4,c	;volatile
  7715                           
  7716                           ;Interrupt.c: 18: TMR1H = 0;
  7717  001AE6  0E00               	movlw	0
  7718  001AE8  6ECF               	movwf	4047,c	;volatile
  7719                           
  7720                           ;Interrupt.c: 19: TMR1L = 0;
  7721  001AEA  0E00               	movlw	0
  7722  001AEC  6ECE               	movwf	4046,c	;volatile
  7723                           
  7724                           ;Interrupt.c: 20: PIR1bits.TMR1IF = 0;
  7725  001AEE  909E               	bcf	3998,0,c	;volatile
  7726                           
  7727                           ;Interrupt.c: 21: PIE1bits.TMR1IE = 1;
  7728  001AF0  809D               	bsf	3997,0,c	;volatile
  7729                           
  7730                           ;Interrupt.c: 22: INTCONbits.PEIE = 1;
  7731  001AF2  8CF2               	bsf	intcon,6,c	;volatile
  7732                           
  7733                           ;Interrupt.c: 23: INTCONbits.GIE = 1;
  7734  001AF4  8EF2               	bsf	intcon,7,c	;volatile
  7735                           
  7736                           ;Interrupt.c: 24: nec_ok = 0;
  7737  001AF6  0E00               	movlw	0
  7738  001AF8  6E4F               	movwf	_nec_ok+1,c
  7739  001AFA  0E00               	movlw	0
  7740  001AFC  6E4E               	movwf	_nec_ok,c
  7741                           
  7742                           ;Interrupt.c: 25: Nec_code = 0x00;
  7743  001AFE  0E00               	movlw	0
  7744  001B00  6E46               	movwf	_Nec_code,c
  7745  001B02  0E00               	movlw	0
  7746  001B04  6E47               	movwf	_Nec_code+1,c
  7747  001B06  0E00               	movlw	0
  7748  001B08  6E48               	movwf	_Nec_code+2,c
  7749  001B0A  0E00               	movlw	0
  7750  001B0C  6E49               	movwf	_Nec_code+3,c
  7751  001B0E  0012               	return		;funcret
  7752  001B10                     __end_of_init_INTERRUPT:
  7753                           	opt stack 0
  7754                           tblptru	equ	0xFF8
  7755                           tblptrh	equ	0xFF7
  7756                           tblptrl	equ	0xFF6
  7757                           tablat	equ	0xFF5
  7758                           prodh	equ	0xFF4
  7759                           prodl	equ	0xFF3
  7760                           intcon	equ	0xFF2
  7761                           intcon2	equ	0xFF1
  7762                           postinc0	equ	0xFEE
  7763                           wreg	equ	0xFE8
  7764                           postdec1	equ	0xFE5
  7765                           fsr1l	equ	0xFE1
  7766                           indf2	equ	0xFDF
  7767                           postinc2	equ	0xFDE
  7768                           postdec2	equ	0xFDD
  7769                           fsr2h	equ	0xFDA
  7770                           fsr2l	equ	0xFD9
  7771                           status	equ	0xFD8
  7772                           
  7773 ;; *************** function _I2C_Init *****************
  7774 ;; Defined at:
  7775 ;;		line 15 in file "I2C.c"
  7776 ;; Parameters:    Size  Location     Type
  7777 ;;  c               4   16[COMRAM] unsigned long 
  7778 ;; Auto vars:     Size  Location     Type
  7779 ;;		None
  7780 ;; Return value:  Size  Location     Type
  7781 ;;		None               void
  7782 ;; Registers used:
  7783 ;;		wreg, cstack
  7784 ;; Tracked objects:
  7785 ;;		On entry : 0/0
  7786 ;;		On exit  : 0/0
  7787 ;;		Unchanged: 0/0
  7788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7789 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7790 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7791 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7792 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7793 ;;Total ram usage:        4 bytes
  7794 ;; Hardware stack levels used:    1
  7795 ;; Hardware stack levels required when called:    4
  7796 ;; This function calls:
  7797 ;;		_i2cHighScl
  7798 ;;		_i2cHighSda
  7799 ;; This function is called by:
  7800 ;;		_Do_Init
  7801 ;; This function uses a non-reentrant model
  7802 ;;
  7803                           
  7804                           	psect	text38
  7805  001CFA                     __ptext38:
  7806                           	opt stack 0
  7807  001CFA                     _I2C_Init:
  7808                           	opt stack 25
  7809                           
  7810                           ;I2C.c: 17: i2cHighScl();
  7811                           
  7812                           ;incstack = 0
  7813  001CFA  EC71  F00E         	call	_i2cHighScl	;wreg free
  7814                           
  7815                           ;I2C.c: 18: i2cHighSda();
  7816  001CFE  EC98  F00E         	call	_i2cHighSda	;wreg free
  7817  001D02  0012               	return		;funcret
  7818  001D04                     __end_of_I2C_Init:
  7819                           	opt stack 0
  7820                           tblptru	equ	0xFF8
  7821                           tblptrh	equ	0xFF7
  7822                           tblptrl	equ	0xFF6
  7823                           tablat	equ	0xFF5
  7824                           prodh	equ	0xFF4
  7825                           prodl	equ	0xFF3
  7826                           intcon	equ	0xFF2
  7827                           intcon2	equ	0xFF1
  7828                           postinc0	equ	0xFEE
  7829                           wreg	equ	0xFE8
  7830                           postdec1	equ	0xFE5
  7831                           fsr1l	equ	0xFE1
  7832                           indf2	equ	0xFDF
  7833                           postinc2	equ	0xFDE
  7834                           postdec2	equ	0xFDD
  7835                           fsr2h	equ	0xFDA
  7836                           fsr2l	equ	0xFD9
  7837                           status	equ	0xFD8
  7838                           
  7839 ;; *************** function _DS1621_Init *****************
  7840 ;; Defined at:
  7841 ;;		line 22 in file "I2C_Support.c"
  7842 ;; Parameters:    Size  Location     Type
  7843 ;;		None
  7844 ;; Auto vars:     Size  Location     Type
  7845 ;;  Device          1   21[COMRAM] unsigned char 
  7846 ;; Return value:  Size  Location     Type
  7847 ;;		None               void
  7848 ;; Registers used:
  7849 ;;		wreg, status,2, status,0, cstack
  7850 ;; Tracked objects:
  7851 ;;		On entry : 0/0
  7852 ;;		On exit  : 0/0
  7853 ;;		Unchanged: 0/0
  7854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7855 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7856 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7857 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7858 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7859 ;;Total ram usage:        1 bytes
  7860 ;; Hardware stack levels used:    1
  7861 ;; Hardware stack levels required when called:    6
  7862 ;; This function calls:
  7863 ;;		_I2C_Write_Cmd_Only
  7864 ;;		_I2C_Write_Cmd_Write_Data
  7865 ;; This function is called by:
  7866 ;;		_Do_Init
  7867 ;; This function uses a non-reentrant model
  7868 ;;
  7869                           
  7870                           	psect	text39
  7871  001BC8                     __ptext39:
  7872                           	opt stack 0
  7873  001BC8                     _DS1621_Init:
  7874                           	opt stack 23
  7875                           
  7876                           ;I2C_Support.c: 24: char Device = 0x48;
  7877                           
  7878                           ;incstack = 0
  7879  001BC8  0E48               	movlw	72
  7880  001BCA  6E16               	movwf	DS1621_Init@Device,c
  7881                           
  7882                           ;I2C_Support.c: 25: I2C_Write_Cmd_Write_Data(Device, 0xAC, 0x02);
  7883  001BCC  0EAC               	movlw	172
  7884  001BCE  6E13               	movwf	I2C_Write_Cmd_Write_Data@Cmd,c
  7885  001BD0  0E02               	movlw	2
  7886  001BD2  6E14               	movwf	I2C_Write_Cmd_Write_Data@Data_Out,c
  7887  001BD4  5016               	movf	DS1621_Init@Device,w,c
  7888  001BD6  ECD4  F00D         	call	_I2C_Write_Cmd_Write_Data
  7889                           
  7890                           ;I2C_Support.c: 26: I2C_Write_Cmd_Only(Device, 0xEE);
  7891  001BDA  0EEE               	movlw	238
  7892  001BDC  6E13               	movwf	I2C_Write_Cmd_Only@Cmd,c
  7893  001BDE  5016               	movf	DS1621_Init@Device,w,c
  7894  001BE0  EC01  F00E         	call	_I2C_Write_Cmd_Only
  7895  001BE4  0012               	return		;funcret
  7896  001BE6                     __end_of_DS1621_Init:
  7897                           	opt stack 0
  7898                           tblptru	equ	0xFF8
  7899                           tblptrh	equ	0xFF7
  7900                           tblptrl	equ	0xFF6
  7901                           tablat	equ	0xFF5
  7902                           prodh	equ	0xFF4
  7903                           prodl	equ	0xFF3
  7904                           intcon	equ	0xFF2
  7905                           intcon2	equ	0xFF1
  7906                           postinc0	equ	0xFEE
  7907                           wreg	equ	0xFE8
  7908                           postdec1	equ	0xFE5
  7909                           fsr1l	equ	0xFE1
  7910                           indf2	equ	0xFDF
  7911                           postinc2	equ	0xFDE
  7912                           postdec2	equ	0xFDD
  7913                           fsr2h	equ	0xFDA
  7914                           fsr2l	equ	0xFD9
  7915                           status	equ	0xFD8
  7916                           
  7917 ;; *************** function _I2C_Write_Cmd_Write_Data *****************
  7918 ;; Defined at:
  7919 ;;		line 153 in file "I2C.c"
  7920 ;; Parameters:    Size  Location     Type
  7921 ;;  Device          1    wreg     unsigned char 
  7922 ;;  Cmd             1   18[COMRAM] unsigned char 
  7923 ;;  Data_Out        1   19[COMRAM] unsigned char 
  7924 ;; Auto vars:     Size  Location     Type
  7925 ;;  Device          1   20[COMRAM] unsigned char 
  7926 ;; Return value:  Size  Location     Type
  7927 ;;		None               void
  7928 ;; Registers used:
  7929 ;;		wreg, status,2, status,0, cstack
  7930 ;; Tracked objects:
  7931 ;;		On entry : 0/0
  7932 ;;		On exit  : 0/0
  7933 ;;		Unchanged: 0/0
  7934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7935 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7936 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7937 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7938 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7939 ;;Total ram usage:        3 bytes
  7940 ;; Hardware stack levels used:    1
  7941 ;; Hardware stack levels required when called:    5
  7942 ;; This function calls:
  7943 ;;		_I2C_Start
  7944 ;;		_I2C_Stop
  7945 ;;		_I2C_Write
  7946 ;; This function is called by:
  7947 ;;		_DS1621_Init
  7948 ;; This function uses a non-reentrant model
  7949 ;;
  7950                           
  7951                           	psect	text40
  7952  001BA8                     __ptext40:
  7953                           	opt stack 0
  7954  001BA8                     _I2C_Write_Cmd_Write_Data:
  7955                           	opt stack 23
  7956                           
  7957                           ;incstack = 0
  7958                           ;I2C_Write_Cmd_Write_Data@Device stored from wreg
  7959  001BA8  6E15               	movwf	I2C_Write_Cmd_Write_Data@Device,c
  7960                           
  7961                           ;I2C.c: 155: I2C_Start();
  7962  001BAA  EC3F  F00E         	call	_I2C_Start	;wreg free
  7963                           
  7964                           ;I2C.c: 156: I2C_Write((Device << 1) | 0);
  7965  001BAE  5015               	movf	I2C_Write_Cmd_Write_Data@Device,w,c
  7966  001BB0  2415               	addwf	I2C_Write_Cmd_Write_Data@Device,w,c
  7967  001BB2  ECE4  F00C         	call	_I2C_Write
  7968                           
  7969                           ;I2C.c: 157: I2C_Write(Cmd);
  7970  001BB6  5013               	movf	I2C_Write_Cmd_Write_Data@Cmd,w,c
  7971  001BB8  ECE4  F00C         	call	_I2C_Write
  7972                           
  7973                           ;I2C.c: 158: I2C_Write(Data_Out);
  7974  001BBC  5014               	movf	I2C_Write_Cmd_Write_Data@Data_Out,w,c
  7975  001BBE  ECE4  F00C         	call	_I2C_Write
  7976                           
  7977                           ;I2C.c: 159: I2C_Stop();
  7978  001BC2  EC36  F00E         	call	_I2C_Stop	;wreg free
  7979  001BC6  0012               	return		;funcret
  7980  001BC8                     __end_of_I2C_Write_Cmd_Write_Data:
  7981                           	opt stack 0
  7982                           tblptru	equ	0xFF8
  7983                           tblptrh	equ	0xFF7
  7984                           tblptrl	equ	0xFF6
  7985                           tablat	equ	0xFF5
  7986                           prodh	equ	0xFF4
  7987                           prodl	equ	0xFF3
  7988                           intcon	equ	0xFF2
  7989                           intcon2	equ	0xFF1
  7990                           postinc0	equ	0xFEE
  7991                           wreg	equ	0xFE8
  7992                           postdec1	equ	0xFE5
  7993                           fsr1l	equ	0xFE1
  7994                           indf2	equ	0xFDF
  7995                           postinc2	equ	0xFDE
  7996                           postdec2	equ	0xFDD
  7997                           fsr2h	equ	0xFDA
  7998                           fsr2l	equ	0xFD9
  7999                           status	equ	0xFD8
  8000                           
  8001 ;; *************** function _I2C_Write_Cmd_Only *****************
  8002 ;; Defined at:
  8003 ;;		line 145 in file "I2C.c"
  8004 ;; Parameters:    Size  Location     Type
  8005 ;;  Device          1    wreg     unsigned char 
  8006 ;;  Cmd             1   18[COMRAM] unsigned char 
  8007 ;; Auto vars:     Size  Location     Type
  8008 ;;  Device          1   19[COMRAM] unsigned char 
  8009 ;; Return value:  Size  Location     Type
  8010 ;;		None               void
  8011 ;; Registers used:
  8012 ;;		wreg, status,2, status,0, cstack
  8013 ;; Tracked objects:
  8014 ;;		On entry : 0/0
  8015 ;;		On exit  : 0/0
  8016 ;;		Unchanged: 0/0
  8017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8018 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8019 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8020 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8021 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8022 ;;Total ram usage:        2 bytes
  8023 ;; Hardware stack levels used:    1
  8024 ;; Hardware stack levels required when called:    5
  8025 ;; This function calls:
  8026 ;;		_I2C_Start
  8027 ;;		_I2C_Stop
  8028 ;;		_I2C_Write
  8029 ;; This function is called by:
  8030 ;;		_DS1621_Init
  8031 ;; This function uses a non-reentrant model
  8032 ;;
  8033                           
  8034                           	psect	text41
  8035  001C02                     __ptext41:
  8036                           	opt stack 0
  8037  001C02                     _I2C_Write_Cmd_Only:
  8038                           	opt stack 23
  8039                           
  8040                           ;incstack = 0
  8041                           ;I2C_Write_Cmd_Only@Device stored from wreg
  8042  001C02  6E14               	movwf	I2C_Write_Cmd_Only@Device,c
  8043                           
  8044                           ;I2C.c: 147: I2C_Start();
  8045  001C04  EC3F  F00E         	call	_I2C_Start	;wreg free
  8046                           
  8047                           ;I2C.c: 148: I2C_Write((Device << 1) | 0);
  8048  001C08  5014               	movf	I2C_Write_Cmd_Only@Device,w,c
  8049  001C0A  2414               	addwf	I2C_Write_Cmd_Only@Device,w,c
  8050  001C0C  ECE4  F00C         	call	_I2C_Write
  8051                           
  8052                           ;I2C.c: 149: I2C_Write(Cmd);
  8053  001C10  5013               	movf	I2C_Write_Cmd_Only@Cmd,w,c
  8054  001C12  ECE4  F00C         	call	_I2C_Write
  8055                           
  8056                           ;I2C.c: 150: I2C_Stop();
  8057  001C16  EC36  F00E         	call	_I2C_Stop	;wreg free
  8058  001C1A  0012               	return		;funcret
  8059  001C1C                     __end_of_I2C_Write_Cmd_Only:
  8060                           	opt stack 0
  8061                           tblptru	equ	0xFF8
  8062                           tblptrh	equ	0xFF7
  8063                           tblptrl	equ	0xFF6
  8064                           tablat	equ	0xFF5
  8065                           prodh	equ	0xFF4
  8066                           prodl	equ	0xFF3
  8067                           intcon	equ	0xFF2
  8068                           intcon2	equ	0xFF1
  8069                           postinc0	equ	0xFEE
  8070                           wreg	equ	0xFE8
  8071                           postdec1	equ	0xFE5
  8072                           fsr1l	equ	0xFE1
  8073                           indf2	equ	0xFDF
  8074                           postinc2	equ	0xFDE
  8075                           postdec2	equ	0xFDD
  8076                           fsr2h	equ	0xFDA
  8077                           fsr2l	equ	0xFD9
  8078                           status	equ	0xFD8
  8079                           
  8080 ;; *************** function _Deactivate_Buzzer *****************
  8081 ;; Defined at:
  8082 ;;		line 204 in file "Lab10p1.c"
  8083 ;; Parameters:    Size  Location     Type
  8084 ;;		None
  8085 ;; Auto vars:     Size  Location     Type
  8086 ;;		None
  8087 ;; Return value:  Size  Location     Type
  8088 ;;		None               void
  8089 ;; Registers used:
  8090 ;;		wreg, status,2
  8091 ;; Tracked objects:
  8092 ;;		On entry : 0/0
  8093 ;;		On exit  : 0/0
  8094 ;;		Unchanged: 0/0
  8095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8096 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8097 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8098 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8099 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8100 ;;Total ram usage:        0 bytes
  8101 ;; Hardware stack levels used:    1
  8102 ;; Hardware stack levels required when called:    3
  8103 ;; This function calls:
  8104 ;;		Nothing
  8105 ;; This function is called by:
  8106 ;;		_main
  8107 ;; This function uses a non-reentrant model
  8108 ;;
  8109                           
  8110                           	psect	text42
  8111  001D20                     __ptext42:
  8112                           	opt stack 0
  8113  001D20                     _Deactivate_Buzzer:
  8114                           	opt stack 27
  8115                           
  8116                           ;Lab10p1.c: 206: CCP2CON = 0x0;
  8117                           
  8118                           ;incstack = 0
  8119  001D20  0E00               	movlw	0
  8120  001D22  6EBA               	movwf	4026,c	;volatile
  8121                           
  8122                           ;Lab10p1.c: 207: PORTBbits.RB3 = 0;
  8123  001D24  9681               	bcf	3969,3,c	;volatile
  8124  001D26  0012               	return		;funcret
  8125  001D28                     __end_of_Deactivate_Buzzer:
  8126                           	opt stack 0
  8127                           tblptru	equ	0xFF8
  8128                           tblptrh	equ	0xFF7
  8129                           tblptrl	equ	0xFF6
  8130                           tablat	equ	0xFF5
  8131                           prodh	equ	0xFF4
  8132                           prodl	equ	0xFF3
  8133                           intcon	equ	0xFF2
  8134                           intcon2	equ	0xFF1
  8135                           postinc0	equ	0xFEE
  8136                           wreg	equ	0xFE8
  8137                           postdec1	equ	0xFE5
  8138                           fsr1l	equ	0xFE1
  8139                           indf2	equ	0xFDF
  8140                           postinc2	equ	0xFDE
  8141                           postdec2	equ	0xFDD
  8142                           fsr2h	equ	0xFDA
  8143                           fsr2l	equ	0xFD9
  8144                           status	equ	0xFD8
  8145                           
  8146 ;; *************** function _DS3231_Setup_Time *****************
  8147 ;; Defined at:
  8148 ;;		line 65 in file "I2C_Support.c"
  8149 ;; Parameters:    Size  Location     Type
  8150 ;;		None
  8151 ;; Auto vars:     Size  Location     Type
  8152 ;;  Address         1   19[COMRAM] unsigned char 
  8153 ;;  Device          1   18[COMRAM] unsigned char 
  8154 ;; Return value:  Size  Location     Type
  8155 ;;		None               void
  8156 ;; Registers used:
  8157 ;;		wreg, status,2, status,0, cstack
  8158 ;; Tracked objects:
  8159 ;;		On entry : 0/0
  8160 ;;		On exit  : 0/0
  8161 ;;		Unchanged: 0/0
  8162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8163 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8164 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8165 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8166 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8167 ;;Total ram usage:        2 bytes
  8168 ;; Hardware stack levels used:    1
  8169 ;; Hardware stack levels required when called:    5
  8170 ;; This function calls:
  8171 ;;		_I2C_Start
  8172 ;;		_I2C_Stop
  8173 ;;		_I2C_Write
  8174 ;; This function is called by:
  8175 ;;		_main
  8176 ;; This function uses a non-reentrant model
  8177 ;;
  8178                           
  8179                           	psect	text43
  8180  00166A                     __ptext43:
  8181                           	opt stack 0
  8182  00166A                     _DS3231_Setup_Time:
  8183                           	opt stack 25
  8184                           
  8185                           ;I2C_Support.c: 67: char Device = 0x68;
  8186                           
  8187                           ;incstack = 0
  8188  00166A  0E68               	movlw	104
  8189  00166C  6E13               	movwf	DS3231_Setup_Time@Device,c
  8190                           
  8191                           ;I2C_Support.c: 68: char Address = 0x00;
  8192  00166E  0E00               	movlw	0
  8193  001670  6E14               	movwf	DS3231_Setup_Time@Address,c
  8194                           
  8195                           ;I2C_Support.c: 69: second = 0x20;
  8196  001672  0E20               	movlw	32
  8197  001674  6E63               	movwf	_second,c
  8198                           
  8199                           ;I2C_Support.c: 70: minute = 0x10;
  8200  001676  0E10               	movlw	16
  8201  001678  6E60               	movwf	_minute,c
  8202                           
  8203                           ;I2C_Support.c: 71: hour = 0x02;
  8204  00167A  0E02               	movlw	2
  8205  00167C  6E5F               	movwf	_hour,c
  8206                           
  8207                           ;I2C_Support.c: 72: dow = 0x05;
  8208  00167E  0E05               	movlw	5
  8209  001680  6E5D               	movwf	_dow,c
  8210                           
  8211                           ;I2C_Support.c: 73: day = 0x28;
  8212  001682  0E28               	movlw	40
  8213  001684  6E5C               	movwf	_day,c
  8214                           
  8215                           ;I2C_Support.c: 74: month = 0x10;
  8216  001686  0E10               	movlw	16
  8217  001688  6E61               	movwf	_month,c
  8218                           
  8219                           ;I2C_Support.c: 75: year = 0x21;
  8220  00168A  0E21               	movlw	33
  8221  00168C  6E6D               	movwf	_year,c
  8222                           
  8223                           ;I2C_Support.c: 76: I2C_Start();
  8224  00168E  EC3F  F00E         	call	_I2C_Start	;wreg free
  8225                           
  8226                           ;I2C_Support.c: 78: I2C_Write((Device << 1) | 0);
  8227  001692  5013               	movf	DS3231_Setup_Time@Device,w,c
  8228  001694  2413               	addwf	DS3231_Setup_Time@Device,w,c
  8229  001696  ECE4  F00C         	call	_I2C_Write
  8230                           
  8231                           ;I2C_Support.c: 79: I2C_Write(Address);
  8232  00169A  5014               	movf	DS3231_Setup_Time@Address,w,c
  8233  00169C  ECE4  F00C         	call	_I2C_Write
  8234                           
  8235                           ;I2C_Support.c: 80: I2C_Write(second);
  8236  0016A0  5063               	movf	_second,w,c
  8237  0016A2  ECE4  F00C         	call	_I2C_Write
  8238                           
  8239                           ;I2C_Support.c: 81: I2C_Write(minute);
  8240  0016A6  5060               	movf	_minute,w,c
  8241  0016A8  ECE4  F00C         	call	_I2C_Write
  8242                           
  8243                           ;I2C_Support.c: 82: I2C_Write(hour);
  8244  0016AC  505F               	movf	_hour,w,c
  8245  0016AE  ECE4  F00C         	call	_I2C_Write
  8246                           
  8247                           ;I2C_Support.c: 83: I2C_Write(dow);
  8248  0016B2  505D               	movf	_dow,w,c
  8249  0016B4  ECE4  F00C         	call	_I2C_Write
  8250                           
  8251                           ;I2C_Support.c: 84: I2C_Write(day);
  8252  0016B8  505C               	movf	_day,w,c
  8253  0016BA  ECE4  F00C         	call	_I2C_Write
  8254                           
  8255                           ;I2C_Support.c: 85: I2C_Write(month);
  8256  0016BE  5061               	movf	_month,w,c
  8257  0016C0  ECE4  F00C         	call	_I2C_Write
  8258                           
  8259                           ;I2C_Support.c: 86: I2C_Write(year);
  8260  0016C4  506D               	movf	_year,w,c
  8261  0016C6  ECE4  F00C         	call	_I2C_Write
  8262                           
  8263                           ;I2C_Support.c: 88: I2C_Stop();
  8264  0016CA  EC36  F00E         	call	_I2C_Stop	;wreg free
  8265  0016CE  0012               	return		;funcret
  8266  0016D0                     __end_of_DS3231_Setup_Time:
  8267                           	opt stack 0
  8268                           tblptru	equ	0xFF8
  8269                           tblptrh	equ	0xFF7
  8270                           tblptrl	equ	0xFF6
  8271                           tablat	equ	0xFF5
  8272                           prodh	equ	0xFF4
  8273                           prodl	equ	0xFF3
  8274                           intcon	equ	0xFF2
  8275                           intcon2	equ	0xFF1
  8276                           postinc0	equ	0xFEE
  8277                           wreg	equ	0xFE8
  8278                           postdec1	equ	0xFE5
  8279                           fsr1l	equ	0xFE1
  8280                           indf2	equ	0xFDF
  8281                           postinc2	equ	0xFDE
  8282                           postdec2	equ	0xFDD
  8283                           fsr2h	equ	0xFDA
  8284                           fsr2l	equ	0xFD9
  8285                           status	equ	0xFD8
  8286                           
  8287 ;; *************** function _DS3231_Read_Time *****************
  8288 ;; Defined at:
  8289 ;;		line 45 in file "I2C_Support.c"
  8290 ;; Parameters:    Size  Location     Type
  8291 ;;		None
  8292 ;; Auto vars:     Size  Location     Type
  8293 ;;  Device          1   20[COMRAM] unsigned char 
  8294 ;;  Address         1   19[COMRAM] unsigned char 
  8295 ;;  Data_Ret        1    0        unsigned char 
  8296 ;; Return value:  Size  Location     Type
  8297 ;;		None               void
  8298 ;; Registers used:
  8299 ;;		wreg, status,2, status,0, cstack
  8300 ;; Tracked objects:
  8301 ;;		On entry : 0/0
  8302 ;;		On exit  : 0/0
  8303 ;;		Unchanged: 0/0
  8304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8305 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8306 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8307 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8308 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8309 ;;Total ram usage:        2 bytes
  8310 ;; Hardware stack levels used:    1
  8311 ;; Hardware stack levels required when called:    6
  8312 ;; This function calls:
  8313 ;;		_I2C_ReStart
  8314 ;;		_I2C_Read
  8315 ;;		_I2C_Start
  8316 ;;		_I2C_Stop
  8317 ;;		_I2C_Write
  8318 ;; This function is called by:
  8319 ;;		_main
  8320 ;; This function uses a non-reentrant model
  8321 ;;
  8322                           
  8323                           	psect	text44
  8324  0016D0                     __ptext44:
  8325                           	opt stack 0
  8326  0016D0                     _DS3231_Read_Time:
  8327                           	opt stack 24
  8328                           
  8329                           ;I2C_Support.c: 47: char Device = 0x68;
  8330                           
  8331                           ;incstack = 0
  8332  0016D0  0E68               	movlw	104
  8333  0016D2  6E15               	movwf	DS3231_Read_Time@Device,c
  8334                           
  8335                           ;I2C_Support.c: 48: char Address = 0x00;
  8336  0016D4  0E00               	movlw	0
  8337  0016D6  6E14               	movwf	DS3231_Read_Time@Address,c
  8338                           
  8339                           ;I2C_Support.c: 49: char Data_Ret;
  8340                           ;I2C_Support.c: 50: I2C_Start();
  8341  0016D8  EC3F  F00E         	call	_I2C_Start	;wreg free
  8342                           
  8343                           ;I2C_Support.c: 51: I2C_Write((Device << 1) | 0);
  8344  0016DC  5015               	movf	DS3231_Read_Time@Device,w,c
  8345  0016DE  2415               	addwf	DS3231_Read_Time@Device,w,c
  8346  0016E0  ECE4  F00C         	call	_I2C_Write
  8347                           
  8348                           ;I2C_Support.c: 52: I2C_Write(Address);
  8349  0016E4  5014               	movf	DS3231_Read_Time@Address,w,c
  8350  0016E6  ECE4  F00C         	call	_I2C_Write
  8351                           
  8352                           ;I2C_Support.c: 53: I2C_ReStart();
  8353  0016EA  EC0E  F00E         	call	_I2C_ReStart	;wreg free
  8354                           
  8355                           ;I2C_Support.c: 54: I2C_Write((Device << 1) | 1);
  8356  0016EE  80D8               	bsf	status,0,c
  8357  0016F0  3415               	rlcf	DS3231_Read_Time@Device,w,c
  8358  0016F2  ECE4  F00C         	call	_I2C_Write
  8359                           
  8360                           ;I2C_Support.c: 55: second = I2C_Read(1);
  8361  0016F6  0E01               	movlw	1
  8362  0016F8  EC62  F00C         	call	_I2C_Read
  8363  0016FC  6E63               	movwf	_second,c
  8364                           
  8365                           ;I2C_Support.c: 56: minute = I2C_Read(1);
  8366  0016FE  0E01               	movlw	1
  8367  001700  EC62  F00C         	call	_I2C_Read
  8368  001704  6E60               	movwf	_minute,c
  8369                           
  8370                           ;I2C_Support.c: 57: hour = I2C_Read(1);
  8371  001706  0E01               	movlw	1
  8372  001708  EC62  F00C         	call	_I2C_Read
  8373  00170C  6E5F               	movwf	_hour,c
  8374                           
  8375                           ;I2C_Support.c: 58: dow = I2C_Read(1);
  8376  00170E  0E01               	movlw	1
  8377  001710  EC62  F00C         	call	_I2C_Read
  8378  001714  6E5D               	movwf	_dow,c
  8379                           
  8380                           ;I2C_Support.c: 59: day = I2C_Read(1);
  8381  001716  0E01               	movlw	1
  8382  001718  EC62  F00C         	call	_I2C_Read
  8383  00171C  6E5C               	movwf	_day,c
  8384                           
  8385                           ;I2C_Support.c: 60: month = I2C_Read(1);
  8386  00171E  0E01               	movlw	1
  8387  001720  EC62  F00C         	call	_I2C_Read
  8388  001724  6E61               	movwf	_month,c
  8389                           
  8390                           ;I2C_Support.c: 61: year = I2C_Read(0);
  8391  001726  0E00               	movlw	0
  8392  001728  EC62  F00C         	call	_I2C_Read
  8393  00172C  6E6D               	movwf	_year,c
  8394                           
  8395                           ;I2C_Support.c: 62: I2C_Stop();
  8396  00172E  EC36  F00E         	call	_I2C_Stop	;wreg free
  8397  001732  0012               	return		;funcret
  8398  001734                     __end_of_DS3231_Read_Time:
  8399                           	opt stack 0
  8400                           tblptru	equ	0xFF8
  8401                           tblptrh	equ	0xFF7
  8402                           tblptrl	equ	0xFF6
  8403                           tablat	equ	0xFF5
  8404                           prodh	equ	0xFF4
  8405                           prodl	equ	0xFF3
  8406                           intcon	equ	0xFF2
  8407                           intcon2	equ	0xFF1
  8408                           postinc0	equ	0xFEE
  8409                           wreg	equ	0xFE8
  8410                           postdec1	equ	0xFE5
  8411                           fsr1l	equ	0xFE1
  8412                           indf2	equ	0xFDF
  8413                           postinc2	equ	0xFDE
  8414                           postdec2	equ	0xFDD
  8415                           fsr2h	equ	0xFDA
  8416                           fsr2l	equ	0xFD9
  8417                           status	equ	0xFD8
  8418                           
  8419 ;; *************** function _DS1621_Read_Temp *****************
  8420 ;; Defined at:
  8421 ;;		line 30 in file "I2C_Support.c"
  8422 ;; Parameters:    Size  Location     Type
  8423 ;;		None
  8424 ;; Auto vars:     Size  Location     Type
  8425 ;;  Device          1   23[COMRAM] unsigned char 
  8426 ;;  Data_Ret        1   22[COMRAM] unsigned char 
  8427 ;;  Cmd             1   21[COMRAM] unsigned char 
  8428 ;; Return value:  Size  Location     Type
  8429 ;;                  2   19[COMRAM] int 
  8430 ;; Registers used:
  8431 ;;		wreg, status,2, status,0, cstack
  8432 ;; Tracked objects:
  8433 ;;		On entry : 0/0
  8434 ;;		On exit  : 0/0
  8435 ;;		Unchanged: 0/0
  8436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8437 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8438 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8439 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8440 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8441 ;;Total ram usage:        5 bytes
  8442 ;; Hardware stack levels used:    1
  8443 ;; Hardware stack levels required when called:    6
  8444 ;; This function calls:
  8445 ;;		_I2C_ReStart
  8446 ;;		_I2C_Read
  8447 ;;		_I2C_Start
  8448 ;;		_I2C_Stop
  8449 ;;		_I2C_Write
  8450 ;; This function is called by:
  8451 ;;		_main
  8452 ;; This function uses a non-reentrant model
  8453 ;;
  8454                           
  8455                           	psect	text45
  8456  001A42                     __ptext45:
  8457                           	opt stack 0
  8458  001A42                     _DS1621_Read_Temp:
  8459                           	opt stack 24
  8460                           
  8461                           ;I2C_Support.c: 32: char Device = 0x48;
  8462                           
  8463                           ;incstack = 0
  8464  001A42  0E48               	movlw	72
  8465  001A44  6E18               	movwf	DS1621_Read_Temp@Device,c
  8466                           
  8467                           ;I2C_Support.c: 33: char Cmd = 0xAA;
  8468  001A46  0EAA               	movlw	170
  8469  001A48  6E16               	movwf	DS1621_Read_Temp@Cmd,c
  8470                           
  8471                           ;I2C_Support.c: 34: char Data_Ret;
  8472                           ;I2C_Support.c: 35: I2C_Start();
  8473  001A4A  EC3F  F00E         	call	_I2C_Start	;wreg free
  8474                           
  8475                           ;I2C_Support.c: 36: I2C_Write((Device << 1) | 0);
  8476  001A4E  5018               	movf	DS1621_Read_Temp@Device,w,c
  8477  001A50  2418               	addwf	DS1621_Read_Temp@Device,w,c
  8478  001A52  ECE4  F00C         	call	_I2C_Write
  8479                           
  8480                           ;I2C_Support.c: 37: I2C_Write(Cmd);
  8481  001A56  5016               	movf	DS1621_Read_Temp@Cmd,w,c
  8482  001A58  ECE4  F00C         	call	_I2C_Write
  8483                           
  8484                           ;I2C_Support.c: 38: I2C_ReStart();
  8485  001A5C  EC0E  F00E         	call	_I2C_ReStart	;wreg free
  8486                           
  8487                           ;I2C_Support.c: 39: I2C_Write((Device << 1) | 1);
  8488  001A60  80D8               	bsf	status,0,c
  8489  001A62  3418               	rlcf	DS1621_Read_Temp@Device,w,c
  8490  001A64  ECE4  F00C         	call	_I2C_Write
  8491                           
  8492                           ;I2C_Support.c: 40: Data_Ret = I2C_Read(0);
  8493  001A68  0E00               	movlw	0
  8494  001A6A  EC62  F00C         	call	_I2C_Read
  8495  001A6E  6E17               	movwf	DS1621_Read_Temp@Data_Ret,c
  8496                           
  8497                           ;I2C_Support.c: 41: I2C_Stop();
  8498  001A70  EC36  F00E         	call	_I2C_Stop	;wreg free
  8499                           
  8500                           ;I2C_Support.c: 42: return Data_Ret;
  8501  001A74  C017  F014         	movff	DS1621_Read_Temp@Data_Ret,?_DS1621_Read_Temp
  8502  001A78  6A15               	clrf	?_DS1621_Read_Temp+1,c
  8503  001A7A  D000               	goto	l312
  8504  001A7C                     l312:
  8505  001A7C  0012               	return		;funcret
  8506  001A7E                     __end_of_DS1621_Read_Temp:
  8507                           	opt stack 0
  8508                           tblptru	equ	0xFF8
  8509                           tblptrh	equ	0xFF7
  8510                           tblptrl	equ	0xFF6
  8511                           tablat	equ	0xFF5
  8512                           prodh	equ	0xFF4
  8513                           prodl	equ	0xFF3
  8514                           intcon	equ	0xFF2
  8515                           intcon2	equ	0xFF1
  8516                           postinc0	equ	0xFEE
  8517                           wreg	equ	0xFE8
  8518                           postdec1	equ	0xFE5
  8519                           fsr1l	equ	0xFE1
  8520                           indf2	equ	0xFDF
  8521                           postinc2	equ	0xFDE
  8522                           postdec2	equ	0xFDD
  8523                           fsr2h	equ	0xFDA
  8524                           fsr2l	equ	0xFD9
  8525                           status	equ	0xFD8
  8526                           
  8527 ;; *************** function _I2C_Write *****************
  8528 ;; Defined at:
  8529 ;;		line 42 in file "I2C.c"
  8530 ;; Parameters:    Size  Location     Type
  8531 ;;  outByte         1    wreg     unsigned char 
  8532 ;; Auto vars:     Size  Location     Type
  8533 ;;  outByte         1   16[COMRAM] unsigned char 
  8534 ;;  n               1   17[COMRAM] unsigned char 
  8535 ;; Return value:  Size  Location     Type
  8536 ;;		None               void
  8537 ;; Registers used:
  8538 ;;		wreg, status,2, status,0, cstack
  8539 ;; Tracked objects:
  8540 ;;		On entry : 0/0
  8541 ;;		On exit  : 0/0
  8542 ;;		Unchanged: 0/0
  8543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8544 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8545 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8546 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8547 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8548 ;;Total ram usage:        2 bytes
  8549 ;; Hardware stack levels used:    1
  8550 ;; Hardware stack levels required when called:    4
  8551 ;; This function calls:
  8552 ;;		_i2cHighScl
  8553 ;;		_i2cHighSda
  8554 ;;		_i2cLowScl
  8555 ;;		_i2cLowSda
  8556 ;; This function is called by:
  8557 ;;		_I2C_Write_Cmd_Only
  8558 ;;		_I2C_Write_Cmd_Write_Data
  8559 ;;		_DS1621_Read_Temp
  8560 ;;		_DS3231_Read_Time
  8561 ;;		_DS3231_Setup_Time
  8562 ;;		_I2C_Write_Address_Read_One_Byte
  8563 ;;		_I2C_Write_Address_Write_One_Byte
  8564 ;;		_I2C_Write_Cmd_Read_One_Byte
  8565 ;; This function uses a non-reentrant model
  8566 ;;
  8567                           
  8568                           	psect	text46
  8569  0019C8                     __ptext46:
  8570                           	opt stack 0
  8571  0019C8                     _I2C_Write:
  8572                           	opt stack 23
  8573                           
  8574                           ;incstack = 0
  8575                           ;I2C_Write@outByte stored from wreg
  8576  0019C8  6E11               	movwf	I2C_Write@outByte,c
  8577                           
  8578                           ;I2C.c: 44: unsigned char n;
  8579                           ;I2C.c: 45: for(n=0; n<8; n++)
  8580  0019CA  0E00               	movlw	0
  8581  0019CC  6E12               	movwf	I2C_Write@n,c
  8582  0019CE                     l4447:
  8583  0019CE  0E07               	movlw	7
  8584  0019D0  6412               	cpfsgt	I2C_Write@n,c
  8585  0019D2  D001               	goto	l232
  8586  0019D4  D011               	goto	l4465
  8587  0019D6                     l232:
  8588                           
  8589                           ;I2C.c: 46: {
  8590                           ;I2C.c: 47: if(outByte&0x80) i2cHighSda();
  8591  0019D6  AE11               	btfss	I2C_Write@outByte,7,c
  8592  0019D8  D003               	goto	l4453
  8593  0019DA  EC98  F00E         	call	_i2cHighSda	;wreg free
  8594  0019DE  D003               	goto	l4455
  8595  0019E0                     l4453:
  8596                           
  8597                           ;I2C.c: 48: else i2cLowSda();
  8598  0019E0  EC87  F00E         	call	_i2cLowSda	;wreg free
  8599  0019E4  D000               	goto	l4455
  8600  0019E6                     l4455:
  8601                           
  8602                           ;I2C.c: 49: i2cHighScl();
  8603  0019E6  EC71  F00E         	call	_i2cHighScl	;wreg free
  8604                           
  8605                           ;I2C.c: 50: i2cLowScl();
  8606  0019EA  EC94  F00E         	call	_i2cLowScl	;wreg free
  8607                           
  8608                           ;I2C.c: 51: outByte = outByte << 1;
  8609  0019EE  5011               	movf	I2C_Write@outByte,w,c
  8610  0019F0  2411               	addwf	I2C_Write@outByte,w,c
  8611  0019F2  6E11               	movwf	I2C_Write@outByte,c
  8612  0019F4  2A12               	incf	I2C_Write@n,f,c
  8613  0019F6  D7EB               	goto	l4447
  8614  0019F8                     l4465:
  8615                           
  8616                           ;I2C.c: 52: }
  8617                           ;I2C.c: 53: i2cHighSda();
  8618  0019F8  EC98  F00E         	call	_i2cHighSda	;wreg free
  8619                           
  8620                           ;I2C.c: 54: i2cHighScl();
  8621  0019FC  EC71  F00E         	call	_i2cHighScl	;wreg free
  8622                           
  8623                           ;I2C.c: 55: i2cLowScl();
  8624  001A00  EC94  F00E         	call	_i2cLowScl	;wreg free
  8625  001A04  0012               	return		;funcret
  8626  001A06                     __end_of_I2C_Write:
  8627                           	opt stack 0
  8628                           tblptru	equ	0xFF8
  8629                           tblptrh	equ	0xFF7
  8630                           tblptrl	equ	0xFF6
  8631                           tablat	equ	0xFF5
  8632                           prodh	equ	0xFF4
  8633                           prodl	equ	0xFF3
  8634                           intcon	equ	0xFF2
  8635                           intcon2	equ	0xFF1
  8636                           postinc0	equ	0xFEE
  8637                           wreg	equ	0xFE8
  8638                           postdec1	equ	0xFE5
  8639                           fsr1l	equ	0xFE1
  8640                           indf2	equ	0xFDF
  8641                           postinc2	equ	0xFDE
  8642                           postdec2	equ	0xFDD
  8643                           fsr2h	equ	0xFDA
  8644                           fsr2l	equ	0xFD9
  8645                           status	equ	0xFD8
  8646                           
  8647 ;; *************** function _I2C_Stop *****************
  8648 ;; Defined at:
  8649 ;;		line 89 in file "I2C.c"
  8650 ;; Parameters:    Size  Location     Type
  8651 ;;		None
  8652 ;; Auto vars:     Size  Location     Type
  8653 ;;		None
  8654 ;; Return value:  Size  Location     Type
  8655 ;;		None               void
  8656 ;; Registers used:
  8657 ;;		wreg, cstack
  8658 ;; Tracked objects:
  8659 ;;		On entry : 0/0
  8660 ;;		On exit  : 0/0
  8661 ;;		Unchanged: 0/0
  8662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8663 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8664 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8665 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8666 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8667 ;;Total ram usage:        0 bytes
  8668 ;; Hardware stack levels used:    1
  8669 ;; Hardware stack levels required when called:    4
  8670 ;; This function calls:
  8671 ;;		_i2cHighScl
  8672 ;;		_i2cHighSda
  8673 ;;		_i2cLowScl
  8674 ;;		_i2cLowSda
  8675 ;; This function is called by:
  8676 ;;		_I2C_Write_Cmd_Only
  8677 ;;		_I2C_Write_Cmd_Write_Data
  8678 ;;		_DS1621_Read_Temp
  8679 ;;		_DS3231_Read_Time
  8680 ;;		_DS3231_Setup_Time
  8681 ;;		_I2C_Write_Address_Read_One_Byte
  8682 ;;		_I2C_Write_Address_Write_One_Byte
  8683 ;;		_I2C_Write_Cmd_Read_One_Byte
  8684 ;; This function uses a non-reentrant model
  8685 ;;
  8686                           
  8687                           	psect	text47
  8688  001C6C                     __ptext47:
  8689                           	opt stack 0
  8690  001C6C                     _I2C_Stop:
  8691                           	opt stack 23
  8692                           
  8693                           ;I2C.c: 91: i2cLowScl();
  8694                           
  8695                           ;incstack = 0
  8696  001C6C  EC94  F00E         	call	_i2cLowScl	;wreg free
  8697                           
  8698                           ;I2C.c: 92: i2cLowSda();
  8699  001C70  EC87  F00E         	call	_i2cLowSda	;wreg free
  8700                           
  8701                           ;I2C.c: 93: i2cHighScl();
  8702  001C74  EC71  F00E         	call	_i2cHighScl	;wreg free
  8703                           
  8704                           ;I2C.c: 94: i2cHighSda();
  8705  001C78  EC98  F00E         	call	_i2cHighSda	;wreg free
  8706  001C7C  0012               	return		;funcret
  8707  001C7E                     __end_of_I2C_Stop:
  8708                           	opt stack 0
  8709                           tblptru	equ	0xFF8
  8710                           tblptrh	equ	0xFF7
  8711                           tblptrl	equ	0xFF6
  8712                           tablat	equ	0xFF5
  8713                           prodh	equ	0xFF4
  8714                           prodl	equ	0xFF3
  8715                           intcon	equ	0xFF2
  8716                           intcon2	equ	0xFF1
  8717                           postinc0	equ	0xFEE
  8718                           wreg	equ	0xFE8
  8719                           postdec1	equ	0xFE5
  8720                           fsr1l	equ	0xFE1
  8721                           indf2	equ	0xFDF
  8722                           postinc2	equ	0xFDE
  8723                           postdec2	equ	0xFDD
  8724                           fsr2h	equ	0xFDA
  8725                           fsr2l	equ	0xFD9
  8726                           status	equ	0xFD8
  8727                           
  8728 ;; *************** function _I2C_Start *****************
  8729 ;; Defined at:
  8730 ;;		line 72 in file "I2C.c"
  8731 ;; Parameters:    Size  Location     Type
  8732 ;;		None
  8733 ;; Auto vars:     Size  Location     Type
  8734 ;;		None
  8735 ;; Return value:  Size  Location     Type
  8736 ;;		None               void
  8737 ;; Registers used:
  8738 ;;		wreg, cstack
  8739 ;; Tracked objects:
  8740 ;;		On entry : 0/0
  8741 ;;		On exit  : 0/0
  8742 ;;		Unchanged: 0/0
  8743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8744 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8745 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8746 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8747 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8748 ;;Total ram usage:        0 bytes
  8749 ;; Hardware stack levels used:    1
  8750 ;; Hardware stack levels required when called:    4
  8751 ;; This function calls:
  8752 ;;		_i2cHighScl
  8753 ;;		_i2cHighSda
  8754 ;;		_i2cLowScl
  8755 ;;		_i2cLowSda
  8756 ;; This function is called by:
  8757 ;;		_I2C_Write_Cmd_Only
  8758 ;;		_I2C_Write_Cmd_Write_Data
  8759 ;;		_DS1621_Read_Temp
  8760 ;;		_DS3231_Read_Time
  8761 ;;		_DS3231_Setup_Time
  8762 ;;		_I2C_Write_Address_Read_One_Byte
  8763 ;;		_I2C_Write_Address_Write_One_Byte
  8764 ;;		_I2C_Write_Cmd_Read_One_Byte
  8765 ;; This function uses a non-reentrant model
  8766 ;;
  8767                           
  8768                           	psect	text48
  8769  001C7E                     __ptext48:
  8770                           	opt stack 0
  8771  001C7E                     _I2C_Start:
  8772                           	opt stack 23
  8773                           
  8774                           ;I2C.c: 74: i2cHighSda();
  8775                           
  8776                           ;incstack = 0
  8777  001C7E  EC98  F00E         	call	_i2cHighSda	;wreg free
  8778                           
  8779                           ;I2C.c: 75: i2cHighScl();
  8780  001C82  EC71  F00E         	call	_i2cHighScl	;wreg free
  8781                           
  8782                           ;I2C.c: 76: i2cLowSda();
  8783  001C86  EC87  F00E         	call	_i2cLowSda	;wreg free
  8784                           
  8785                           ;I2C.c: 77: i2cLowScl();
  8786  001C8A  EC94  F00E         	call	_i2cLowScl	;wreg free
  8787  001C8E  0012               	return		;funcret
  8788  001C90                     __end_of_I2C_Start:
  8789                           	opt stack 0
  8790                           tblptru	equ	0xFF8
  8791                           tblptrh	equ	0xFF7
  8792                           tblptrl	equ	0xFF6
  8793                           tablat	equ	0xFF5
  8794                           prodh	equ	0xFF4
  8795                           prodl	equ	0xFF3
  8796                           intcon	equ	0xFF2
  8797                           intcon2	equ	0xFF1
  8798                           postinc0	equ	0xFEE
  8799                           wreg	equ	0xFE8
  8800                           postdec1	equ	0xFE5
  8801                           fsr1l	equ	0xFE1
  8802                           indf2	equ	0xFDF
  8803                           postinc2	equ	0xFDE
  8804                           postdec2	equ	0xFDD
  8805                           fsr2h	equ	0xFDA
  8806                           fsr2l	equ	0xFD9
  8807                           status	equ	0xFD8
  8808                           
  8809 ;; *************** function _I2C_Read *****************
  8810 ;; Defined at:
  8811 ;;		line 21 in file "I2C.c"
  8812 ;; Parameters:    Size  Location     Type
  8813 ;;  ack             1    wreg     unsigned char 
  8814 ;; Auto vars:     Size  Location     Type
  8815 ;;  ack             1   16[COMRAM] unsigned char 
  8816 ;;  inByte          1   18[COMRAM] unsigned char 
  8817 ;;  n               1   17[COMRAM] unsigned char 
  8818 ;; Return value:  Size  Location     Type
  8819 ;;                  1    wreg      unsigned char 
  8820 ;; Registers used:
  8821 ;;		wreg, status,2, status,0, cstack
  8822 ;; Tracked objects:
  8823 ;;		On entry : 0/0
  8824 ;;		On exit  : 0/0
  8825 ;;		Unchanged: 0/0
  8826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8827 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8828 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8829 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8830 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8831 ;;Total ram usage:        3 bytes
  8832 ;; Hardware stack levels used:    1
  8833 ;; Hardware stack levels required when called:    5
  8834 ;; This function calls:
  8835 ;;		_i2cAck
  8836 ;;		_i2cHighScl
  8837 ;;		_i2cHighSda
  8838 ;;		_i2cLowScl
  8839 ;;		_i2cNack
  8840 ;; This function is called by:
  8841 ;;		_DS1621_Read_Temp
  8842 ;;		_DS3231_Read_Time
  8843 ;;		_I2C_Write_Address_Read_One_Byte
  8844 ;;		_I2C_Write_Cmd_Read_One_Byte
  8845 ;; This function uses a non-reentrant model
  8846 ;;
  8847                           
  8848                           	psect	text49
  8849  0018C4                     __ptext49:
  8850                           	opt stack 0
  8851  0018C4                     _I2C_Read:
  8852                           	opt stack 24
  8853                           
  8854                           ;incstack = 0
  8855                           ;I2C_Read@ack stored from wreg
  8856  0018C4  6E11               	movwf	I2C_Read@ack,c
  8857                           
  8858                           ;I2C.c: 23: unsigned char inByte, n;
  8859                           ;I2C.c: 24: i2cHighSda();
  8860  0018C6  EC98  F00E         	call	_i2cHighSda	;wreg free
  8861                           
  8862                           ;I2C.c: 25: for (n=0; n<8; n++)
  8863  0018CA  0E00               	movlw	0
  8864  0018CC  6E12               	movwf	I2C_Read@n,c
  8865  0018CE                     l4891:
  8866  0018CE  0E07               	movlw	7
  8867  0018D0  6412               	cpfsgt	I2C_Read@n,c
  8868  0018D2  D001               	goto	l4895
  8869  0018D4  D00F               	goto	l4909
  8870  0018D6                     l4895:
  8871                           
  8872                           ;I2C.c: 26: {
  8873                           ;I2C.c: 27: i2cHighScl();
  8874  0018D6  EC71  F00E         	call	_i2cHighScl	;wreg free
  8875                           
  8876                           ;I2C.c: 29: if (PORTDbits.RD3)
  8877  0018DA  A683               	btfss	3971,3,c	;volatile
  8878  0018DC  D003               	goto	l4901
  8879                           
  8880                           ;I2C.c: 30: inByte = (inByte << 1) | 0x01;
  8881  0018DE  80D8               	bsf	status,0,c
  8882  0018E0  3613               	rlcf	I2C_Read@inByte,f,c
  8883  0018E2  D004               	goto	l4903
  8884  0018E4                     l4901:
  8885                           
  8886                           ;I2C.c: 31: else
  8887                           ;I2C.c: 32: inByte = inByte << 1;
  8888  0018E4  5013               	movf	I2C_Read@inByte,w,c
  8889  0018E6  2413               	addwf	I2C_Read@inByte,w,c
  8890  0018E8  6E13               	movwf	I2C_Read@inByte,c
  8891  0018EA  D000               	goto	l4903
  8892  0018EC                     l4903:
  8893                           
  8894                           ;I2C.c: 33: i2cLowScl();
  8895  0018EC  EC94  F00E         	call	_i2cLowScl	;wreg free
  8896  0018F0  2A12               	incf	I2C_Read@n,f,c
  8897  0018F2  D7ED               	goto	l4891
  8898  0018F4                     l4909:
  8899                           
  8900                           ;I2C.c: 34: }
  8901                           ;I2C.c: 35: if (ack) i2cAck();
  8902  0018F4  5011               	movf	I2C_Read@ack,w,c
  8903  0018F6  B4D8               	btfsc	status,2,c
  8904  0018F8  D003               	goto	l4913
  8905  0018FA  EC48  F00E         	call	_i2cAck	;wreg free
  8906  0018FE  D003               	goto	l4915
  8907  001900                     l4913:
  8908                           
  8909                           ;I2C.c: 36: else i2cNack();
  8910  001900  EC82  F00E         	call	_i2cNack	;wreg free
  8911  001904  D000               	goto	l4915
  8912  001906                     l4915:
  8913                           
  8914                           ;I2C.c: 39: return(inByte);
  8915  001906  5013               	movf	I2C_Read@inByte,w,c
  8916  001908  D000               	goto	l229
  8917  00190A                     l229:
  8918  00190A  0012               	return		;funcret
  8919  00190C                     __end_of_I2C_Read:
  8920                           	opt stack 0
  8921                           tblptru	equ	0xFF8
  8922                           tblptrh	equ	0xFF7
  8923                           tblptrl	equ	0xFF6
  8924                           tablat	equ	0xFF5
  8925                           prodh	equ	0xFF4
  8926                           prodl	equ	0xFF3
  8927                           intcon	equ	0xFF2
  8928                           intcon2	equ	0xFF1
  8929                           postinc0	equ	0xFEE
  8930                           wreg	equ	0xFE8
  8931                           postdec1	equ	0xFE5
  8932                           fsr1l	equ	0xFE1
  8933                           indf2	equ	0xFDF
  8934                           postinc2	equ	0xFDE
  8935                           postdec2	equ	0xFDD
  8936                           fsr2h	equ	0xFDA
  8937                           fsr2l	equ	0xFD9
  8938                           status	equ	0xFD8
  8939                           
  8940 ;; *************** function _i2cNack *****************
  8941 ;; Defined at:
  8942 ;;		line 58 in file "I2C.c"
  8943 ;; Parameters:    Size  Location     Type
  8944 ;;		None
  8945 ;; Auto vars:     Size  Location     Type
  8946 ;;		None
  8947 ;; Return value:  Size  Location     Type
  8948 ;;		None               void
  8949 ;; Registers used:
  8950 ;;		wreg, cstack
  8951 ;; Tracked objects:
  8952 ;;		On entry : 0/0
  8953 ;;		On exit  : 0/0
  8954 ;;		Unchanged: 0/0
  8955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8956 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8957 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8958 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8959 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8960 ;;Total ram usage:        0 bytes
  8961 ;; Hardware stack levels used:    1
  8962 ;; Hardware stack levels required when called:    4
  8963 ;; This function calls:
  8964 ;;		_i2cHighScl
  8965 ;;		_i2cLowScl
  8966 ;; This function is called by:
  8967 ;;		_I2C_Read
  8968 ;; This function uses a non-reentrant model
  8969 ;;
  8970                           
  8971                           	psect	text50
  8972  001D04                     __ptext50:
  8973                           	opt stack 0
  8974  001D04                     _i2cNack:
  8975                           	opt stack 24
  8976                           
  8977                           ;I2C.c: 60: i2cHighScl();
  8978                           
  8979                           ;incstack = 0
  8980  001D04  EC71  F00E         	call	_i2cHighScl	;wreg free
  8981                           
  8982                           ;I2C.c: 61: i2cLowScl();
  8983  001D08  EC94  F00E         	call	_i2cLowScl	;wreg free
  8984  001D0C  0012               	return		;funcret
  8985  001D0E                     __end_of_i2cNack:
  8986                           	opt stack 0
  8987                           tblptru	equ	0xFF8
  8988                           tblptrh	equ	0xFF7
  8989                           tblptrl	equ	0xFF6
  8990                           tablat	equ	0xFF5
  8991                           prodh	equ	0xFF4
  8992                           prodl	equ	0xFF3
  8993                           intcon	equ	0xFF2
  8994                           intcon2	equ	0xFF1
  8995                           postinc0	equ	0xFEE
  8996                           wreg	equ	0xFE8
  8997                           postdec1	equ	0xFE5
  8998                           fsr1l	equ	0xFE1
  8999                           indf2	equ	0xFDF
  9000                           postinc2	equ	0xFDE
  9001                           postdec2	equ	0xFDD
  9002                           fsr2h	equ	0xFDA
  9003                           fsr2l	equ	0xFD9
  9004                           status	equ	0xFD8
  9005                           
  9006 ;; *************** function _i2cAck *****************
  9007 ;; Defined at:
  9008 ;;		line 64 in file "I2C.c"
  9009 ;; Parameters:    Size  Location     Type
  9010 ;;		None
  9011 ;; Auto vars:     Size  Location     Type
  9012 ;;		None
  9013 ;; Return value:  Size  Location     Type
  9014 ;;		None               void
  9015 ;; Registers used:
  9016 ;;		wreg, cstack
  9017 ;; Tracked objects:
  9018 ;;		On entry : 0/0
  9019 ;;		On exit  : 0/0
  9020 ;;		Unchanged: 0/0
  9021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9022 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9023 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9024 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9025 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9026 ;;Total ram usage:        0 bytes
  9027 ;; Hardware stack levels used:    1
  9028 ;; Hardware stack levels required when called:    4
  9029 ;; This function calls:
  9030 ;;		_i2cHighScl
  9031 ;;		_i2cHighSda
  9032 ;;		_i2cLowScl
  9033 ;;		_i2cLowSda
  9034 ;; This function is called by:
  9035 ;;		_I2C_Read
  9036 ;; This function uses a non-reentrant model
  9037 ;;
  9038                           
  9039                           	psect	text51
  9040  001C90                     __ptext51:
  9041                           	opt stack 0
  9042  001C90                     _i2cAck:
  9043                           	opt stack 24
  9044                           
  9045                           ;I2C.c: 66: i2cLowSda();
  9046                           
  9047                           ;incstack = 0
  9048  001C90  EC87  F00E         	call	_i2cLowSda	;wreg free
  9049                           
  9050                           ;I2C.c: 67: i2cHighScl();
  9051  001C94  EC71  F00E         	call	_i2cHighScl	;wreg free
  9052                           
  9053                           ;I2C.c: 68: i2cLowScl();
  9054  001C98  EC94  F00E         	call	_i2cLowScl	;wreg free
  9055                           
  9056                           ;I2C.c: 69: i2cHighSda();
  9057  001C9C  EC98  F00E         	call	_i2cHighSda	;wreg free
  9058  001CA0  0012               	return		;funcret
  9059  001CA2                     __end_of_i2cAck:
  9060                           	opt stack 0
  9061                           tblptru	equ	0xFF8
  9062                           tblptrh	equ	0xFF7
  9063                           tblptrl	equ	0xFF6
  9064                           tablat	equ	0xFF5
  9065                           prodh	equ	0xFF4
  9066                           prodl	equ	0xFF3
  9067                           intcon	equ	0xFF2
  9068                           intcon2	equ	0xFF1
  9069                           postinc0	equ	0xFEE
  9070                           wreg	equ	0xFE8
  9071                           postdec1	equ	0xFE5
  9072                           fsr1l	equ	0xFE1
  9073                           indf2	equ	0xFDF
  9074                           postinc2	equ	0xFDE
  9075                           postdec2	equ	0xFDD
  9076                           fsr2h	equ	0xFDA
  9077                           fsr2l	equ	0xFD9
  9078                           status	equ	0xFD8
  9079                           
  9080 ;; *************** function _I2C_ReStart *****************
  9081 ;; Defined at:
  9082 ;;		line 80 in file "I2C.c"
  9083 ;; Parameters:    Size  Location     Type
  9084 ;;		None
  9085 ;; Auto vars:     Size  Location     Type
  9086 ;;		None
  9087 ;; Return value:  Size  Location     Type
  9088 ;;		None               void
  9089 ;; Registers used:
  9090 ;;		wreg, cstack
  9091 ;; Tracked objects:
  9092 ;;		On entry : 0/0
  9093 ;;		On exit  : 0/0
  9094 ;;		Unchanged: 0/0
  9095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9096 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9097 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9098 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9099 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9100 ;;Total ram usage:        0 bytes
  9101 ;; Hardware stack levels used:    1
  9102 ;; Hardware stack levels required when called:    4
  9103 ;; This function calls:
  9104 ;;		_i2cHighScl
  9105 ;;		_i2cHighSda
  9106 ;;		_i2cLowScl
  9107 ;;		_i2cLowSda
  9108 ;; This function is called by:
  9109 ;;		_DS1621_Read_Temp
  9110 ;;		_DS3231_Read_Time
  9111 ;;		_I2C_Write_Address_Read_One_Byte
  9112 ;;		_I2C_Write_Cmd_Read_One_Byte
  9113 ;; This function uses a non-reentrant model
  9114 ;;
  9115                           
  9116                           	psect	text52
  9117  001C1C                     __ptext52:
  9118                           	opt stack 0
  9119  001C1C                     _I2C_ReStart:
  9120                           	opt stack 25
  9121                           
  9122                           ;I2C.c: 82: i2cLowScl();
  9123                           
  9124                           ;incstack = 0
  9125  001C1C  EC94  F00E         	call	_i2cLowScl	;wreg free
  9126                           
  9127                           ;I2C.c: 83: i2cHighSda();
  9128  001C20  EC98  F00E         	call	_i2cHighSda	;wreg free
  9129                           
  9130                           ;I2C.c: 84: i2cHighScl();
  9131  001C24  EC71  F00E         	call	_i2cHighScl	;wreg free
  9132                           
  9133                           ;I2C.c: 85: i2cLowSda();
  9134  001C28  EC87  F00E         	call	_i2cLowSda	;wreg free
  9135                           
  9136                           ;I2C.c: 86: i2cLowScl();
  9137  001C2C  EC94  F00E         	call	_i2cLowScl	;wreg free
  9138  001C30  0012               	return		;funcret
  9139  001C32                     __end_of_I2C_ReStart:
  9140                           	opt stack 0
  9141                           tblptru	equ	0xFF8
  9142                           tblptrh	equ	0xFF7
  9143                           tblptrl	equ	0xFF6
  9144                           tablat	equ	0xFF5
  9145                           prodh	equ	0xFF4
  9146                           prodl	equ	0xFF3
  9147                           intcon	equ	0xFF2
  9148                           intcon2	equ	0xFF1
  9149                           postinc0	equ	0xFEE
  9150                           wreg	equ	0xFE8
  9151                           postdec1	equ	0xFE5
  9152                           fsr1l	equ	0xFE1
  9153                           indf2	equ	0xFDF
  9154                           postinc2	equ	0xFDE
  9155                           postdec2	equ	0xFDD
  9156                           fsr2h	equ	0xFDA
  9157                           fsr2l	equ	0xFD9
  9158                           status	equ	0xFD8
  9159                           
  9160 ;; *************** function _i2cLowSda *****************
  9161 ;; Defined at:
  9162 ;;		line 103 in file "I2C.c"
  9163 ;; Parameters:    Size  Location     Type
  9164 ;;		None
  9165 ;; Auto vars:     Size  Location     Type
  9166 ;;		None
  9167 ;; Return value:  Size  Location     Type
  9168 ;;		None               void
  9169 ;; Registers used:
  9170 ;;		None
  9171 ;; Tracked objects:
  9172 ;;		On entry : 0/0
  9173 ;;		On exit  : 0/0
  9174 ;;		Unchanged: 0/0
  9175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9176 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9177 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9178 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9179 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9180 ;;Total ram usage:        0 bytes
  9181 ;; Hardware stack levels used:    1
  9182 ;; Hardware stack levels required when called:    3
  9183 ;; This function calls:
  9184 ;;		Nothing
  9185 ;; This function is called by:
  9186 ;;		_I2C_Write
  9187 ;;		_i2cAck
  9188 ;;		_I2C_Start
  9189 ;;		_I2C_ReStart
  9190 ;;		_I2C_Stop
  9191 ;; This function uses a non-reentrant model
  9192 ;;
  9193                           
  9194                           	psect	text53
  9195  001D0E                     __ptext53:
  9196                           	opt stack 0
  9197  001D0E                     _i2cLowSda:
  9198                           	opt stack 23
  9199                           
  9200                           ;I2C.c: 105: PORTDbits.RD3 = 0;
  9201                           
  9202                           ;incstack = 0
  9203  001D0E  9683               	bcf	3971,3,c	;volatile
  9204                           
  9205                           ;I2C.c: 106: TRISDbits.RD3 = 0;
  9206  001D10  9695               	bcf	3989,3,c	;volatile
  9207                           
  9208                           ;I2C.c: 107: _delay((unsigned long)((2)*(8000000/4000000.0)));
  9209  001D12  D000               	nop2		;2 cycle nop
  9210  001D14  D000               	nop2		;2 cycle nop
  9211  001D16  0012               	return		;funcret
  9212  001D18                     __end_of_i2cLowSda:
  9213                           	opt stack 0
  9214                           tblptru	equ	0xFF8
  9215                           tblptrh	equ	0xFF7
  9216                           tblptrl	equ	0xFF6
  9217                           tablat	equ	0xFF5
  9218                           prodh	equ	0xFF4
  9219                           prodl	equ	0xFF3
  9220                           intcon	equ	0xFF2
  9221                           intcon2	equ	0xFF1
  9222                           postinc0	equ	0xFEE
  9223                           wreg	equ	0xFE8
  9224                           postdec1	equ	0xFE5
  9225                           fsr1l	equ	0xFE1
  9226                           indf2	equ	0xFDF
  9227                           postinc2	equ	0xFDE
  9228                           postdec2	equ	0xFDD
  9229                           fsr2h	equ	0xFDA
  9230                           fsr2l	equ	0xFD9
  9231                           status	equ	0xFD8
  9232                           
  9233 ;; *************** function _i2cLowScl *****************
  9234 ;; Defined at:
  9235 ;;		line 116 in file "I2C.c"
  9236 ;; Parameters:    Size  Location     Type
  9237 ;;		None
  9238 ;; Auto vars:     Size  Location     Type
  9239 ;;		None
  9240 ;; Return value:  Size  Location     Type
  9241 ;;		None               void
  9242 ;; Registers used:
  9243 ;;		None
  9244 ;; Tracked objects:
  9245 ;;		On entry : 0/0
  9246 ;;		On exit  : 0/0
  9247 ;;		Unchanged: 0/0
  9248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9249 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9250 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9251 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9252 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9253 ;;Total ram usage:        0 bytes
  9254 ;; Hardware stack levels used:    1
  9255 ;; Hardware stack levels required when called:    3
  9256 ;; This function calls:
  9257 ;;		Nothing
  9258 ;; This function is called by:
  9259 ;;		_I2C_Read
  9260 ;;		_I2C_Write
  9261 ;;		_i2cNack
  9262 ;;		_i2cAck
  9263 ;;		_I2C_Start
  9264 ;;		_I2C_ReStart
  9265 ;;		_I2C_Stop
  9266 ;; This function uses a non-reentrant model
  9267 ;;
  9268                           
  9269                           	psect	text54
  9270  001D28                     __ptext54:
  9271                           	opt stack 0
  9272  001D28                     _i2cLowScl:
  9273                           	opt stack 23
  9274                           
  9275                           ;I2C.c: 118: PORTDbits.RD2 = 0;
  9276                           
  9277                           ;incstack = 0
  9278  001D28  9483               	bcf	3971,2,c	;volatile
  9279                           
  9280                           ;I2C.c: 119: TRISDbits.RD2 = 0;
  9281  001D2A  9495               	bcf	3989,2,c	;volatile
  9282                           
  9283                           ;I2C.c: 120: _delay((unsigned long)((1)*(8000000/4000000.0)));
  9284  001D2C  D000               	nop2		;2 cycle nop
  9285  001D2E  0012               	return		;funcret
  9286  001D30                     __end_of_i2cLowScl:
  9287                           	opt stack 0
  9288                           tblptru	equ	0xFF8
  9289                           tblptrh	equ	0xFF7
  9290                           tblptrl	equ	0xFF6
  9291                           tablat	equ	0xFF5
  9292                           prodh	equ	0xFF4
  9293                           prodl	equ	0xFF3
  9294                           intcon	equ	0xFF2
  9295                           intcon2	equ	0xFF1
  9296                           postinc0	equ	0xFEE
  9297                           wreg	equ	0xFE8
  9298                           postdec1	equ	0xFE5
  9299                           fsr1l	equ	0xFE1
  9300                           indf2	equ	0xFDF
  9301                           postinc2	equ	0xFDE
  9302                           postdec2	equ	0xFDD
  9303                           fsr2h	equ	0xFDA
  9304                           fsr2l	equ	0xFD9
  9305                           status	equ	0xFD8
  9306                           
  9307 ;; *************** function _i2cHighSda *****************
  9308 ;; Defined at:
  9309 ;;		line 97 in file "I2C.c"
  9310 ;; Parameters:    Size  Location     Type
  9311 ;;		None
  9312 ;; Auto vars:     Size  Location     Type
  9313 ;;		None
  9314 ;; Return value:  Size  Location     Type
  9315 ;;		None               void
  9316 ;; Registers used:
  9317 ;;		None
  9318 ;; Tracked objects:
  9319 ;;		On entry : 0/0
  9320 ;;		On exit  : 0/0
  9321 ;;		Unchanged: 0/0
  9322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9323 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9324 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9325 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9326 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9327 ;;Total ram usage:        0 bytes
  9328 ;; Hardware stack levels used:    1
  9329 ;; Hardware stack levels required when called:    3
  9330 ;; This function calls:
  9331 ;;		Nothing
  9332 ;; This function is called by:
  9333 ;;		_I2C_Init
  9334 ;;		_I2C_Read
  9335 ;;		_I2C_Write
  9336 ;;		_i2cAck
  9337 ;;		_I2C_Start
  9338 ;;		_I2C_ReStart
  9339 ;;		_I2C_Stop
  9340 ;; This function uses a non-reentrant model
  9341 ;;
  9342                           
  9343                           	psect	text55
  9344  001D30                     __ptext55:
  9345                           	opt stack 0
  9346  001D30                     _i2cHighSda:
  9347                           	opt stack 25
  9348                           
  9349                           ;I2C.c: 99: TRISDbits.RD3 = 1;
  9350                           
  9351                           ;incstack = 0
  9352  001D30  8695               	bsf	3989,3,c	;volatile
  9353                           
  9354                           ;I2C.c: 100: _delay((unsigned long)((2)*(8000000/4000000.0)));
  9355  001D32  D000               	nop2		;2 cycle nop
  9356  001D34  D000               	nop2		;2 cycle nop
  9357  001D36  0012               	return		;funcret
  9358  001D38                     __end_of_i2cHighSda:
  9359                           	opt stack 0
  9360                           tblptru	equ	0xFF8
  9361                           tblptrh	equ	0xFF7
  9362                           tblptrl	equ	0xFF6
  9363                           tablat	equ	0xFF5
  9364                           prodh	equ	0xFF4
  9365                           prodl	equ	0xFF3
  9366                           intcon	equ	0xFF2
  9367                           intcon2	equ	0xFF1
  9368                           postinc0	equ	0xFEE
  9369                           wreg	equ	0xFE8
  9370                           postdec1	equ	0xFE5
  9371                           fsr1l	equ	0xFE1
  9372                           indf2	equ	0xFDF
  9373                           postinc2	equ	0xFDE
  9374                           postdec2	equ	0xFDD
  9375                           fsr2h	equ	0xFDA
  9376                           fsr2l	equ	0xFD9
  9377                           status	equ	0xFD8
  9378                           
  9379 ;; *************** function _i2cHighScl *****************
  9380 ;; Defined at:
  9381 ;;		line 110 in file "I2C.c"
  9382 ;; Parameters:    Size  Location     Type
  9383 ;;		None
  9384 ;; Auto vars:     Size  Location     Type
  9385 ;;		None
  9386 ;; Return value:  Size  Location     Type
  9387 ;;		None               void
  9388 ;; Registers used:
  9389 ;;		wreg
  9390 ;; Tracked objects:
  9391 ;;		On entry : 0/0
  9392 ;;		On exit  : 0/0
  9393 ;;		Unchanged: 0/0
  9394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9395 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9396 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9397 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9398 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9399 ;;Total ram usage:        0 bytes
  9400 ;; Hardware stack levels used:    1
  9401 ;; Hardware stack levels required when called:    3
  9402 ;; This function calls:
  9403 ;;		Nothing
  9404 ;; This function is called by:
  9405 ;;		_I2C_Init
  9406 ;;		_I2C_Read
  9407 ;;		_I2C_Write
  9408 ;;		_i2cNack
  9409 ;;		_i2cAck
  9410 ;;		_I2C_Start
  9411 ;;		_I2C_ReStart
  9412 ;;		_I2C_Stop
  9413 ;; This function uses a non-reentrant model
  9414 ;;
  9415                           
  9416                           	psect	text56
  9417  001CE2                     __ptext56:
  9418                           	opt stack 0
  9419  001CE2                     _i2cHighScl:
  9420                           	opt stack 25
  9421                           
  9422                           ;I2C.c: 112: TRISDbits.RD2 = 1;
  9423                           
  9424                           ;incstack = 0
  9425  001CE2  8495               	bsf	3989,2,c	;volatile
  9426                           
  9427                           ;I2C.c: 113: _delay((unsigned long)((10)*(8000000/4000000.0)));
  9428  001CE4  0E06               	movlw	6
  9429  001CE6                     u4737:
  9430  001CE6  2EE8               	decfsz	wreg,f,c
  9431  001CE8  D7FE               	goto	u4737
  9432  001CEA  D000               	nop2		;nop
  9433  001CEC  0012               	return		;funcret
  9434  001CEE                     __end_of_i2cHighScl:
  9435                           	opt stack 0
  9436                           tblptru	equ	0xFF8
  9437                           tblptrh	equ	0xFF7
  9438                           tblptrl	equ	0xFF6
  9439                           tablat	equ	0xFF5
  9440                           prodh	equ	0xFF4
  9441                           prodl	equ	0xFF3
  9442                           intcon	equ	0xFF2
  9443                           intcon2	equ	0xFF1
  9444                           postinc0	equ	0xFEE
  9445                           wreg	equ	0xFE8
  9446                           postdec1	equ	0xFE5
  9447                           fsr1l	equ	0xFE1
  9448                           indf2	equ	0xFDF
  9449                           postinc2	equ	0xFDE
  9450                           postdec2	equ	0xFDD
  9451                           fsr2h	equ	0xFDA
  9452                           fsr2l	equ	0xFD9
  9453                           status	equ	0xFD8
  9454                           
  9455 ;; *************** function _DO_DISPLAY_D1 *****************
  9456 ;; Defined at:
  9457 ;;		line 225 in file "Lab10p1.c"
  9458 ;; Parameters:    Size  Location     Type
  9459 ;;  T               2   16[COMRAM] int 
  9460 ;; Auto vars:     Size  Location     Type
  9461 ;;		None
  9462 ;; Return value:  Size  Location     Type
  9463 ;;		None               void
  9464 ;; Registers used:
  9465 ;;		wreg, status,2, status,0
  9466 ;; Tracked objects:
  9467 ;;		On entry : 0/0
  9468 ;;		On exit  : 0/0
  9469 ;;		Unchanged: 0/0
  9470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9471 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9472 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9473 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9474 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9475 ;;Total ram usage:        2 bytes
  9476 ;; Hardware stack levels used:    1
  9477 ;; Hardware stack levels required when called:    3
  9478 ;; This function calls:
  9479 ;;		Nothing
  9480 ;; This function is called by:
  9481 ;;		_main
  9482 ;; This function uses a non-reentrant model
  9483 ;;
  9484                           
  9485                           	psect	text57
  9486  000F8A                     __ptext57:
  9487                           	opt stack 0
  9488  000F8A                     _DO_DISPLAY_D1:
  9489                           	opt stack 27
  9490                           
  9491                           ;Lab10p1.c: 227: if (T < 10){
  9492                           
  9493                           ;incstack = 0
  9494  000F8A  BE12               	btfsc	DO_DISPLAY_D1@T+1,7,c
  9495  000F8C  D006               	goto	l5271
  9496  000F8E  5012               	movf	DO_DISPLAY_D1@T+1,w,c
  9497  000F90  E106               	bnz	l5273
  9498  000F92  0E0A               	movlw	10
  9499  000F94  5C11               	subwf	DO_DISPLAY_D1@T,w,c
  9500  000F96  B0D8               	btfsc	status,0,c
  9501  000F98  D002               	goto	l5273
  9502  000F9A                     l5271:
  9503                           
  9504                           ;Lab10p1.c: 228: PORTD = 0x00;
  9505  000F9A  0E00               	movlw	0
  9506  000F9C  D075               	goto	L12
  9507  000F9E                     l5273:
  9508                           
  9509                           ;Lab10p1.c: 230: else if(T >= 10 && T <= 19){
  9510  000F9E  BE12               	btfsc	DO_DISPLAY_D1@T+1,7,c
  9511  000FA0  D010               	goto	l5279
  9512  000FA2  5012               	movf	DO_DISPLAY_D1@T+1,w,c
  9513  000FA4  E104               	bnz	u4170
  9514  000FA6  0E0A               	movlw	10
  9515  000FA8  5C11               	subwf	DO_DISPLAY_D1@T,w,c
  9516  000FAA  A0D8               	btfss	status,0,c
  9517  000FAC  D00A               	goto	l5279
  9518  000FAE                     u4170:
  9519  000FAE  BE12               	btfsc	DO_DISPLAY_D1@T+1,7,c
  9520  000FB0  D006               	goto	l5277
  9521  000FB2  5012               	movf	DO_DISPLAY_D1@T+1,w,c
  9522  000FB4  E106               	bnz	l5279
  9523  000FB6  0E14               	movlw	20
  9524  000FB8  5C11               	subwf	DO_DISPLAY_D1@T,w,c
  9525  000FBA  B0D8               	btfsc	status,0,c
  9526  000FBC  D002               	goto	l5279
  9527  000FBE                     l5277:
  9528                           
  9529                           ;Lab10p1.c: 231: PORTD = 0x10;
  9530  000FBE  0E10               	movlw	16
  9531  000FC0  D063               	goto	L12
  9532  000FC2                     l5279:
  9533                           
  9534                           ;Lab10p1.c: 233: else if(T >= 20 && T <= 29){
  9535  000FC2  BE12               	btfsc	DO_DISPLAY_D1@T+1,7,c
  9536  000FC4  D010               	goto	l5285
  9537  000FC6  5012               	movf	DO_DISPLAY_D1@T+1,w,c
  9538  000FC8  E104               	bnz	u4190
  9539  000FCA  0E14               	movlw	20
  9540  000FCC  5C11               	subwf	DO_DISPLAY_D1@T,w,c
  9541  000FCE  A0D8               	btfss	status,0,c
  9542  000FD0  D00A               	goto	l5285
  9543  000FD2                     u4190:
  9544  000FD2  BE12               	btfsc	DO_DISPLAY_D1@T+1,7,c
  9545  000FD4  D006               	goto	l5283
  9546  000FD6  5012               	movf	DO_DISPLAY_D1@T+1,w,c
  9547  000FD8  E106               	bnz	l5285
  9548  000FDA  0E1E               	movlw	30
  9549  000FDC  5C11               	subwf	DO_DISPLAY_D1@T,w,c
  9550  000FDE  B0D8               	btfsc	status,0,c
  9551  000FE0  D002               	goto	l5285
  9552  000FE2                     l5283:
  9553                           
  9554                           ;Lab10p1.c: 234: PORTD = 0x20;
  9555  000FE2  0E20               	movlw	32
  9556  000FE4  D051               	goto	L12
  9557  000FE6                     l5285:
  9558                           
  9559                           ;Lab10p1.c: 236: else if(T >= 30 && T <= 39){
  9560  000FE6  BE12               	btfsc	DO_DISPLAY_D1@T+1,7,c
  9561  000FE8  D010               	goto	l5291
  9562  000FEA  5012               	movf	DO_DISPLAY_D1@T+1,w,c
  9563  000FEC  E104               	bnz	u4210
  9564  000FEE  0E1E               	movlw	30
  9565  000FF0  5C11               	subwf	DO_DISPLAY_D1@T,w,c
  9566  000FF2  A0D8               	btfss	status,0,c
  9567  000FF4  D00A               	goto	l5291
  9568  000FF6                     u4210:
  9569  000FF6  BE12               	btfsc	DO_DISPLAY_D1@T+1,7,c
  9570  000FF8  D006               	goto	l5289
  9571  000FFA  5012               	movf	DO_DISPLAY_D1@T+1,w,c
  9572  000FFC  E106               	bnz	l5291
  9573  000FFE  0E28               	movlw	40
  9574  001000  5C11               	subwf	DO_DISPLAY_D1@T,w,c
  9575  001002  B0D8               	btfsc	status,0,c
  9576  001004  D002               	goto	l5291
  9577  001006                     l5289:
  9578                           
  9579                           ;Lab10p1.c: 237: PORTD = 0x30;
  9580  001006  0E30               	movlw	48
  9581  001008  D03F               	goto	L12
  9582  00100A                     l5291:
  9583                           
  9584                           ;Lab10p1.c: 239: else if(T >= 40 && T <= 49){
  9585  00100A  BE12               	btfsc	DO_DISPLAY_D1@T+1,7,c
  9586  00100C  D010               	goto	l5297
  9587  00100E  5012               	movf	DO_DISPLAY_D1@T+1,w,c
  9588  001010  E104               	bnz	u4230
  9589  001012  0E28               	movlw	40
  9590  001014  5C11               	subwf	DO_DISPLAY_D1@T,w,c
  9591  001016  A0D8               	btfss	status,0,c
  9592  001018  D00A               	goto	l5297
  9593  00101A                     u4230:
  9594  00101A  BE12               	btfsc	DO_DISPLAY_D1@T+1,7,c
  9595  00101C  D006               	goto	l5295
  9596  00101E  5012               	movf	DO_DISPLAY_D1@T+1,w,c
  9597  001020  E106               	bnz	l5297
  9598  001022  0E32               	movlw	50
  9599  001024  5C11               	subwf	DO_DISPLAY_D1@T,w,c
  9600  001026  B0D8               	btfsc	status,0,c
  9601  001028  D002               	goto	l5297
  9602  00102A                     l5295:
  9603                           
  9604                           ;Lab10p1.c: 240: PORTD = 0x40;
  9605  00102A  0E40               	movlw	64
  9606  00102C  D02D               	goto	L12
  9607  00102E                     l5297:
  9608                           
  9609                           ;Lab10p1.c: 242: else if(T >= 50 && T <= 59){
  9610  00102E  BE12               	btfsc	DO_DISPLAY_D1@T+1,7,c
  9611  001030  D010               	goto	l5303
  9612  001032  5012               	movf	DO_DISPLAY_D1@T+1,w,c
  9613  001034  E104               	bnz	u4250
  9614  001036  0E32               	movlw	50
  9615  001038  5C11               	subwf	DO_DISPLAY_D1@T,w,c
  9616  00103A  A0D8               	btfss	status,0,c
  9617  00103C  D00A               	goto	l5303
  9618  00103E                     u4250:
  9619  00103E  BE12               	btfsc	DO_DISPLAY_D1@T+1,7,c
  9620  001040  D006               	goto	l5301
  9621  001042  5012               	movf	DO_DISPLAY_D1@T+1,w,c
  9622  001044  E106               	bnz	l5303
  9623  001046  0E3C               	movlw	60
  9624  001048  5C11               	subwf	DO_DISPLAY_D1@T,w,c
  9625  00104A  B0D8               	btfsc	status,0,c
  9626  00104C  D002               	goto	l5303
  9627  00104E                     l5301:
  9628                           
  9629                           ;Lab10p1.c: 243: PORTD = 0x50;
  9630  00104E  0E50               	movlw	80
  9631  001050  D01B               	goto	L12
  9632  001052                     l5303:
  9633                           
  9634                           ;Lab10p1.c: 245: else if(T >= 60 && T <= 69){
  9635  001052  BE12               	btfsc	DO_DISPLAY_D1@T+1,7,c
  9636  001054  D010               	goto	l5309
  9637  001056  5012               	movf	DO_DISPLAY_D1@T+1,w,c
  9638  001058  E104               	bnz	u4270
  9639  00105A  0E3C               	movlw	60
  9640  00105C  5C11               	subwf	DO_DISPLAY_D1@T,w,c
  9641  00105E  A0D8               	btfss	status,0,c
  9642  001060  D00A               	goto	l5309
  9643  001062                     u4270:
  9644  001062  BE12               	btfsc	DO_DISPLAY_D1@T+1,7,c
  9645  001064  D006               	goto	l5307
  9646  001066  5012               	movf	DO_DISPLAY_D1@T+1,w,c
  9647  001068  E106               	bnz	l5309
  9648  00106A  0E46               	movlw	70
  9649  00106C  5C11               	subwf	DO_DISPLAY_D1@T,w,c
  9650  00106E  B0D8               	btfsc	status,0,c
  9651  001070  D002               	goto	l5309
  9652  001072                     l5307:
  9653                           
  9654                           ;Lab10p1.c: 246: PORTD = 0x60;
  9655  001072  0E60               	movlw	96
  9656  001074  D009               	goto	L12
  9657  001076                     l5309:
  9658                           
  9659                           ;Lab10p1.c: 248: else if(T >= 70){
  9660  001076  BE12               	btfsc	DO_DISPLAY_D1@T+1,7,c
  9661  001078  D009               	goto	l199
  9662  00107A  5012               	movf	DO_DISPLAY_D1@T+1,w,c
  9663  00107C  E104               	bnz	u4290
  9664  00107E  0E46               	movlw	70
  9665  001080  5C11               	subwf	DO_DISPLAY_D1@T,w,c
  9666  001082  A0D8               	btfss	status,0,c
  9667  001084  D003               	goto	l199
  9668  001086                     u4290:
  9669                           
  9670                           ;Lab10p1.c: 249: PORTD = 0x70;
  9671  001086  0E70               	movlw	112
  9672  001088                     L12:
  9673  001088  6E83               	movwf	3971,c	;volatile
  9674  00108A  D000               	goto	l199
  9675  00108C                     l199:
  9676  00108C  0012               	return		;funcret
  9677  00108E                     __end_of_DO_DISPLAY_D1:
  9678                           	opt stack 0
  9679                           tblptru	equ	0xFF8
  9680                           tblptrh	equ	0xFF7
  9681                           tblptrl	equ	0xFF6
  9682                           tablat	equ	0xFF5
  9683                           prodh	equ	0xFF4
  9684                           prodl	equ	0xFF3
  9685                           intcon	equ	0xFF2
  9686                           intcon2	equ	0xFF1
  9687                           postinc0	equ	0xFEE
  9688                           wreg	equ	0xFE8
  9689                           postdec1	equ	0xFE5
  9690                           fsr1l	equ	0xFE1
  9691                           indf2	equ	0xFDF
  9692                           postinc2	equ	0xFDE
  9693                           postdec2	equ	0xFDD
  9694                           fsr2h	equ	0xFDA
  9695                           fsr2l	equ	0xFD9
  9696                           status	equ	0xFD8
  9697                           
  9698 ;; *************** function _Activate_Buzzer *****************
  9699 ;; Defined at:
  9700 ;;		line 196 in file "Lab10p1.c"
  9701 ;; Parameters:    Size  Location     Type
  9702 ;;		None
  9703 ;; Auto vars:     Size  Location     Type
  9704 ;;		None
  9705 ;; Return value:  Size  Location     Type
  9706 ;;		None               void
  9707 ;; Registers used:
  9708 ;;		wreg, status,2
  9709 ;; Tracked objects:
  9710 ;;		On entry : 0/0
  9711 ;;		On exit  : 0/0
  9712 ;;		Unchanged: 0/0
  9713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9714 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9715 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9716 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9717 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9718 ;;Total ram usage:        0 bytes
  9719 ;; Hardware stack levels used:    1
  9720 ;; Hardware stack levels required when called:    3
  9721 ;; This function calls:
  9722 ;;		Nothing
  9723 ;; This function is called by:
  9724 ;;		_main
  9725 ;; This function uses a non-reentrant model
  9726 ;;
  9727                           
  9728                           	psect	text58
  9729  001CA2                     __ptext58:
  9730                           	opt stack 0
  9731  001CA2                     _Activate_Buzzer:
  9732                           	opt stack 27
  9733                           
  9734                           ;Lab10p1.c: 198: PR2 = 0b11111001;
  9735                           
  9736                           ;incstack = 0
  9737  001CA2  0EF9               	movlw	249
  9738  001CA4  6ECB               	movwf	4043,c	;volatile
  9739                           
  9740                           ;Lab10p1.c: 199: T2CON = 0b00000101;
  9741  001CA6  0E05               	movlw	5
  9742  001CA8  6ECA               	movwf	4042,c	;volatile
  9743                           
  9744                           ;Lab10p1.c: 200: CCPR2L = 0b01001010;
  9745  001CAA  0E4A               	movlw	74
  9746  001CAC  6EBB               	movwf	4027,c	;volatile
  9747                           
  9748                           ;Lab10p1.c: 201: CCP2CON = 0b00111100;
  9749  001CAE  0E3C               	movlw	60
  9750  001CB0  6EBA               	movwf	4026,c	;volatile
  9751  001CB2  0012               	return		;funcret
  9752  001CB4                     __end_of_Activate_Buzzer:
  9753                           	opt stack 0
  9754                           tblptru	equ	0xFF8
  9755                           tblptrh	equ	0xFF7
  9756                           tblptrl	equ	0xFF6
  9757                           tablat	equ	0xFF5
  9758                           prodh	equ	0xFF4
  9759                           prodl	equ	0xFF3
  9760                           intcon	equ	0xFF2
  9761                           intcon2	equ	0xFF1
  9762                           postinc0	equ	0xFEE
  9763                           wreg	equ	0xFE8
  9764                           postdec1	equ	0xFE5
  9765                           fsr1l	equ	0xFE1
  9766                           indf2	equ	0xFDF
  9767                           postinc2	equ	0xFDE
  9768                           postdec2	equ	0xFDD
  9769                           fsr2h	equ	0xFDA
  9770                           fsr2l	equ	0xFD9
  9771                           status	equ	0xFD8
  9772                           
  9773 ;; *************** function _chkisr *****************
  9774 ;; Defined at:
  9775 ;;		line 28 in file "Interrupt.c"
  9776 ;; Parameters:    Size  Location     Type
  9777 ;;		None
  9778 ;; Auto vars:     Size  Location     Type
  9779 ;;		None
  9780 ;; Return value:  Size  Location     Type
  9781 ;;		None               void
  9782 ;; Registers used:
  9783 ;;		wreg, status,2, status,0, cstack
  9784 ;; Tracked objects:
  9785 ;;		On entry : 0/0
  9786 ;;		On exit  : 0/0
  9787 ;;		Unchanged: 0/0
  9788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9789 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9790 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9791 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9792 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9793 ;;Total ram usage:       14 bytes
  9794 ;; Hardware stack levels used:    1
  9795 ;; Hardware stack levels required when called:    2
  9796 ;; This function calls:
  9797 ;;		_TIMER1_isr
  9798 ;;		i2_INT0_isr
  9799 ;; This function is called by:
  9800 ;;		Interrupt level 2
  9801 ;; This function uses a non-reentrant model
  9802 ;;
  9803                           
  9804                           	psect	intcode
  9805  000008                     __pintcode:
  9806                           	opt stack 0
  9807  000008                     _chkisr:
  9808                           	opt stack 20
  9809                           
  9810                           ;incstack = 0
  9811  000008  CFFA F003          	movff	pclath,??_chkisr
  9812  00000C  CFFB F004          	movff	pclatu,??_chkisr+1
  9813  000010  CFE9 F005          	movff	fsr0l,??_chkisr+2
  9814  000014  ED4A  F00A         	call	int_func,f	;refresh shadow registers
  9815                           pclatu	equ	0xFFB
  9816                           pclath	equ	0xFFA
  9817                           tblptru	equ	0xFF8
  9818                           tblptrh	equ	0xFF7
  9819                           tblptrl	equ	0xFF6
  9820                           tablat	equ	0xFF5
  9821                           prodh	equ	0xFF4
  9822                           prodl	equ	0xFF3
  9823                           intcon	equ	0xFF2
  9824                           intcon2	equ	0xFF1
  9825                           postinc0	equ	0xFEE
  9826                           fsr0l	equ	0xFE9
  9827                           wreg	equ	0xFE8
  9828                           postdec1	equ	0xFE5
  9829                           fsr1l	equ	0xFE1
  9830                           indf2	equ	0xFDF
  9831                           postinc2	equ	0xFDE
  9832                           postdec2	equ	0xFDD
  9833                           fsr2h	equ	0xFDA
  9834                           fsr2l	equ	0xFD9
  9835                           status	equ	0xFD8
  9836                           
  9837                           	psect	intcode_body
  9838  001494                     __pintcode_body:
  9839                           	opt stack 20
  9840  001494                     int_func:
  9841                           	opt stack 20
  9842  001494  0006               	pop		; remove dummy address from shadow register refresh
  9843  001496  CFEA F006          	movff	fsr0h,??_chkisr+3
  9844  00149A  CFE1 F007          	movff	fsr1l,??_chkisr+4
  9845  00149E  CFE2 F008          	movff	fsr1h,??_chkisr+5
  9846  0014A2  CFD9 F009          	movff	fsr2l,??_chkisr+6
  9847  0014A6  CFDA F00A          	movff	fsr2h,??_chkisr+7
  9848  0014AA  CFF3 F00B          	movff	prodl,??_chkisr+8
  9849  0014AE  CFF4 F00C          	movff	prodh,??_chkisr+9
  9850  0014B2  CFF6 F00D          	movff	tblptrl,??_chkisr+10
  9851  0014B6  CFF7 F00E          	movff	tblptrh,??_chkisr+11
  9852  0014BA  CFF8 F00F          	movff	tblptru,??_chkisr+12
  9853  0014BE  CFF5 F010          	movff	tablat,??_chkisr+13
  9854                           
  9855                           ;Interrupt.c: 30: if(PIR1bits.TMR1IF == 1) TIMER1_isr();
  9856  0014C2  A09E               	btfss	3998,0,c	;volatile
  9857  0014C4  D003               	goto	i2l2649
  9858  0014C6  EC77  F00E         	call	_TIMER1_isr	;wreg free
  9859  0014CA  D000               	goto	i2l2649
  9860  0014CC                     i2l2649:
  9861                           
  9862                           ;Interrupt.c: 31: if (INTCONbits.INT0IF == 1) INT0_isr();
  9863  0014CC  A2F2               	btfss	intcon,1,c	;volatile
  9864  0014CE  D003               	goto	i2l356
  9865  0014D0  ECC1  F004         	call	i2_INT0_isr	;wreg free
  9866  0014D4  D000               	goto	i2l356
  9867  0014D6                     i2l356:
  9868  0014D6  C010  FFF5         	movff	??_chkisr+13,tablat
  9869  0014DA  C00F  FFF8         	movff	??_chkisr+12,tblptru
  9870  0014DE  C00E  FFF7         	movff	??_chkisr+11,tblptrh
  9871  0014E2  C00D  FFF6         	movff	??_chkisr+10,tblptrl
  9872  0014E6  C00C  FFF4         	movff	??_chkisr+9,prodh
  9873  0014EA  C00B  FFF3         	movff	??_chkisr+8,prodl
  9874  0014EE  C00A  FFDA         	movff	??_chkisr+7,fsr2h
  9875  0014F2  C009  FFD9         	movff	??_chkisr+6,fsr2l
  9876  0014F6  C008  FFE2         	movff	??_chkisr+5,fsr1h
  9877  0014FA  C007  FFE1         	movff	??_chkisr+4,fsr1l
  9878  0014FE  C006  FFEA         	movff	??_chkisr+3,fsr0h
  9879  001502  C005  FFE9         	movff	??_chkisr+2,fsr0l
  9880  001506  C004  FFFB         	movff	??_chkisr+1,pclatu
  9881  00150A  C003  FFFA         	movff	??_chkisr,pclath
  9882  00150E  0011               	retfie		f
  9883  001510                     __end_of_chkisr:
  9884                           	opt stack 0
  9885                           pclatu	equ	0xFFB
  9886                           pclath	equ	0xFFA
  9887                           tblptru	equ	0xFF8
  9888                           tblptrh	equ	0xFF7
  9889                           tblptrl	equ	0xFF6
  9890                           tablat	equ	0xFF5
  9891                           prodh	equ	0xFF4
  9892                           prodl	equ	0xFF3
  9893                           intcon	equ	0xFF2
  9894                           intcon2	equ	0xFF1
  9895                           postinc0	equ	0xFEE
  9896                           fsr0h	equ	0xFEA
  9897                           fsr0l	equ	0xFE9
  9898                           wreg	equ	0xFE8
  9899                           postdec1	equ	0xFE5
  9900                           fsr1h	equ	0xFE2
  9901                           fsr1l	equ	0xFE1
  9902                           indf2	equ	0xFDF
  9903                           postinc2	equ	0xFDE
  9904                           postdec2	equ	0xFDD
  9905                           fsr2h	equ	0xFDA
  9906                           fsr2l	equ	0xFD9
  9907                           status	equ	0xFD8
  9908                           
  9909 ;; *************** function i2_INT0_isr *****************
  9910 ;; Defined at:
  9911 ;;		line 48 in file "Interrupt.c"
  9912 ;; Parameters:    Size  Location     Type
  9913 ;;		None
  9914 ;; Auto vars:     Size  Location     Type
  9915 ;;		None
  9916 ;; Return value:  Size  Location     Type
  9917 ;;		None               void
  9918 ;; Registers used:
  9919 ;;		wreg, status,2, status,0, cstack
  9920 ;; Tracked objects:
  9921 ;;		On entry : 0/0
  9922 ;;		On exit  : 0/0
  9923 ;;		Unchanged: 0/0
  9924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9925 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9926 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9927 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9928 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9929 ;;Total ram usage:        2 bytes
  9930 ;; Hardware stack levels used:    1
  9931 ;; Hardware stack levels required when called:    1
  9932 ;; This function calls:
  9933 ;;		i2_force_nec_state0
  9934 ;; This function is called by:
  9935 ;;		_chkisr
  9936 ;; This function uses a non-reentrant model
  9937 ;;
  9938                           
  9939                           	psect	text60
  9940  000982                     __ptext60:
  9941                           	opt stack 0
  9942  000982                     i2_INT0_isr:
  9943                           	opt stack 20
  9944                           
  9945                           ;Interrupt.c: 50: INTCONbits.INT0IF = 0;
  9946                           
  9947                           ;incstack = 0
  9948  000982  92F2               	bcf	intcon,1,c	;volatile
  9949                           
  9950                           ;Interrupt.c: 51: if (Nec_state != 0)
  9951  000984  5053               	movf	_Nec_state,w,c
  9952  000986  B4D8               	btfsc	status,2,c
  9953  000988  D09A               	goto	i2l2533
  9954                           
  9955                           ;Interrupt.c: 52: {
  9956                           ;Interrupt.c: 53: Time_Elapsed = (TMR1H << 8) | TMR1L;
  9957  00098A  50CE               	movf	4046,w,c	;volatile
  9958  00098C  CFCF F001          	movff	4047,??i2_INT0_isr	;volatile
  9959  000990  6A02               	clrf	(??i2_INT0_isr+1)& (0+255),c
  9960  000992  C001  F002         	movff	??i2_INT0_isr,??i2_INT0_isr+1
  9961  000996  6A01               	clrf	??i2_INT0_isr,c
  9962  000998  1001               	iorwf	??i2_INT0_isr,w,c
  9963  00099A  6E4A               	movwf	_Time_Elapsed,c
  9964  00099C  5002               	movf	??i2_INT0_isr+1,w,c
  9965  00099E  6E4B               	movwf	_Time_Elapsed+1,c
  9966                           
  9967                           ;Interrupt.c: 54: TMR1H = 0;
  9968  0009A0  0E00               	movlw	0
  9969  0009A2  6ECF               	movwf	4047,c	;volatile
  9970                           
  9971                           ;Interrupt.c: 55: TMR1L = 0;
  9972  0009A4  0E00               	movlw	0
  9973  0009A6  6ECE               	movwf	4046,c	;volatile
  9974                           
  9975                           ;Interrupt.c: 56: }
  9976                           ;Interrupt.c: 58: switch (Nec_state)
  9977  0009A8  D08A               	goto	i2l2533
  9978  0009AA                     i2l2467:
  9979                           
  9980                           ;Interrupt.c: 61: {
  9981                           ;Interrupt.c: 63: TMR1H = 0;
  9982  0009AA  0E00               	movlw	0
  9983  0009AC  6ECF               	movwf	4047,c	;volatile
  9984                           
  9985                           ;Interrupt.c: 64: TMR1L = 0;
  9986  0009AE  0E00               	movlw	0
  9987  0009B0  6ECE               	movwf	4046,c	;volatile
  9988                           
  9989                           ;Interrupt.c: 65: PIR1bits.TMR1IF = 0;
  9990  0009B2  909E               	bcf	3998,0,c	;volatile
  9991                           
  9992                           ;Interrupt.c: 66: T1CON = 0x90;
  9993  0009B4  0E90               	movlw	144
  9994  0009B6  6ECD               	movwf	4045,c	;volatile
  9995                           
  9996                           ;Interrupt.c: 67: T1CONbits.TMR1ON = 1;
  9997  0009B8  80CD               	bsf	4045,0,c	;volatile
  9998                           
  9999                           ;Interrupt.c: 68: bit_count = 0;
 10000  0009BA  0E00               	movlw	0
 10001  0009BC  6E5A               	movwf	_bit_count,c
 10002                           
 10003                           ;Interrupt.c: 69: Nec_code = 0;
 10004  0009BE  0E00               	movlw	0
 10005  0009C0  6E46               	movwf	_Nec_code,c
 10006  0009C2  0E00               	movlw	0
 10007  0009C4  6E47               	movwf	_Nec_code+1,c
 10008  0009C6  0E00               	movlw	0
 10009  0009C8  6E48               	movwf	_Nec_code+2,c
 10010  0009CA  0E00               	movlw	0
 10011  0009CC  6E49               	movwf	_Nec_code+3,c
 10012                           
 10013                           ;Interrupt.c: 70: Nec_state = 1;
 10014  0009CE  0E01               	movlw	1
 10015  0009D0  6E53               	movwf	_Nec_state,c
 10016  0009D2  D073               	goto	i2l2527
 10017                           
 10018                           ;Interrupt.c: 72: return;
 10019                           
 10020                           ;Interrupt.c: 71: INTCON2bits.INTEDG0 = 1;
 10021  0009D4  D085               	goto	i2l368
 10022  0009D6                     i2l2477:
 10023                           
 10024                           ;Interrupt.c: 76: {
 10025                           ;Interrupt.c: 77: if (Time_Elapsed > 8500 && Time_Elapsed < 9500)
 10026  0009D6  0E35               	movlw	53
 10027  0009D8  5C4A               	subwf	_Time_Elapsed,w,c
 10028  0009DA  0E21               	movlw	33
 10029  0009DC  584B               	subwfb	_Time_Elapsed+1,w,c
 10030  0009DE  A0D8               	btfss	status,0,c
 10031  0009E0  D009               	goto	i2l2483
 10032  0009E2  0E1C               	movlw	28
 10033  0009E4  5C4A               	subwf	_Time_Elapsed,w,c
 10034  0009E6  0E25               	movlw	37
 10035  0009E8  584B               	subwfb	_Time_Elapsed+1,w,c
 10036  0009EA  B0D8               	btfsc	status,0,c
 10037  0009EC  D003               	goto	i2l2483
 10038                           
 10039                           ;Interrupt.c: 78: {
 10040                           ;Interrupt.c: 79: Nec_state = 2;
 10041  0009EE  0E02               	movlw	2
 10042  0009F0  6E53               	movwf	_Nec_state,c
 10043                           
 10044                           ;Interrupt.c: 80: }
 10045  0009F2  D02A               	goto	i2l2509
 10046  0009F4                     i2l2483:
 10047                           
 10048                           ;Interrupt.c: 81: else
 10049                           ;Interrupt.c: 82: {
 10050                           ;Interrupt.c: 83: force_nec_state0();
 10051  0009F4  EC9C  F00E         	call	i2_force_nec_state0	;wreg free
 10052  0009F8  D027               	goto	i2l2509
 10053  0009FA  D026               	goto	i2l2509
 10054                           
 10055                           ;Interrupt.c: 86: return;
 10056                           
 10057                           ;Interrupt.c: 84: }
 10058                           ;Interrupt.c: 85: INTCON2bits.INTEDG0 = 0;
 10059  0009FC  D071               	goto	i2l368
 10060  0009FE                     i2l2489:
 10061                           
 10062                           ;Interrupt.c: 90: {
 10063                           ;Interrupt.c: 91: if (Time_Elapsed > 4000 && Time_Elapsed < 5000)
 10064  0009FE  0EA1               	movlw	161
 10065  000A00  5C4A               	subwf	_Time_Elapsed,w,c
 10066  000A02  0E0F               	movlw	15
 10067  000A04  584B               	subwfb	_Time_Elapsed+1,w,c
 10068  000A06  A0D8               	btfss	status,0,c
 10069  000A08  D009               	goto	i2l2495
 10070  000A0A  0E88               	movlw	136
 10071  000A0C  5C4A               	subwf	_Time_Elapsed,w,c
 10072  000A0E  0E13               	movlw	19
 10073  000A10  584B               	subwfb	_Time_Elapsed+1,w,c
 10074  000A12  B0D8               	btfsc	status,0,c
 10075  000A14  D003               	goto	i2l2495
 10076  000A16                     
 10077                           ;Interrupt.c: 92: {
 10078                           ;Interrupt.c: 93: Nec_state = 3;
 10079  000A16  0E03               	movlw	3
 10080  000A18  6E53               	movwf	_Nec_state,c
 10081                           
 10082                           ;Interrupt.c: 94: }
 10083  000A1A  D04F               	goto	i2l2527
 10084  000A1C                     i2l2495:
 10085                           
 10086                           ;Interrupt.c: 95: else
 10087                           ;Interrupt.c: 96: {
 10088                           ;Interrupt.c: 97: force_nec_state0();
 10089  000A1C  EC9C  F00E         	call	i2_force_nec_state0	;wreg free
 10090  000A20  D04C               	goto	i2l2527
 10091  000A22  D04B               	goto	i2l2527
 10092                           
 10093                           ;Interrupt.c: 100: return;
 10094                           
 10095                           ;Interrupt.c: 98: }
 10096                           ;Interrupt.c: 99: INTCON2bits.INTEDG0 = 1;
 10097  000A24  D05D               	goto	i2l368
 10098  000A26                     i2l2501:
 10099                           
 10100                           ;Interrupt.c: 104: {
 10101                           ;Interrupt.c: 105: if (Time_Elapsed > 400 && Time_Elapsed < 700)
 10102  000A26  0E91               	movlw	145
 10103  000A28  5C4A               	subwf	_Time_Elapsed,w,c
 10104  000A2A  0E01               	movlw	1
 10105  000A2C  584B               	subwfb	_Time_Elapsed+1,w,c
 10106  000A2E  A0D8               	btfss	status,0,c
 10107  000A30  D008               	goto	i2l2507
 10108  000A32  0EBC               	movlw	188
 10109  000A34  5C4A               	subwf	_Time_Elapsed,w,c
 10110  000A36  0E02               	movlw	2
 10111  000A38  584B               	subwfb	_Time_Elapsed+1,w,c
 10112  000A3A  B0D8               	btfsc	status,0,c
 10113  000A3C  D002               	goto	i2l2507
 10114                           
 10115                           ;Interrupt.c: 106: {
 10116                           ;Interrupt.c: 107: Nec_state = 4;
 10117  000A3E  0E04               	movlw	4
 10118  000A40  D7D7               	goto	L13
 10119  000A42                     i2l2507:
 10120                           
 10121                           ;Interrupt.c: 109: else
 10122                           ;Interrupt.c: 110: {
 10123                           ;Interrupt.c: 111: force_nec_state0();
 10124  000A42  EC9C  F00E         	call	i2_force_nec_state0	;wreg free
 10125  000A46  D000               	goto	i2l2509
 10126  000A48                     i2l2509:
 10127                           
 10128                           ;Interrupt.c: 112: }
 10129                           ;Interrupt.c: 113: INTCON2bits.INTEDG0 = 0;
 10130  000A48  9CF1               	bcf	intcon2,6,c	;volatile
 10131                           
 10132                           ;Interrupt.c: 114: return;
 10133  000A4A  D04A               	goto	i2l368
 10134  000A4C                     i2l2513:
 10135                           
 10136                           ;Interrupt.c: 118: {
 10137                           ;Interrupt.c: 119: if (Time_Elapsed > 400 && Time_Elapsed < 1800)
 10138  000A4C  0E91               	movlw	145
 10139  000A4E  5C4A               	subwf	_Time_Elapsed,w,c
 10140  000A50  0E01               	movlw	1
 10141  000A52  584B               	subwfb	_Time_Elapsed+1,w,c
 10142  000A54  A0D8               	btfss	status,0,c
 10143  000A56  D02E               	goto	i2l2525
 10144  000A58  0E08               	movlw	8
 10145  000A5A  5C4A               	subwf	_Time_Elapsed,w,c
 10146  000A5C  0E07               	movlw	7
 10147  000A5E  584B               	subwfb	_Time_Elapsed+1,w,c
 10148  000A60  B0D8               	btfsc	status,0,c
 10149  000A62  D028               	goto	i2l2525
 10150                           
 10151                           ;Interrupt.c: 120: {
 10152                           ;Interrupt.c: 121: Nec_code = Nec_code << 1;
 10153  000A64  90D8               	bcf	status,0,c
 10154  000A66  3446               	rlcf	_Nec_code,w,c
 10155  000A68  6E46               	movwf	_Nec_code,c
 10156  000A6A  3447               	rlcf	_Nec_code+1,w,c
 10157  000A6C  6E47               	movwf	_Nec_code+1,c
 10158  000A6E  3448               	rlcf	_Nec_code+2,w,c
 10159  000A70  6E48               	movwf	_Nec_code+2,c
 10160  000A72  3449               	rlcf	_Nec_code+3,w,c
 10161  000A74  6E49               	movwf	_Nec_code+3,c
 10162                           
 10163                           ;Interrupt.c: 123: if (Time_Elapsed > 1000)
 10164  000A76  0EE9               	movlw	233
 10165  000A78  5C4A               	subwf	_Time_Elapsed,w,c
 10166  000A7A  0E03               	movlw	3
 10167  000A7C  584B               	subwfb	_Time_Elapsed+1,w,c
 10168  000A7E  A0D8               	btfss	status,0,c
 10169  000A80  D00C               	goto	i2l380
 10170                           
 10171                           ;Interrupt.c: 124: {
 10172                           ;Interrupt.c: 125: Nec_code = Nec_code + 1;
 10173  000A82  0E01               	movlw	1
 10174  000A84  2446               	addwf	_Nec_code,w,c
 10175  000A86  6E46               	movwf	_Nec_code,c
 10176  000A88  0E00               	movlw	0
 10177  000A8A  2047               	addwfc	_Nec_code+1,w,c
 10178  000A8C  6E47               	movwf	_Nec_code+1,c
 10179  000A8E  0E00               	movlw	0
 10180  000A90  2048               	addwfc	_Nec_code+2,w,c
 10181  000A92  6E48               	movwf	_Nec_code+2,c
 10182  000A94  0E00               	movlw	0
 10183  000A96  2049               	addwfc	_Nec_code+3,w,c
 10184  000A98  6E49               	movwf	_Nec_code+3,c
 10185  000A9A                     i2l380:
 10186                           
 10187                           ;Interrupt.c: 126: }
 10188                           ;Interrupt.c: 128: bit_count = bit_count + 1;
 10189  000A9A  285A               	incf	_bit_count,w,c
 10190  000A9C  6E5A               	movwf	_bit_count,c
 10191                           
 10192                           ;Interrupt.c: 130: if (bit_count > 31)
 10193  000A9E  0E1F               	movlw	31
 10194  000AA0  645A               	cpfsgt	_bit_count,c
 10195  000AA2  D7B9               	goto	L14
 10196                           
 10197                           ;Interrupt.c: 131: {
 10198                           ;Interrupt.c: 132: nec_ok = 1;
 10199  000AA4  0E00               	movlw	0
 10200  000AA6  6E4F               	movwf	_nec_ok+1,c
 10201  000AA8  0E01               	movlw	1
 10202  000AAA  6E4E               	movwf	_nec_ok,c
 10203                           
 10204                           ;Interrupt.c: 133: INTCONbits.INT0IE = 0;
 10205  000AAC  98F2               	bcf	intcon,4,c	;volatile
 10206                           
 10207                           ;Interrupt.c: 134: Nec_state = 0;
 10208  000AAE  0E00               	movlw	0
 10209  000AB0  6E53               	movwf	_Nec_state,c
 10210  000AB2  D7B1               	goto	L14
 10211  000AB4                     i2l2525:
 10212                           
 10213                           ;Interrupt.c: 139: else
 10214                           ;Interrupt.c: 140: {
 10215                           ;Interrupt.c: 141: force_nec_state0();
 10216  000AB4  EC9C  F00E         	call	i2_force_nec_state0	;wreg free
 10217  000AB8  D000               	goto	i2l2527
 10218  000ABA                     i2l2527:
 10219                           
 10220                           ;Interrupt.c: 142: }
 10221                           ;Interrupt.c: 144: INTCON2bits.INTEDG0 = 1;
 10222  000ABA  8CF1               	bsf	intcon2,6,c	;volatile
 10223                           
 10224                           ;Interrupt.c: 146: }
 10225                           ;Interrupt.c: 147: }
 10226                           
 10227                           ;Interrupt.c: 145: return;
 10228  000ABC  D011               	goto	i2l368
 10229  000ABE                     i2l2533:
 10230  000ABE  5053               	movf	_Nec_state,w,c
 10231                           
 10232                           ; Switch size 1, requested type "space"
 10233                           ; Number of cases is 5, Range of values is 0 to 4
 10234                           ; switch strategies available:
 10235                           ; Name         Instructions Cycles
 10236                           ; simple_byte           16     9 (average)
 10237                           ;	Chosen strategy is simple_byte
 10238  000AC0  0A00               	xorlw	0	; case 0
 10239  000AC2  B4D8               	btfsc	status,2,c
 10240  000AC4  D772               	goto	i2l2467
 10241  000AC6  0A01               	xorlw	1	; case 1
 10242  000AC8  B4D8               	btfsc	status,2,c
 10243  000ACA  D785               	goto	i2l2477
 10244  000ACC  0A03               	xorlw	3	; case 2
 10245  000ACE  B4D8               	btfsc	status,2,c
 10246  000AD0  D796               	goto	i2l2489
 10247  000AD2  0A01               	xorlw	1	; case 3
 10248  000AD4  B4D8               	btfsc	status,2,c
 10249  000AD6  D7A7               	goto	i2l2501
 10250  000AD8  0A07               	xorlw	7	; case 4
 10251  000ADA  B4D8               	btfsc	status,2,c
 10252  000ADC  D7B7               	goto	i2l2513
 10253  000ADE  D000               	goto	i2l368
 10254  000AE0                     i2l368:
 10255  000AE0  0012               	return		;funcret
 10256  000AE2                     __end_ofi2_INT0_isr:
 10257                           	opt stack 0
 10258                           pclatu	equ	0xFFB
 10259                           pclath	equ	0xFFA
 10260                           tblptru	equ	0xFF8
 10261                           tblptrh	equ	0xFF7
 10262                           tblptrl	equ	0xFF6
 10263                           tablat	equ	0xFF5
 10264                           prodh	equ	0xFF4
 10265                           prodl	equ	0xFF3
 10266                           intcon	equ	0xFF2
 10267                           intcon2	equ	0xFF1
 10268                           postinc0	equ	0xFEE
 10269                           fsr0h	equ	0xFEA
 10270                           fsr0l	equ	0xFE9
 10271                           wreg	equ	0xFE8
 10272                           postdec1	equ	0xFE5
 10273                           fsr1h	equ	0xFE2
 10274                           fsr1l	equ	0xFE1
 10275                           indf2	equ	0xFDF
 10276                           postinc2	equ	0xFDE
 10277                           postdec2	equ	0xFDD
 10278                           fsr2h	equ	0xFDA
 10279                           fsr2l	equ	0xFD9
 10280                           status	equ	0xFD8
 10281                           
 10282 ;; *************** function i2_force_nec_state0 *****************
 10283 ;; Defined at:
 10284 ;;		line 42 in file "Interrupt.c"
 10285 ;; Parameters:    Size  Location     Type
 10286 ;;		None
 10287 ;; Auto vars:     Size  Location     Type
 10288 ;;		None
 10289 ;; Return value:  Size  Location     Type
 10290 ;;		None               void
 10291 ;; Registers used:
 10292 ;;		wreg, status,2
 10293 ;; Tracked objects:
 10294 ;;		On entry : 0/0
 10295 ;;		On exit  : 0/0
 10296 ;;		Unchanged: 0/0
 10297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10298 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10299 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10300 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10301 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10302 ;;Total ram usage:        0 bytes
 10303 ;; Hardware stack levels used:    1
 10304 ;; This function calls:
 10305 ;;		Nothing
 10306 ;; This function is called by:
 10307 ;;		i2_INT0_isr
 10308 ;; This function uses a non-reentrant model
 10309 ;;
 10310                           
 10311                           	psect	text61
 10312  001D38                     __ptext61:
 10313                           	opt stack 0
 10314  001D38                     i2_force_nec_state0:
 10315                           	opt stack 20
 10316                           
 10317                           ;Interrupt.c: 44: Nec_state = 0;
 10318                           
 10319                           ;incstack = 0
 10320  001D38  0E00               	movlw	0
 10321  001D3A  6E53               	movwf	_Nec_state,c
 10322                           
 10323                           ;Interrupt.c: 45: T1CONbits.TMR1ON = 0;
 10324  001D3C  90CD               	bcf	4045,0,c	;volatile
 10325  001D3E  0012               	return		;funcret
 10326  001D40                     __end_ofi2_force_nec_state0:
 10327                           	opt stack 0
 10328                           pclatu	equ	0xFFB
 10329                           pclath	equ	0xFFA
 10330                           tblptru	equ	0xFF8
 10331                           tblptrh	equ	0xFF7
 10332                           tblptrl	equ	0xFF6
 10333                           tablat	equ	0xFF5
 10334                           prodh	equ	0xFF4
 10335                           prodl	equ	0xFF3
 10336                           intcon	equ	0xFF2
 10337                           intcon2	equ	0xFF1
 10338                           postinc0	equ	0xFEE
 10339                           fsr0h	equ	0xFEA
 10340                           fsr0l	equ	0xFE9
 10341                           wreg	equ	0xFE8
 10342                           postdec1	equ	0xFE5
 10343                           fsr1h	equ	0xFE2
 10344                           fsr1l	equ	0xFE1
 10345                           indf2	equ	0xFDF
 10346                           postinc2	equ	0xFDE
 10347                           postdec2	equ	0xFDD
 10348                           fsr2h	equ	0xFDA
 10349                           fsr2l	equ	0xFD9
 10350                           status	equ	0xFD8
 10351                           
 10352 ;; *************** function _TIMER1_isr *****************
 10353 ;; Defined at:
 10354 ;;		line 34 in file "Interrupt.c"
 10355 ;; Parameters:    Size  Location     Type
 10356 ;;		None
 10357 ;; Auto vars:     Size  Location     Type
 10358 ;;		None
 10359 ;; Return value:  Size  Location     Type
 10360 ;;		None               void
 10361 ;; Registers used:
 10362 ;;		wreg, status,2
 10363 ;; Tracked objects:
 10364 ;;		On entry : 0/0
 10365 ;;		On exit  : 0/0
 10366 ;;		Unchanged: 0/0
 10367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10368 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10369 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10370 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10371 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10372 ;;Total ram usage:        0 bytes
 10373 ;; Hardware stack levels used:    1
 10374 ;; This function calls:
 10375 ;;		Nothing
 10376 ;; This function is called by:
 10377 ;;		_chkisr
 10378 ;; This function uses a non-reentrant model
 10379 ;;
 10380                           
 10381                           	psect	text62
 10382  001CEE                     __ptext62:
 10383                           	opt stack 0
 10384  001CEE                     _TIMER1_isr:
 10385                           	opt stack 21
 10386                           
 10387                           ;Interrupt.c: 36: Nec_state = 0;
 10388                           
 10389                           ;incstack = 0
 10390  001CEE  0E00               	movlw	0
 10391  001CF0  6E53               	movwf	_Nec_state,c
 10392                           
 10393                           ;Interrupt.c: 37: INTCON2bits.INTEDG0 = 0;
 10394  001CF2  9CF1               	bcf	intcon2,6,c	;volatile
 10395                           
 10396                           ;Interrupt.c: 38: T1CONbits.TMR1ON = 0;
 10397  001CF4  90CD               	bcf	4045,0,c	;volatile
 10398                           
 10399                           ;Interrupt.c: 39: PIR1bits.TMR1IF = 0;
 10400  001CF6  909E               	bcf	3998,0,c	;volatile
 10401  001CF8  0012               	return		;funcret
 10402  001CFA                     __end_of_TIMER1_isr:
 10403                           	opt stack 0
 10404                           pclatu	equ	0xFFB
 10405                           pclath	equ	0xFFA
 10406                           tblptru	equ	0xFF8
 10407                           tblptrh	equ	0xFF7
 10408                           tblptrl	equ	0xFF6
 10409                           tablat	equ	0xFF5
 10410                           prodh	equ	0xFF4
 10411                           prodl	equ	0xFF3
 10412                           intcon	equ	0xFF2
 10413                           intcon2	equ	0xFF1
 10414                           postinc0	equ	0xFEE
 10415                           fsr0h	equ	0xFEA
 10416                           fsr0l	equ	0xFE9
 10417                           wreg	equ	0xFE8
 10418                           postdec1	equ	0xFE5
 10419                           fsr1h	equ	0xFE2
 10420                           fsr1l	equ	0xFE1
 10421                           indf2	equ	0xFDF
 10422                           postinc2	equ	0xFDE
 10423                           postdec2	equ	0xFDD
 10424                           fsr2h	equ	0xFDA
 10425                           fsr2l	equ	0xFD9
 10426                           status	equ	0xFD8
 10427                           pclatu	equ	0xFFB
 10428                           pclath	equ	0xFFA
 10429                           tblptru	equ	0xFF8
 10430                           tblptrh	equ	0xFF7
 10431                           tblptrl	equ	0xFF6
 10432                           tablat	equ	0xFF5
 10433                           prodh	equ	0xFF4
 10434                           prodl	equ	0xFF3
 10435                           intcon	equ	0xFF2
 10436                           intcon2	equ	0xFF1
 10437                           postinc0	equ	0xFEE
 10438                           fsr0h	equ	0xFEA
 10439                           fsr0l	equ	0xFE9
 10440                           wreg	equ	0xFE8
 10441                           postdec1	equ	0xFE5
 10442                           fsr1h	equ	0xFE2
 10443                           fsr1l	equ	0xFE1
 10444                           indf2	equ	0xFDF
 10445                           postinc2	equ	0xFDE
 10446                           postdec2	equ	0xFDD
 10447                           fsr2h	equ	0xFDA
 10448                           fsr2l	equ	0xFD9
 10449                           status	equ	0xFD8
 10450                           
 10451                           	psect	rparam
 10452  0000                     pclatu	equ	0xFFB
 10453                           pclath	equ	0xFFA
 10454                           tblptru	equ	0xFF8
 10455                           tblptrh	equ	0xFF7
 10456                           tblptrl	equ	0xFF6
 10457                           tablat	equ	0xFF5
 10458                           prodh	equ	0xFF4
 10459                           prodl	equ	0xFF3
 10460                           intcon	equ	0xFF2
 10461                           intcon2	equ	0xFF1
 10462                           postinc0	equ	0xFEE
 10463                           fsr0h	equ	0xFEA
 10464                           fsr0l	equ	0xFE9
 10465                           wreg	equ	0xFE8
 10466                           postdec1	equ	0xFE5
 10467                           fsr1h	equ	0xFE2
 10468                           fsr1l	equ	0xFE1
 10469                           indf2	equ	0xFDF
 10470                           postinc2	equ	0xFDE
 10471                           postdec2	equ	0xFDD
 10472                           fsr2h	equ	0xFDA
 10473                           fsr2l	equ	0xFD9
 10474                           status	equ	0xFD8


Data Sizes:
    Strings     160
    Constant    547
    Data        149
    BSS         71
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     69     111
    BANK0           128     13     107
    BANK1           256      0      84
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 84
		 -> NULL(NULL[0]), buffer(BANK0[31]), txt1(BANK1[84]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 84
		 -> NULL(NULL[0]), buffer(BANK0[31]), txt1(BANK1[84]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_6(CODE[8]), STR_5(CODE[20]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 43
		 -> STR_4(CODE[15]), STR_3(CODE[27]), STR_2(CODE[43]), STR_1(CODE[30]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 84
		 -> NULL(NULL[0]), buffer(BANK0[31]), txt1(BANK1[84]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    txt	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___llmod
    ___llmod->___lldiv
    _fillCircle->_fillCircleHelper
    _fillCircleHelper->_drawFastVLine
    _drawCircle->_drawPixel
    ___awdiv->___wmul
    _Initialize_Screen->_drawtext
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _write_data->_spiwrite
    _write_command->_spiwrite
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul
    _Do_Init->_DS1621_Init
    _init_UART->_OpenUSART
    _DS1621_Init->_I2C_Write_Cmd_Write_Data
    _I2C_Write_Cmd_Write_Data->_I2C_Write
    _I2C_Write_Cmd_Only->_I2C_Write
    _DS3231_Setup_Time->_I2C_Write
    _DS3231_Read_Time->_I2C_Read
    _DS1621_Read_Temp->_I2C_Read

Critical Paths under _chkisr in COMRAM

    _chkisr->i2_INT0_isr

Critical Paths under _main in BANK0

    _main->_drawtext
    _Initialize_Screen->_drawtext

Critical Paths under _chkisr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _chkisr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _chkisr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _chkisr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _chkisr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _chkisr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _chkisr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _chkisr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _chkisr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _chkisr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _chkisr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _chkisr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _chkisr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _chkisr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _chkisr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _chkisr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0   57373
                                              7 BANK0      6     6      0
                    _Activate_Buzzer
                      _DO_DISPLAY_D1
                   _DS1621_Read_Temp
                   _DS3231_Read_Time
                  _DS3231_Setup_Time
                  _Deactivate_Buzzer
                            _Do_Init
                           _INT0_isr
                  _Initialize_Screen
                       _Wait_One_Sec
                            ___awdiv
                             ___wmul
                         _drawCircle
                           _drawtext
                         _fillCircle
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              40    26     14    3725
                                             38 COMRAM    31    17     14
                            ___lldiv
                            ___llmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      31
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                             16 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     362
                                             29 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     501
                                             16 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _fillCircle                                           8     0      8    8344
                                             58 COMRAM     8     0      8
                      _drawFastVLine
                   _fillCircleHelper
 ---------------------------------------------------------------------------------
 (2) _fillCircleHelper                                    24    12     12    4703
                                             34 COMRAM    24    12     12
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (1) _drawCircle                                          20    12      8    6484
                                             27 COMRAM    20    12      8
                          _drawPixel
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              8     4      4     575
                                             22 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Wait_One_Sec                                         2     2      0      68
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Initialize_Screen                                    0     0      0   21503
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                           _drawtext
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4     369
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _fillScreen                                           2     0      2    2192
                                             35 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (3) _fillRectangle                                       12     7      5    2096
                                             23 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (1) _drawtext                                            17     9      8   12656
                                             56 COMRAM    10     2      8
                                              0 BANK0      7     7      0
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               6     4      2     195
                                             16 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _drawChar                                            11     4      7   10774
                                             45 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (3) _fillRect                                            11     6      5    3876
                                             34 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (3) _drawFastVLine                                       11     7      4    3102
                                             23 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (3) _drawPixel                                            4     1      3    4207
                                             23 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (4) _setAddrWindow                                        4     1      3    1034
                                             19 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (2) _TFT_GreenTab_Initialize                              0     0      0    4364
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd3                                                0     0      0    2052
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd2red                                             0     0      0     130
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd1                                                0     0      0    2052
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (5) _write_data                                           1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (5) _write_command                                        1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (4) _spiwrite                                             2     2      0      34
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _LCD_Reset                                            0     0      0    1922
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             6     4      2    1922
                                             22 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     882
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _INT0_isr                                             2     2      0       0
                                             16 COMRAM     2     2      0
                   _force_nec_state0
 ---------------------------------------------------------------------------------
 (2) _force_nec_state0                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Do_Init                                              0     0      0    1121
                        _DS1621_Init
                           _I2C_Init
                     _init_INTERRUPT
                          _init_UART
 ---------------------------------------------------------------------------------
 (2) _init_UART                                            0     0      0     375
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (3) _OpenUSART                                            3     1      2     375
                                             16 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _init_INTERRUPT                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Init                                             4     0      4      65
                                             16 COMRAM     4     0      4
                         _i2cHighScl
                         _i2cHighSda
 ---------------------------------------------------------------------------------
 (2) _DS1621_Init                                          1     1      0     681
                                             21 COMRAM     1     1      0
                 _I2C_Write_Cmd_Only
           _I2C_Write_Cmd_Write_Data
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Write_Data                             3     1      2     356
                                             18 COMRAM     3     1      2
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Only                                   2     1      1     260
                                             18 COMRAM     2     1      1
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _Deactivate_Buzzer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DS3231_Setup_Time                                    2     2      0     201
                                             18 COMRAM     2     2      0
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DS3231_Read_Time                                     3     3      0     430
                                             19 COMRAM     2     2      0
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DS1621_Read_Temp                                     5     3      2     464
                                             19 COMRAM     5     3      2
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_Write                                            2     2      0     133
                                             16 COMRAM     2     2      0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Stop                                             0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Start                                            0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (2) _I2C_Read                                             3     3      0     198
                                             16 COMRAM     3     3      0
                             _i2cAck
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                            _i2cNack
 ---------------------------------------------------------------------------------
 (3) _i2cNack                                              0     0      0       0
                         _i2cHighScl
                          _i2cLowScl
 ---------------------------------------------------------------------------------
 (3) _i2cAck                                               0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (2) _I2C_ReStart                                          0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (5) _i2cLowSda                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2cLowScl                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2cHighSda                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2cHighScl                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DO_DISPLAY_D1                                        2     0      2     499
                                             16 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _Activate_Buzzer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _chkisr                                              14    14      0       0
                                              2 COMRAM    14    14      0
                         _TIMER1_isr
                         i2_INT0_isr
 ---------------------------------------------------------------------------------
 (10) i2_INT0_isr                                          2     2      0       0
                                              0 COMRAM     2     2      0
                 i2_force_nec_state0
 ---------------------------------------------------------------------------------
 (11) i2_force_nec_state0                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _TIMER1_isr                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Activate_Buzzer
   _DO_DISPLAY_D1
   _DS1621_Read_Temp
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Read_Time
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Setup_Time
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _Deactivate_Buzzer
   _Do_Init
     _DS1621_Init
       _I2C_Write_Cmd_Only
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _I2C_Write_Cmd_Write_Data
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
     _I2C_Init
       _i2cHighScl
       _i2cHighSda
     _init_INTERRUPT
     _init_UART
       _OpenUSART
   _INT0_isr
     _force_nec_state0
   _Initialize_Screen
     _LCD_Reset
       _delay_ms
         ___wmul
     _TFT_GreenTab_Initialize
       _Rcmd1
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd2red
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd3
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_command
         _spiwrite
       _write_data
         _spiwrite
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _fillScreen
       _fillRectangle
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _strcpy
   _Wait_One_Sec
   ___awdiv
     ___wmul (ARG)
   ___wmul
   _drawCircle
     _drawPixel
       _setAddrWindow
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_data
         _spiwrite
   _drawtext
     _drawChar
       ___wmul
       _drawPixel
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_data
           _spiwrite
       _fillRect
         _drawFastVLine
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
     _strlen
   _fillCircle
     _drawFastVLine
       _setAddrWindow
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _spiwrite
     _fillCircleHelper
       _drawFastVLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
   _printf
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___wmul
     _isdigit
     _putch

 _chkisr (ROOT)
   _TIMER1_isr
   i2_INT0_isr
     i2_force_nec_state0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      54       7       32.8%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      D      6B       5       83.6%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     45      6F       1       87.4%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     12E      34        0.0%
DATA                 0      0     12E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Oct 28 17:24:50 2021

                      drawCircle@f 002A                        drawCircle@r 0020  
                      drawCircle@x 002C                        drawCircle@y 002E  
               __size_of_I2C_Start 0012                        _SSPSTATbits 000FC7  
               __size_of_I2C_Write 003E                       drawCircle@x0 001C  
                     drawCircle@y0 001E                       ___awdiv@sign 001C  
              ___wmul@multiplicand 0013                                l232 19D6  
                              l312 1A7C                                l145 1CD8  
                              l156 1B84                                l229 190A  
                              l503 0B8C                                l418 1824  
                              l531 125A                                l700 1668  
                              l380 093A                                l428 1C40  
                              l532 11C6                                l534 1236  
                              l542 0736                                l199 108C  
                              l703 1B60                                l535 1258  
                              l368 0980                                l472 1ADE  
                              l560 0CA6                                l626 0126  
                              l629 0188                                l478 1492  
                              l494 0C36                                l496 0B10  
                              l691 1626                                l667 045C  
                              l695 1640                                l696 1642  
                              l697 164C                                l698 164E  
                              l896 12F0                                _PR2 000FCB  
                              _day 005C                  _Deactivate_Buzzer 1D20  
             __size_of_I2C_ReStart 0016                                _dow 005D  
                              _nbr 004C                                _txt 0050  
                              prod 000FF3                                wreg 000FE8  
               ?_Deactivate_Buzzer 0001                    ??_fillRectangle 001D  
                     __CFG_LVP$OFF 000000            _TFT_GreenTab_Initialize 1B10  
                   ?_DO_DISPLAY_D1 0011                       __CFG_WDT$OFF 000000  
                   drawFastVLine@h 0019                               l1134 1BA6  
                             l1163 13FA                               l1173 15E8  
                             l1265 1988                     drawFastVLine@x 0022  
                   drawFastVLine@y 0018                               l5001 159C  
                             l5003 15AA                               l5005 15B2  
                             l5015 1B6A                               l5009 15D8  
                             l5201 0218                               l5019 1B7E  
                             l5301 104E                               l4421 141C  
                             l5205 0224                               l5141 0064  
                             l5133 0036                               l5303 1052  
                             l4503 1AC0                               l4511 1884  
                             l5223 0288                               l5215 025A  
                             l5135 0044                               l4425 1454  
                             l5241 02EE                               l5209 0254  
                             l5217 026C                               l5153 00E4  
                             l5145 0082                               l5129 0026  
                             l5307 1072                               l4531 161E  
                             l4523 160C                               l5323 084A  
                             l4435 147A                               l4515 18A0  
                             l5411 071C                               l5243 02F6  
                             l5251 0322                               l5235 02CE  
                             l5227 02AC                               l5171 016E  
                             l5155 00EA                               l5139 004E  
                             l5309 1076                               l4453 19E0  
                             l5333 0876                               l4437 1488  
                             l4701 0B14                               l5253 0330  
                             l5261 0412                               l5237 02D6  
                             l5229 02B6                               l5181 01A8  
                             l5271 0F9A                               l4455 19E6  
                             l4447 19CE                               l4543 1638  
                             l4535 162A                               l4527 1616  
                             l5351 08BC                               l4711 0B80  
                             l5511 12E6                               l5503 12CA  
                             l5255 03A8                               l5263 0424  
                             l5247 030E                               l5191 01DE  
                             l5167 014A                               l5159 00F2  
                             l5273 0F9E                               l4465 19F8  
                             l5345 089E                               l4721 0BAE  
                             l4713 0B84                               l4705 0B1C  
                             l5265 042C                               l5185 01CE  
                             l5521 046C                               l5291 100A  
                             l5283 0FE2                               l5363 08E2  
                             l5339 0894                               l4731 0C2A  
                             l4723 0BD6                               l5507 12D6  
                             l5195 020E                               l5187 01D2  
                             l5267 0440                               l5285 0FE6  
                             l5277 0FBE                               l4901 18E4  
                             l5381 0954                               l5365 08E8  
                             l5357 08C6                               l4709 0B4C  
   I2C_Write_Cmd_Write_Data@Device 0015                               l5295 102A  
                             l5279 0FC2                               l4903 18EC  
                             l5383 095A                               l4743 1956  
                             l5439 080C                               l5199 0214  
                             l5297 102E                               l5289 1006  
                             l4913 1900                               l5369 08EC  
                             l4729 0C02                               l4737 0C32  
                             l4745 195C                               l4841 0EFC  
                             l4761 11FE                               l5553 054A  
                             l5537 0520                               l4915 1906  
                             l4691 0AF2                               l4755 1190  
                             l5491 129A                               l5563 05AA  
                             l4909 18F4                               l5389 095E  
                             l4853 0F6C                               l4845 0F1A  
                             l4829 0EAC                               l4781 1244  
                             l4773 122C                               l5493 12A4  
                             l5485 1284                               l4941 0C8C  
                             l5573 05D0                               l5557 0564  
                             l4695 0AFE                               l4855 0F74  
                             l5495 12AC                               l5479 1272  
                             l5567 05B4                               l4777 123A  
                             l4961 0D5A                               l4891 18CE  
                             l4699 0B0C                               l4787 1254  
                             l4883 1A88                               l4971 1B9E  
                             l4885 1A92                               l4957 0D08  
                             l4981 13A2                               l4895 18D6  
                             l4983 13B0                               l4993 13EA  
                             l4985 13B8                               STR_1 FF89  
                             STR_2 FF5E                               STR_3 FFA7  
                             STR_4 FFE7                               STR_5 FFC2  
                             STR_6 FFF6                               STR_7 FFD6  
                             u3230 144A                               u4210 0FF6  
                             u4230 101A                               u3520 0BE4  
                             u3600 11F4                               u4250 103E  
                             u4170 0FAE                               u4270 1062  
                             u4190 0FD2                               u4290 1086  
                             u3670 0ED6                               u3590 11BE  
                             u4737 1CE6                               _RBPU 007F8F  
                             _TRMT 007D61                ??_Deactivate_Buzzer 0011  
                             _main 045E                               _font FD3B  
                             _hour 005F                   __end_of_I2C_Init 1D04  
                 __end_of_I2C_Read 190C                               _year 006D  
                             fsr0h 000FEA                               _txt1 0100  
                             fsr1h 000FE2                               fsr0l 000FE9  
                             fsr2h 000FDA                               fsr1l 000FE1  
                             indf2 000FDF                               fsr2l 000FD9  
                             _wrap 006F                   __end_of_I2C_Stop 1C7E  
                      ?i2_INT0_isr 0001                               pclat 000FFA  
               __size_of_LCD_Reset 0012                               prodh 000FF4  
                             prodl 000FF3                               start 0018  
      __size_of_I2C_Write_Cmd_Only 001A                    __end_of_Do_Init 1A42  
                  ??_drawFastVLine 001C                    __end_of_i2cNack 1D0E  
                     ___param_bank 000010                        ?_TIMER1_isr 0001  
                 __end_of_INT0_isr 0982          __end_of_Deactivate_Buzzer 1D28  
                  drawFastVLine@hi 0020                    drawFastVLine@lo 0021  
                            ?_main 0001                    __end_of___awdiv 12F2  
                  drawCircle@ddF_x 0026                    drawCircle@ddF_y 0028  
                  __end_of___lldiv 140C                    ___awdiv@divisor 0019  
                            _T1CON 000FCD                    __end_of___llmod 15FA  
                            _T2CON 000FCA                              _T3CON 000FB1  
                            i2l380 0A9A                              i2l356 14D6  
                            i2l368 0AE0                    ___awdiv@counter 001B  
                  drawCircle@color 0022                              _RCSTA 000FAB  
                            _TMR1H 000FCF                              _TMR3H 000FB3  
                            _TMR1L 000FCE                              _TMR3L 000FB2  
                            _SPBRG 000FAF                              _PORTD 000F83  
                            _TRISB 000F93                              _TRISC 000F94  
                            _TRISD 000F95                              _TRISE 000F96  
                            _TXREG 000FAD                              _TXSTA 000FAC  
                            _Rcmd1 0D70                              _Rcmd3 108E  
                       _i2cHighSda 1D30                         _i2cHighScl 1CE2  
                  __end_of_dpowers FF3E                              _color 0080  
                            _font2 FE3A              fillCircleHelper@ddF_x 0031  
            fillCircleHelper@ddF_y 0033                              _found 005E  
                  __end_of_isdigit 1BA8                              _month 0061  
            fillCircleHelper@delta 002B                              _putch 1CD4  
            fillCircleHelper@color 002D                              main@i 00E8  
                __end_of_I2C_Start 1C90                  __end_of_I2C_Write 1A06  
                   __CFG_BOREN$OFF 000000                              tablat 000FF5  
                            status 000FD8                  ?_DS1621_Read_Temp 0014  
                  write_data@data_ 0013                 ??_DS1621_Read_Temp 0016  
                  __initialization 1510                       __end_of_main 0674  
                     __end_of_font FE3A                   __end_of_Rcmd2red 19C8  
                           ??_main 00E5                      __activetblptr 000002  
                ?_DS3231_Read_Time 0001                  __end_of_LCD_Reset 1C6C  
              __size_ofi2_INT0_isr 0160          ??_TFT_GreenTab_Initialize 001D  
               ??_DS3231_Read_Time 0014                             ?_Rcmd1 0001  
                           ?_Rcmd3 0001            __size_of_init_INTERRUPT 0030  
                  ??_DO_DISPLAY_D1 0013                          I2C_Init@c 0011  
                        I2C_Read@n 0012                             _ADCON1 000FC1  
              DS1621_Read_Temp@Cmd 0016                   ___llmod@dividend 001E  
                           _CCPR2L 000FBB                   ___awdiv@dividend 0017  
               __size_of_i2cLowSda 000A                 __size_of_i2cLowScl 0008  
                           ?_putch 0001                             i2l2501 0A26  
                           i2l2513 0A4C                             i2l2507 0A42  
                           i2l2525 0AB4                             i2l2509 0A48  
                           i2l2533 0ABE                             i2l2527 0ABA  
                           i2l2483 09F4                             i2l2467 09AA  
                           i2l2477 09D6                             i2l2495 0A1C  
                           i2l2489 09FE                             i2l2649 14CC  
                        ??_Do_Init 0017                             _OSCCON 000FD3  
              __size_of_TIMER1_isr 000C                             _SPBRGH 000FB0  
                           _SSPBUF 000FC9                          ??_i2cNack 0011  
                 _force_nec_state0 1D18                   __end_of_delay_ms 182C  
                           _i2cAck 1C90                         _TempSecond 0054  
                 __end_of_fillRect 18C4                   __end_of_drawChar 0C38  
               __size_of_OpenUSART 0070           __size_of_Activate_Buzzer 0012  
                           ___wmul 1B3A                          ??___awdiv 001B  
        __size_of_fillCircleHelper 0138                   __end_of_drawtext 0F8A  
                        ??___lldiv 0019                          ??___llmod 0026  
                           _chkisr 0008                             _array1 00AA  
                           _buffer 00BF                             _nec_ok 004E  
                           clear_0 1516                             clear_1 1522  
                 ___awdiv@quotient 001D                             _minute 0060  
                           _second 0063            DS3231_Setup_Time@Device 0013  
       __size_of_Deactivate_Buzzer 0008                             _printf 001C  
                     drawtext@size 0040                             _strcpy 1A7E  
                           _strlen 194C                       __pdataCOMRAM 006E  
                        ??_isdigit 0011                          ?_I2C_Init 0011  
                        ?_I2C_Read 0001                          ?_I2C_Stop 0001  
                     __mediumconst FD3A                             tblptrh 000FF7  
                           tblptrl 000FF6                             tblptru 000FF8  
 __end_of_I2C_Write_Cmd_Write_Data 1BC8                        ?_i2cHighSda 0001  
                      ?_i2cHighScl 0001                             putch@c 0011  
                 __end_of_spiwrite 1C46         __end_ofi2_force_nec_state0 1D40  
                       __accesstop 0080            __end_of__initialization 1580  
                        ?_INT0_isr 0001                 _setup_alarm_minute 0065  
               _setup_alarm_second 0066                      ___rparam_used 000001  
                    __end_of_Rcmd1 0E80                      __end_of_Rcmd3 1180  
                   __pcstackCOMRAM 0001                       __pidataBANK0 190C  
                     __pidataBANK1 1734                      __end_of_font2 FF16  
                __end_of_i2cLowSda 1D18                  __end_of_i2cLowScl 1D30  
                    __end_of_putch 1CE2                     drawPixel@color 0019  
           __size_of_write_command 0010                         ??_I2C_Init 0015  
                       ??_I2C_Read 0011                       _alarm_minute 0058  
                     _alarm_second 0059                         ??_I2C_Stop 0011  
       fillCircleHelper@cornername 0029                            ??_Rcmd1 001D  
                          ??_Rcmd3 001D                 __size_of_drawPixel 0030  
                __end_of_OpenUSART 166A                            ??_putch 0011  
                       __pbssBANK0 00BF                   _setup_alarm_hour 0064  
                    ??_DS1621_Init 0016                          ?_Rcmd2red 0001  
               __size_of_init_UART 0014                    spiwrite@spidata 0012  
                       _alarm_date 0056                       ??i2_INT0_isr 0001  
                       ??_INT0_isr 0011                         _alarm_hour 0057  
                    ?_Wait_One_Sec 0001                            ?_i2cAck 0001  
               __CFG_CCP2MX$PORTBE 000000                     I2C_Read@inByte 0013  
                          ?___wmul 0011                __size_of_i2cHighSda 0008  
              __size_of_i2cHighScl 000C                            ?_chkisr 0001  
           __size_of_setAddrWindow 004E   I2C_Write_Cmd_Write_Data@Data_Out 0014  
                          _CCP2CON 000FBA                       ??_TIMER1_isr 0001  
                    ??_I2C_ReStart 0011                         _fillCircle 1788  
                       I2C_Write@n 0012                            ?_printf 0027  
                          ?_strcpy 0011                            ?_strlen 0011  
                ??_Activate_Buzzer 0011                         _fillScreen 1BE6  
                       _drawCircle 0674                     _init_INTERRUPT 1AE0  
               __end_ofi2_INT0_isr 0AE2                          ?_delay_ms 0017  
                        ?_fillRect 0023                          ?_drawChar 002E  
                          _SSPCON1 000FC6                            _SSPSTAT 000FC7  
            __end_of_fillRectangle 125C                          ?_drawtext 0039  
                _DS3231_Setup_Time 166A                            _Do_Init 1A06  
         _I2C_Write_Cmd_Write_Data 1BA8         __end_of_I2C_Write_Cmd_Only 1C1C  
                       ??_Rcmd2red 0014             DS1621_Read_Temp@Device 0018  
                   ??_Wait_One_Sec 0011                            _i2cNack 1D04  
               __end_of_TIMER1_isr 1CFA                 ?_DS3231_Setup_Time 0001  
                    _write_command 1CC4                          _I2C_Start 1C7E  
                        _I2C_Write 19C8                    __size_of_i2cAck 0012  
                          __Hparam 0000                            __Lparam 0000  
              __end_of_DS1621_Init 1BE6                  __end_of_drawPixel 1AE0  
              ??_DS3231_Setup_Time 0013              __end_of_drawFastVLine 1494  
                 _fillCircleHelper 0C38                            ___awdiv 125C  
                          ___lldiv 1380                    __size_of___wmul 0028  
                          ___llmod 158A                    __size_of_chkisr 1508  
                        ?_spiwrite 0001                            __pcinit 1510  
                          __ramtop 1000                            __ptext0 045E  
                          __ptext1 001C                            __ptext2 1CD4  
                          __ptext3 1B86                            __ptext4 158A  
                          __ptext5 1380          __size_of_DS1621_Read_Temp 003C  
                          __ptext6 1788                            __ptext7 0C38  
                          __ptext8 0674                            __ptext9 125C  
                  __size_of_printf 0442                  __end_of_init_UART 1C5A  
           __end_of_init_INTERRUPT 1B10                    __size_of_strcpy 0032  
                  __size_of_strlen 003E                  __end_of_hexpowers FF5E  
         __end_of_force_nec_state0 1D20                          _T1CONbits 000FCD  
         DS3231_Setup_Time@Address 0014                            _dpowers FF16  
                          _isdigit 1B86                          _T3CONbits 000FB1  
                       ??_delay_ms 0019                __end_of_I2C_ReStart 1C32  
                    drawtext@_text 003A                      drawtext@color 003C  
                       ??_fillRect 0028          __end_of_DS3231_Setup_Time 16D0  
                       ??_drawChar 0035                          _LCD_Reset 1C5A  
                    _setAddrWindow 182C                     __pintcode_body 1494  
                    Wait_One_Sec@I 0011                         delay_ms@ms 0017  
             end_of_initialization 1580                     DO_DISPLAY_D1@T 0011  
                       ??_drawtext 0041                     ?_write_command 0001  
                    __Lmediumconst FD3A          __size_of_DS3231_Read_Time 0064  
                          int_func 1494            DS3231_Read_Time@Address 0014  
                       ?_I2C_Start 0001                         ?_I2C_Write 0001  
                  ___lldiv@divisor 0015                    ___lldiv@counter 001D  
                       _tempSecond 006E                          _RCSTAbits 000FAB  
                          printf@c 0045                            printf@f 0027  
                          postdec1 000FE5                            postdec2 000FDD  
                          postinc0 000FEE                            postinc2 000FDE  
                       ??_spiwrite 0011                            strlen@s 0011  
                  fillCircle@color 0041        I2C_Write_Cmd_Write_Data@Cmd 0013  
                      ?_fillCircle 003B                   drawtext@cursor_x 00E4  
                 drawtext@cursor_y 00E3                          _PORTBbits 000F81  
                        _PORTCbits 000F82                          _PORTDbits 000F83  
                        _PORTEbits 000F84                   I2C_Write@outByte 0011  
                  ?_init_INTERRUPT 0001                        ?_fillScreen 0024  
                       _setup_hour 0068                         _setup_year 006C  
                      ?_drawCircle 001C                         drawChar@bg 0032  
                        _TRISCbits 000F94                          _TRISDbits 000F95  
                     ??_i2cHighSda 0011                       ??_i2cHighScl 0011  
                __size_of_I2C_Init 000A                  __size_of_I2C_Read 0048  
                __size_of_I2C_Stop 0012                     ?_setAddrWindow 0014  
                       ?_LCD_Reset 0001              __end_of_DO_DISPLAY_D1 108E  
                 drawtext@textsize 00DF                         drawPixel@x 001B  
                       drawPixel@y 0018                        _DS1621_Init 1BC8  
                      printf@width 0042                          _TXSTAbits 000FAC  
                __size_of_INT0_isr 0160                     __end_of_i2cAck 1CA2  
         DS1621_Read_Temp@Data_Ret 0017                 i2_force_nec_state0 1D38  
               __end_of_i2cHighSda 1D38                 __end_of_i2cHighScl 1CEE  
                   __end_of___wmul 1B62                      delay_ms@count 001B  
                       _write_data 1CB4                      __pidataCOMRAM 1D40  
                   __end_of_chkisr 1510           ?_TFT_GreenTab_Initialize 0001  
                      _I2C_ReStart 1C1C                         drawtext@bg 003E  
              ?i2_force_nec_state0 0001                          _Nec_code1 0052  
                        _i2cLowSda 1D0E                          _i2cLowScl 1D28  
             __end_of_Wait_One_Sec 1B86                     __end_of_printf 045E  
                   __end_of_strcpy 1AB0                     __end_of_strlen 198A  
                        _Nec_state 0053                start_initialization 1510  
       __size_of_DS3231_Setup_Time 0066                    ??_write_command 0013  
                        _OpenUSART 15FA               ??i2_force_nec_state0 0001  
              __size_of_fillCircle 0052                    ___llmod@divisor 0022  
                 __CFG_OSC$INTIO67 000000                        ??_I2C_Start 0011  
                  ___llmod@counter 0026                        ??_I2C_Write 0011  
                         ??_i2cAck 0011                  __size_of_Rcmd2red 003E  
              __size_of_fillScreen 001C                __size_of_drawCircle 01AE  
                  _Activate_Buzzer 1CA2                           ??___wmul 0015  
                         ??_chkisr 0003                        __pdataBANK0 0080  
                      __pdataBANK1 0100                    setAddrWindow@x0 0017  
                  setAddrWindow@x1 0015                    setAddrWindow@y0 0014  
                  setAddrWindow@y1 0016                           ??_printf 0035  
                 _DS1621_Read_Temp 1A42                           ??_strcpy 0015  
                         ??_strlen 0013                         ?_i2cLowSda 0001  
                       ?_i2cLowScl 0001                        __pbssCOMRAM 0046  
       ??_I2C_Write_Cmd_Write_Data 0015                    ??_setAddrWindow 0017  
                    __pcstackBANK0 00DE                        ??_LCD_Reset 001D  
                     _isdigit$2177 0012           __end_of_fillCircleHelper 0D70  
                __size_of_delay_ms 0052                           ?_Do_Init 0001  
                __size_of_fillRect 004A                  __size_of_drawChar 0156  
                       ?_OpenUSART 0011                   _DS3231_Read_Time 16D0  
                         ?_i2cNack 0001                  __size_of_drawtext 010A  
                      I2C_Read@ack 0011                          _bit_count 005A  
                        __pintcode 0008    __end_of_TFT_GreenTab_Initialize 1B3A  
                    __pmediumconst FD3A                           ?___awdiv 0017  
                         ?___lldiv 0011                           ?___llmod 001E  
                        __tft_type 0055                 _I2C_Write_Cmd_Only 1C02  
               drawFastVLine@color 001A                        ?_write_data 0001  
                        _drawPixel 1AB0                  __size_of_spiwrite 0014  
              ?_I2C_Write_Cmd_Only 0013                  ?_force_nec_state0 0001  
                         ?_isdigit 0001                           _I2C_Init 1CFA  
                         _I2C_Read 18C4                           _I2C_Stop 1C6C  
                _Initialize_Screen 12F2                     __size_of_Rcmd1 0110  
                   __size_of_Rcmd3 00F2                          _init_UART 1C46  
               ??_force_nec_state0 0011           I2C_Write_Cmd_Only@Device 0014  
                        _hexpowers FF3E                 ?_Initialize_Screen 0001  
                   __size_of_putch 000E            __end_of_Activate_Buzzer 1CB4  
                   ___wmul@product 0015                ??_Initialize_Screen 0043  
                         _INT0_isr 0822               ??_I2C_Write_Cmd_Only 0014  
                         _PIE1bits 000F9D             DS3231_Read_Time@Device 0015  
                         _PIR1bits 000F9E                           _PIR2bits 000FA1  
                 ??_init_INTERRUPT 0011              __size_of_Wait_One_Sec 0024  
                        _setup_day 0067                  DS1621_Init@Device 0016  
                        fillRect@h 0025                          fillRect@i 002C  
                        fillRect@w 0024                          fillRect@x 002B  
                        fillRect@y 0023                          drawChar@c 002F  
                        drawChar@i 0038                          drawChar@j 0037  
                     ??_fillCircle 0043                          drawChar@x 0036  
                        drawChar@y 002E                         ?_drawPixel 0018  
           __size_of_fillRectangle 00DC                  ___wmul@multiplier 0011  
        __end_of_Initialize_Screen 1380                        ??_i2cLowSda 0011  
                      ??_i2cLowScl 0011                       ??_fillScreen 0026  
                     ??_drawCircle 0024                         printf@flag 0044  
                       printf@prec 003A                          main@found 00EA  
                        main@tempC 00E6                          main@tempF 00E7  
                       ?_init_UART 0001                        _INTCON2bits 000FF1  
                        copy_data0 153C                          copy_data1 155C  
                        drawtext@i 00E1             __size_of_drawFastVLine 0088  
                        drawtext@x 00DE                          drawtext@y 0039  
                         _Nec_code 0046                  write_command@cmd_ 0013  
                      ??_OpenUSART 0013                       ?_DS1621_Init 0001  
                         _Rcmd2red 198A                   __size_of_Do_Init 003C  
              __size_of_write_data 0010                    OpenUSART@config 0013  
                     _Time_Elapsed 004A                 __end_of_fillCircle 17DA  
                 __size_of_i2cNack 000A                       _Wait_One_Sec 1B62  
                         __Hrparam 0000                 __end_of_fillScreen 1C02  
                         __Lrparam 0000                 __end_of_drawCircle 0822  
                 __size_of___awdiv 0096                   __size_of___lldiv 008C  
                 __size_of___llmod 0070                       ?_I2C_ReStart 0001  
                 __size_of_isdigit 0022                           _delay_ms 17DA  
                         __ptext10 1B62                           __ptext11 12F2  
                         __ptext20 1AB0                           __ptext12 1A7E  
                         __ptext21 182C                           __ptext13 1BE6  
                         __ptext30 17DA                           __ptext22 1B10  
                         __ptext14 1180                           __ptext31 1B3A  
                         __ptext23 108E                           __ptext15 0E80  
                         __ptext40 1BA8                           __ptext32 0822  
                         __ptext24 198A                           __ptext16 194C  
                         __ptext41 1C02                           __ptext33 1D18  
                         __ptext25 0D70                           __ptext17 0AE2  
                         __ptext50 1D04                           __ptext42 1D20  
                         __ptext34 1A06                           __ptext26 1CB4  
                         __ptext18 187A                           __ptext51 1C90  
                         __ptext43 166A                           __ptext35 1C46  
                         __ptext27 1CC4                           __ptext19 140C  
                         __ptext60 0982                           __ptext52 1C1C  
                         __ptext44 16D0                           __ptext36 15FA  
                         __ptext28 1C32                           __ptext61 1D38  
                         __ptext53 1D0E                           __ptext45 1A42  
                         __ptext37 1AE0                           __ptext29 1C5A  
                         __ptext62 1CEE                           __ptext54 1D28  
                         __ptext46 19C8                           __ptext38 1CFA  
                         __ptext55 1D30                           __ptext47 1C6C  
                         __ptext39 1BC8                           __ptext56 1CE2  
                         __ptext48 1C7E                           __ptext57 0F8A  
                         __ptext49 18C4                           __ptext58 1CA2  
                         _fillRect 187A                           _drawChar 0AE2  
 __size_of_TFT_GreenTab_Initialize 002A                           _colstart 005B  
                         _drawtext 0E80                         strcpy@from 0013  
                    _fillRectangle 1180           __end_of_DS1621_Read_Temp 1A7E  
                 ?_Activate_Buzzer 0001                      __size_of_main 0216  
                  fillRectangle@hi 0021                    fillRectangle@lo 0022  
                    _drawFastVLine 140C             __size_of_DO_DISPLAY_D1 0104  
                        printf@idx 0039                           _spiwrite 1C32  
                        printf@val 003E                        ??_drawPixel 001B  
                         _rowstart 0062           __end_of_DS3231_Read_Time 1734  
               fillCircleHelper@x0 0023                 fillCircleHelper@y0 0025  
       __size_of_Initialize_Screen 008E                         _INTCONbits 000FF2  
                   OpenUSART@spbrg 0011                        ??_init_UART 0014  
                         isdigit@c 0013                  ?_fillCircleHelper 0023  
                        spiwrite@x 0011                           intlevel2 0000  
                   ?_fillRectangle 0018                 ??_fillCircleHelper 002F  
            __end_of_write_command 1CD4                   ___lldiv@dividend 0011  
      __size_ofi2_force_nec_state0 0008                         i2_INT0_isr 0982  
                  fillScreen@color 0024                       fillCircle@x0 003B  
                     fillCircle@y0 003D                     fillRectangle@h 001A  
                   fillRectangle@w 0019                     fillRectangle@x 0023  
                   fillRectangle@y 0018                     ?_drawFastVLine 0018  
                         printf@ap 003C                  fillCircleHelper@f 0035  
                fillCircleHelper@r 0027                  fillCircleHelper@x 0037  
                fillCircleHelper@y 0039                       ??_write_data 0013  
                       _TIMER1_isr 1CEE                      fillRect@color 0026  
                 ___lldiv@quotient 0019                           strcpy@cp 0015  
                         strlen@cp 0015                           strcpy@to 0011  
            I2C_Write_Cmd_Only@Cmd 0013                       _setup_minute 0069  
                     _setup_second 006B                        fillCircle@r 003F  
            __end_of_setAddrWindow 187A                 fillRectangle@color 001B  
                    _DO_DISPLAY_D1 0F8A                      drawChar@color 0030  
                      _setup_month 006A                 __end_of_write_data 1CC4  
        __size_of_force_nec_state0 0008                       drawChar@line 0035  
                     drawChar@size 0034  __size_of_I2C_Write_Cmd_Write_Data 0020  
             __size_of_DS1621_Init 001E          ?_I2C_Write_Cmd_Write_Data 0013  
